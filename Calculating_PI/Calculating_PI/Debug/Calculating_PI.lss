
Calculating_PI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00802000  000042dc  00004370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000cd9  00802068  00802068  000043d8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000043d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000740  00000000  00000000  00004474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dfc0  00000000  00000000  00004bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004e3b  00000000  00000000  00012b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004afa  00000000  00000000  000179af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000178c  00000000  00000000  0001c4ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000055e1  00000000  00000000  0001dc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008ca5  00000000  00000000  00023219  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007f0  00000000  00000000  0002bebe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__ctors_end>
       4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
       8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
       c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      10:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      14:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      18:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      1c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      20:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      24:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      28:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      2c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      30:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      34:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      38:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__vector_14>
      3c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      40:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      44:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      48:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      4c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      50:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      54:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      58:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      5c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      60:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      64:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      68:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      6c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      70:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      74:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      78:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      7c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      80:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      84:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      88:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      8c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      90:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      94:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      98:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      9c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      a0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      a4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      a8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      ac:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      b0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      b4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      b8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      bc:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      c0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      c4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      c8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      cc:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      d0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      d4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      d8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      dc:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      e0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      e4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      e8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      ec:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      f0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      f4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      f8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      fc:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     100:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     104:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     108:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     10c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     110:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     114:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     118:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     11c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     120:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     124:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     128:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     12c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     130:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     134:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     138:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     13c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     140:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     144:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     148:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     14c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     150:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     154:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     158:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     15c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     160:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     164:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     168:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     16c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     170:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     174:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     178:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     17c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     180:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     184:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     188:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     18c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     190:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     194:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     198:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     19c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1a0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1a4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1a8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1ac:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1b0:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__vector_108>
     1b4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1b8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1bc:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1c0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1c4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1c8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1cc:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1d0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1d4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1d8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1dc:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1e0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1e4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1e8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1ec:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1f0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1f4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1f8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1fc:	22 11       	cpse	r18, r2
     1fe:	22 11       	cpse	r18, r2
     200:	22 11       	cpse	r18, r2
     202:	6f 11       	cpse	r22, r15
     204:	57 11       	cpse	r21, r7
     206:	6c 11       	cpse	r22, r12
     208:	22 11       	cpse	r18, r2
     20a:	22 11       	cpse	r18, r2
     20c:	6f 11       	cpse	r22, r15
     20e:	57 11       	cpse	r21, r7

00000210 <__trampolines_start>:
     210:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <vCalculation>
     214:	0c 94 6f 11 	jmp	0x22de	; 0x22de <prvTimerTask+0x212>
     218:	0c 94 c5 03 	jmp	0x78a	; 0x78a <vEventGroupSetBitsCallback>
     21c:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <vDisplayUpdateTask>
     220:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <prvTimerTask>
     224:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <prvTimerTask+0x1e2>
     228:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <prvTimerTask+0x20c>
     22c:	0c 94 22 11 	jmp	0x2244	; 0x2244 <prvTimerTask+0x178>
     230:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <vInterface>
     234:	0c 94 ef 09 	jmp	0x13de	; 0x13de <prvIdleTask>

00000238 <__trampolines_end>:
     238:	6e 61       	ori	r22, 0x1E	; 30
     23a:	6e 00       	.word	0x006e	; ????

0000023c <__c.2332>:
     23c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     24c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     25c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     26c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     27c:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     28c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     29c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2ac:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2bc:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2cc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2dc:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2ec:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2fc:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     30c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     31c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     32c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000033a <__ctors_end>:
     33a:	11 24       	eor	r1, r1
     33c:	1f be       	out	0x3f, r1	; 63
     33e:	cf ef       	ldi	r28, 0xFF	; 255
     340:	cd bf       	out	0x3d, r28	; 61
     342:	df e3       	ldi	r29, 0x3F	; 63
     344:	de bf       	out	0x3e, r29	; 62
     346:	00 e0       	ldi	r16, 0x00	; 0
     348:	0c bf       	out	0x3c, r16	; 60

0000034a <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     34a:	e1 e4       	ldi	r30, 0x41	; 65
     34c:	fd e2       	ldi	r31, 0x2D	; 45
     34e:	8a ea       	ldi	r24, 0xAA	; 170
     350:	90 e4       	ldi	r25, 0x40	; 64
     352:	81 93       	st	Z+, r24
     354:	e0 30       	cpi	r30, 0x00	; 0
     356:	f9 07       	cpc	r31, r25
     358:	e0 f3       	brcs	.-8      	; 0x352 <init_mem+0x8>

0000035a <__do_copy_data>:
     35a:	10 e2       	ldi	r17, 0x20	; 32
     35c:	a0 e0       	ldi	r26, 0x00	; 0
     35e:	b0 e2       	ldi	r27, 0x20	; 32
     360:	ec ed       	ldi	r30, 0xDC	; 220
     362:	f2 e4       	ldi	r31, 0x42	; 66
     364:	00 e0       	ldi	r16, 0x00	; 0
     366:	0b bf       	out	0x3b, r16	; 59
     368:	02 c0       	rjmp	.+4      	; 0x36e <__do_copy_data+0x14>
     36a:	07 90       	elpm	r0, Z+
     36c:	0d 92       	st	X+, r0
     36e:	a8 36       	cpi	r26, 0x68	; 104
     370:	b1 07       	cpc	r27, r17
     372:	d9 f7       	brne	.-10     	; 0x36a <__do_copy_data+0x10>

00000374 <__do_clear_bss>:
     374:	2d e2       	ldi	r18, 0x2D	; 45
     376:	a8 e6       	ldi	r26, 0x68	; 104
     378:	b0 e2       	ldi	r27, 0x20	; 32
     37a:	01 c0       	rjmp	.+2      	; 0x37e <.do_clear_bss_start>

0000037c <.do_clear_bss_loop>:
     37c:	1d 92       	st	X+, r1

0000037e <.do_clear_bss_start>:
     37e:	a1 34       	cpi	r26, 0x41	; 65
     380:	b2 07       	cpc	r27, r18
     382:	e1 f7       	brne	.-8      	; 0x37c <.do_clear_bss_loop>
     384:	0e 94 ed 12 	call	0x25da	; 0x25da <main>
     388:	0c 94 6c 21 	jmp	0x42d8	; 0x42d8 <_exit>

0000038c <__bad_interrupt>:
     38c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000390 <initButtons>:
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
	PORTF.DIRCLR = PIN4_bm; //SW1
     390:	e0 ea       	ldi	r30, 0xA0	; 160
     392:	f6 e0       	ldi	r31, 0x06	; 6
     394:	80 e1       	ldi	r24, 0x10	; 16
     396:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     398:	80 e2       	ldi	r24, 0x20	; 32
     39a:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     39c:	80 e4       	ldi	r24, 0x40	; 64
     39e:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     3a0:	80 e8       	ldi	r24, 0x80	; 128
     3a2:	82 83       	std	Z+2, r24	; 0x02
     3a4:	08 95       	ret

000003a6 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     3a6:	0f 93       	push	r16
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	1f 92       	push	r1
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     3b2:	2f b7       	in	r18, 0x3f	; 63
     3b4:	29 83       	std	Y+1, r18	; 0x01
     3b6:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     3b8:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     3ba:	fc 01       	movw	r30, r24
     3bc:	08 ed       	ldi	r16, 0xD8	; 216
     3be:	04 bf       	out	0x34, r16	; 52
     3c0:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	8f bf       	out	0x3f, r24	; 63
#endif
}
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	0f 91       	pop	r16
     3ce:	08 95       	ret

000003d0 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     3d0:	61 11       	cpse	r22, r1
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <CLKSYS_XOSC_Config+0x8>
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <CLKSYS_XOSC_Config+0xa>
     3d8:	90 e2       	ldi	r25, 0x20	; 32
     3da:	84 2b       	or	r24, r20
     3dc:	89 2b       	or	r24, r25
     3de:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     3e2:	08 95       	ret

000003e4 <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     3e4:	6f 71       	andi	r22, 0x1F	; 31
     3e6:	86 2b       	or	r24, r22
     3e8:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     3ec:	08 95       	ret

000003ee <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     3ee:	e0 e5       	ldi	r30, 0x50	; 80
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	90 81       	ld	r25, Z
     3f4:	28 2f       	mov	r18, r24
     3f6:	20 95       	com	r18
     3f8:	92 23       	and	r25, r18
     3fa:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     3fc:	90 81       	ld	r25, Z
	return clkEnabled;
}
     3fe:	89 23       	and	r24, r25
     400:	08 95       	ret

00000402 <CLKSYS_Prescalers_Config>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     402:	68 2b       	or	r22, r24
     404:	81 e4       	ldi	r24, 0x41	; 65
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <CCPWrite>
     40c:	08 95       	ret

0000040e <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     416:	00 e4       	ldi	r16, 0x40	; 64
     418:	10 e0       	ldi	r17, 0x00	; 0
     41a:	f8 01       	movw	r30, r16
     41c:	60 81       	ld	r22, Z
	CCPWrite( &CLK.CTRL, clkCtrl );
     41e:	68 7f       	andi	r22, 0xF8	; 248
     420:	68 2b       	or	r22, r24
     422:	80 e4       	ldi	r24, 0x40	; 64
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     42a:	f8 01       	movw	r30, r16
     42c:	80 81       	ld	r24, Z
	return clkCtrl;
}
     42e:	8c 23       	and	r24, r28
     430:	cf 91       	pop	r28
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	08 95       	ret

00000438 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     438:	fc 01       	movw	r30, r24
     43a:	90 81       	ld	r25, Z
     43c:	90 7f       	andi	r25, 0xF0	; 240
     43e:	69 2b       	or	r22, r25
     440:	60 83       	st	Z, r22
     442:	08 95       	ret

00000444 <TC0_ConfigWGM>:
     444:	fc 01       	movw	r30, r24
     446:	91 81       	ldd	r25, Z+1	; 0x01
     448:	98 7f       	andi	r25, 0xF8	; 248
     44a:	69 2b       	or	r22, r25
     44c:	61 83       	std	Z+1, r22	; 0x01
     44e:	08 95       	ret

00000450 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     450:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     452:	96 81       	ldd	r25, Z+6	; 0x06
     454:	9c 7f       	andi	r25, 0xFC	; 252
     456:	69 2b       	or	r22, r25
     458:	66 83       	std	Z+6, r22	; 0x06
     45a:	08 95       	ret

0000045c <software_reset>:
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     45c:	00 00       	nop
     45e:	88 ed       	ldi	r24, 0xD8	; 216
     460:	84 bf       	out	0x34, r24	; 52
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     468:	08 95       	ret

0000046a <vApplicationStackOverflowHook>:
     46a:	0e 94 2e 02 	call	0x45c	; 0x45c <software_reset>
     46e:	08 95       	ret

00000470 <xEventGroupCreate>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	80 e1       	ldi	r24, 0x10	; 16
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 d5 03 	call	0x7aa	; 0x7aa <pvPortMalloc>
     47c:	ec 01       	movw	r28, r24
     47e:	00 97       	sbiw	r24, 0x00	; 0
     480:	41 f0       	breq	.+16     	; 0x492 <xEventGroupCreate+0x22>
     482:	fc 01       	movw	r30, r24
     484:	11 92       	st	Z+, r1
     486:	11 92       	st	Z+, r1
     488:	11 92       	st	Z+, r1
     48a:	11 92       	st	Z+, r1
     48c:	cf 01       	movw	r24, r30
     48e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <vListInitialise>
     492:	ce 01       	movw	r24, r28
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <xEventGroupWaitBits>:
     49a:	2f 92       	push	r2
     49c:	3f 92       	push	r3
     49e:	4f 92       	push	r4
     4a0:	5f 92       	push	r5
     4a2:	6f 92       	push	r6
     4a4:	7f 92       	push	r7
     4a6:	8f 92       	push	r8
     4a8:	9f 92       	push	r9
     4aa:	af 92       	push	r10
     4ac:	bf 92       	push	r11
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	ec 01       	movw	r28, r24
     4c0:	4a 01       	movw	r8, r20
     4c2:	5b 01       	movw	r10, r22
     4c4:	62 2e       	mov	r6, r18
     4c6:	70 2e       	mov	r7, r16
     4c8:	0e 94 49 0b 	call	0x1692	; 0x1692 <vTaskSuspendAll>
     4cc:	28 80       	ld	r2, Y
     4ce:	39 80       	ldd	r3, Y+1	; 0x01
     4d0:	4a 80       	ldd	r4, Y+2	; 0x02
     4d2:	5b 80       	ldd	r5, Y+3	; 0x03
     4d4:	01 11       	cpse	r16, r1
     4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <xEventGroupWaitBits+0x58>
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	b2 01       	movw	r22, r4
     4dc:	a1 01       	movw	r20, r2
     4de:	48 21       	and	r20, r8
     4e0:	59 21       	and	r21, r9
     4e2:	6a 21       	and	r22, r10
     4e4:	7b 21       	and	r23, r11
     4e6:	45 2b       	or	r20, r21
     4e8:	46 2b       	or	r20, r22
     4ea:	47 2b       	or	r20, r23
     4ec:	79 f4       	brne	.+30     	; 0x50c <xEventGroupWaitBits+0x72>
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	0d c0       	rjmp	.+26     	; 0x50c <xEventGroupWaitBits+0x72>
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	b2 01       	movw	r22, r4
     4f6:	a1 01       	movw	r20, r2
     4f8:	48 21       	and	r20, r8
     4fa:	59 21       	and	r21, r9
     4fc:	6a 21       	and	r22, r10
     4fe:	7b 21       	and	r23, r11
     500:	48 15       	cp	r20, r8
     502:	59 05       	cpc	r21, r9
     504:	6a 05       	cpc	r22, r10
     506:	7b 05       	cpc	r23, r11
     508:	09 f0       	breq	.+2      	; 0x50c <xEventGroupWaitBits+0x72>
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	88 23       	and	r24, r24
     50e:	81 f0       	breq	.+32     	; 0x530 <xEventGroupWaitBits+0x96>
     510:	66 20       	and	r6, r6
     512:	09 f4       	brne	.+2      	; 0x516 <xEventGroupWaitBits+0x7c>
     514:	70 c0       	rjmp	.+224    	; 0x5f6 <xEventGroupWaitBits+0x15c>
     516:	80 94       	com	r8
     518:	90 94       	com	r9
     51a:	a0 94       	com	r10
     51c:	b0 94       	com	r11
     51e:	82 20       	and	r8, r2
     520:	93 20       	and	r9, r3
     522:	a4 20       	and	r10, r4
     524:	b5 20       	and	r11, r5
     526:	88 82       	st	Y, r8
     528:	99 82       	std	Y+1, r9	; 0x01
     52a:	aa 82       	std	Y+2, r10	; 0x02
     52c:	bb 82       	std	Y+3, r11	; 0x03
     52e:	63 c0       	rjmp	.+198    	; 0x5f6 <xEventGroupWaitBits+0x15c>
     530:	c1 14       	cp	r12, r1
     532:	d1 04       	cpc	r13, r1
     534:	e1 04       	cpc	r14, r1
     536:	f1 04       	cpc	r15, r1
     538:	09 f4       	brne	.+2      	; 0x53c <xEventGroupWaitBits+0xa2>
     53a:	5d c0       	rjmp	.+186    	; 0x5f6 <xEventGroupWaitBits+0x15c>
     53c:	66 20       	and	r6, r6
     53e:	29 f0       	breq	.+10     	; 0x54a <xEventGroupWaitBits+0xb0>
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	71 e0       	ldi	r23, 0x01	; 1
     548:	03 c0       	rjmp	.+6      	; 0x550 <xEventGroupWaitBits+0xb6>
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	ba 01       	movw	r22, r20
     550:	71 10       	cpse	r7, r1
     552:	74 60       	ori	r23, 0x04	; 4
     554:	48 29       	or	r20, r8
     556:	59 29       	or	r21, r9
     558:	6a 29       	or	r22, r10
     55a:	7b 29       	or	r23, r11
     55c:	97 01       	movw	r18, r14
     55e:	86 01       	movw	r16, r12
     560:	ce 01       	movw	r24, r28
     562:	04 96       	adiw	r24, 0x04	; 4
     564:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <vTaskPlaceOnUnorderedEventList>
     568:	0e 94 34 0c 	call	0x1868	; 0x1868 <xTaskResumeAll>
     56c:	81 11       	cpse	r24, r1
     56e:	02 c0       	rjmp	.+4      	; 0x574 <xEventGroupWaitBits+0xda>
     570:	0e 94 5a 05 	call	0xab4	; 0xab4 <vPortYield>
     574:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <uxTaskResetEventItemValue>
     578:	91 fd       	sbrc	r25, 1
     57a:	39 c0       	rjmp	.+114    	; 0x5ee <xEventGroupWaitBits+0x154>
     57c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     580:	ff 93       	push	r31
     582:	f8 7f       	andi	r31, 0xF8	; 248
     584:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     588:	68 81       	ld	r22, Y
     58a:	79 81       	ldd	r23, Y+1	; 0x01
     58c:	8a 81       	ldd	r24, Y+2	; 0x02
     58e:	9b 81       	ldd	r25, Y+3	; 0x03
     590:	71 10       	cpse	r7, r1
     592:	0d c0       	rjmp	.+26     	; 0x5ae <xEventGroupWaitBits+0x114>
     594:	21 e0       	ldi	r18, 0x01	; 1
     596:	75 01       	movw	r14, r10
     598:	64 01       	movw	r12, r8
     59a:	c6 22       	and	r12, r22
     59c:	d7 22       	and	r13, r23
     59e:	e8 22       	and	r14, r24
     5a0:	f9 22       	and	r15, r25
     5a2:	cd 28       	or	r12, r13
     5a4:	ce 28       	or	r12, r14
     5a6:	cf 28       	or	r12, r15
     5a8:	79 f4       	brne	.+30     	; 0x5c8 <xEventGroupWaitBits+0x12e>
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	0d c0       	rjmp	.+26     	; 0x5c8 <xEventGroupWaitBits+0x12e>
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	75 01       	movw	r14, r10
     5b2:	64 01       	movw	r12, r8
     5b4:	c6 22       	and	r12, r22
     5b6:	d7 22       	and	r13, r23
     5b8:	e8 22       	and	r14, r24
     5ba:	f9 22       	and	r15, r25
     5bc:	c8 14       	cp	r12, r8
     5be:	d9 04       	cpc	r13, r9
     5c0:	ea 04       	cpc	r14, r10
     5c2:	fb 04       	cpc	r15, r11
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <xEventGroupWaitBits+0x12e>
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	22 23       	and	r18, r18
     5ca:	71 f0       	breq	.+28     	; 0x5e8 <xEventGroupWaitBits+0x14e>
     5cc:	66 20       	and	r6, r6
     5ce:	61 f0       	breq	.+24     	; 0x5e8 <xEventGroupWaitBits+0x14e>
     5d0:	80 94       	com	r8
     5d2:	90 94       	com	r9
     5d4:	a0 94       	com	r10
     5d6:	b0 94       	com	r11
     5d8:	86 22       	and	r8, r22
     5da:	97 22       	and	r9, r23
     5dc:	a8 22       	and	r10, r24
     5de:	b9 22       	and	r11, r25
     5e0:	88 82       	st	Y, r8
     5e2:	99 82       	std	Y+1, r9	; 0x01
     5e4:	aa 82       	std	Y+2, r10	; 0x02
     5e6:	bb 82       	std	Y+3, r11	; 0x03
     5e8:	ff 91       	pop	r31
     5ea:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     5ee:	1b 01       	movw	r2, r22
     5f0:	2c 01       	movw	r4, r24
     5f2:	55 24       	eor	r5, r5
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <xEventGroupWaitBits+0x160>
     5f6:	0e 94 34 0c 	call	0x1868	; 0x1868 <xTaskResumeAll>
     5fa:	c2 01       	movw	r24, r4
     5fc:	b1 01       	movw	r22, r2
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	df 90       	pop	r13
     60c:	cf 90       	pop	r12
     60e:	bf 90       	pop	r11
     610:	af 90       	pop	r10
     612:	9f 90       	pop	r9
     614:	8f 90       	pop	r8
     616:	7f 90       	pop	r7
     618:	6f 90       	pop	r6
     61a:	5f 90       	pop	r5
     61c:	4f 90       	pop	r4
     61e:	3f 90       	pop	r3
     620:	2f 90       	pop	r2
     622:	08 95       	ret

00000624 <xEventGroupClearBits>:
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     62c:	ff 93       	push	r31
     62e:	f8 7f       	andi	r31, 0xF8	; 248
     630:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     634:	fc 01       	movw	r30, r24
     636:	00 81       	ld	r16, Z
     638:	11 81       	ldd	r17, Z+1	; 0x01
     63a:	22 81       	ldd	r18, Z+2	; 0x02
     63c:	33 81       	ldd	r19, Z+3	; 0x03
     63e:	40 95       	com	r20
     640:	50 95       	com	r21
     642:	60 95       	com	r22
     644:	70 95       	com	r23
     646:	40 23       	and	r20, r16
     648:	51 23       	and	r21, r17
     64a:	62 23       	and	r22, r18
     64c:	73 23       	and	r23, r19
     64e:	40 83       	st	Z, r20
     650:	51 83       	std	Z+1, r21	; 0x01
     652:	62 83       	std	Z+2, r22	; 0x02
     654:	73 83       	std	Z+3, r23	; 0x03
     656:	ff 91       	pop	r31
     658:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     65c:	c9 01       	movw	r24, r18
     65e:	b8 01       	movw	r22, r16
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	08 95       	ret

00000666 <xEventGroupSetBits>:
     666:	4f 92       	push	r4
     668:	5f 92       	push	r5
     66a:	6f 92       	push	r6
     66c:	7f 92       	push	r7
     66e:	af 92       	push	r10
     670:	bf 92       	push	r11
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	ec 01       	movw	r28, r24
     684:	6a 01       	movw	r12, r20
     686:	7b 01       	movw	r14, r22
     688:	8c 01       	movw	r16, r24
     68a:	09 5f       	subi	r16, 0xF9	; 249
     68c:	1f 4f       	sbci	r17, 0xFF	; 255
     68e:	0e 94 49 0b 	call	0x1692	; 0x1692 <vTaskSuspendAll>
     692:	eb 85       	ldd	r30, Y+11	; 0x0b
     694:	fc 85       	ldd	r31, Y+12	; 0x0c
     696:	88 81       	ld	r24, Y
     698:	99 81       	ldd	r25, Y+1	; 0x01
     69a:	aa 81       	ldd	r26, Y+2	; 0x02
     69c:	bb 81       	ldd	r27, Y+3	; 0x03
     69e:	c8 2a       	or	r12, r24
     6a0:	d9 2a       	or	r13, r25
     6a2:	ea 2a       	or	r14, r26
     6a4:	fb 2a       	or	r15, r27
     6a6:	c8 82       	st	Y, r12
     6a8:	d9 82       	std	Y+1, r13	; 0x01
     6aa:	ea 82       	std	Y+2, r14	; 0x02
     6ac:	fb 82       	std	Y+3, r15	; 0x03
     6ae:	0e 17       	cp	r16, r30
     6b0:	1f 07       	cpc	r17, r31
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <xEventGroupSetBits+0x50>
     6b4:	42 c0       	rjmp	.+132    	; 0x73a <xEventGroupSetBits+0xd4>
     6b6:	c1 2c       	mov	r12, r1
     6b8:	d1 2c       	mov	r13, r1
     6ba:	76 01       	movw	r14, r12
     6bc:	a4 80       	ldd	r10, Z+4	; 0x04
     6be:	b5 80       	ldd	r11, Z+5	; 0x05
     6c0:	80 81       	ld	r24, Z
     6c2:	91 81       	ldd	r25, Z+1	; 0x01
     6c4:	a2 81       	ldd	r26, Z+2	; 0x02
     6c6:	b3 81       	ldd	r27, Z+3	; 0x03
     6c8:	ac 01       	movw	r20, r24
     6ca:	bd 01       	movw	r22, r26
     6cc:	77 27       	eor	r23, r23
     6ce:	b2 fd       	sbrc	r27, 2
     6d0:	0f c0       	rjmp	.+30     	; 0x6f0 <xEventGroupSetBits+0x8a>
     6d2:	48 80       	ld	r4, Y
     6d4:	59 80       	ldd	r5, Y+1	; 0x01
     6d6:	6a 80       	ldd	r6, Y+2	; 0x02
     6d8:	7b 80       	ldd	r7, Y+3	; 0x03
     6da:	44 22       	and	r4, r20
     6dc:	55 22       	and	r5, r21
     6de:	66 22       	and	r6, r22
     6e0:	77 22       	and	r7, r23
     6e2:	21 e0       	ldi	r18, 0x01	; 1
     6e4:	45 28       	or	r4, r5
     6e6:	46 28       	or	r4, r6
     6e8:	47 28       	or	r4, r7
     6ea:	89 f4       	brne	.+34     	; 0x70e <xEventGroupSetBits+0xa8>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	0f c0       	rjmp	.+30     	; 0x70e <xEventGroupSetBits+0xa8>
     6f0:	48 80       	ld	r4, Y
     6f2:	59 80       	ldd	r5, Y+1	; 0x01
     6f4:	6a 80       	ldd	r6, Y+2	; 0x02
     6f6:	7b 80       	ldd	r7, Y+3	; 0x03
     6f8:	44 22       	and	r4, r20
     6fa:	55 22       	and	r5, r21
     6fc:	66 22       	and	r6, r22
     6fe:	77 22       	and	r7, r23
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	44 16       	cp	r4, r20
     704:	55 06       	cpc	r5, r21
     706:	66 06       	cpc	r6, r22
     708:	77 06       	cpc	r7, r23
     70a:	09 f0       	breq	.+2      	; 0x70e <xEventGroupSetBits+0xa8>
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	22 23       	and	r18, r18
     710:	71 f0       	breq	.+28     	; 0x72e <xEventGroupSetBits+0xc8>
     712:	b0 ff       	sbrs	r27, 0
     714:	04 c0       	rjmp	.+8      	; 0x71e <xEventGroupSetBits+0xb8>
     716:	c4 2a       	or	r12, r20
     718:	d5 2a       	or	r13, r21
     71a:	e6 2a       	or	r14, r22
     71c:	f7 2a       	or	r15, r23
     71e:	48 81       	ld	r20, Y
     720:	59 81       	ldd	r21, Y+1	; 0x01
     722:	6a 81       	ldd	r22, Y+2	; 0x02
     724:	7b 81       	ldd	r23, Y+3	; 0x03
     726:	72 60       	ori	r23, 0x02	; 2
     728:	cf 01       	movw	r24, r30
     72a:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <vTaskRemoveFromUnorderedEventList>
     72e:	ea 2d       	mov	r30, r10
     730:	fb 2d       	mov	r31, r11
     732:	0e 17       	cp	r16, r30
     734:	1f 07       	cpc	r17, r31
     736:	11 f6       	brne	.-124    	; 0x6bc <xEventGroupSetBits+0x56>
     738:	03 c0       	rjmp	.+6      	; 0x740 <xEventGroupSetBits+0xda>
     73a:	c1 2c       	mov	r12, r1
     73c:	d1 2c       	mov	r13, r1
     73e:	76 01       	movw	r14, r12
     740:	c0 94       	com	r12
     742:	d0 94       	com	r13
     744:	e0 94       	com	r14
     746:	f0 94       	com	r15
     748:	88 81       	ld	r24, Y
     74a:	99 81       	ldd	r25, Y+1	; 0x01
     74c:	aa 81       	ldd	r26, Y+2	; 0x02
     74e:	bb 81       	ldd	r27, Y+3	; 0x03
     750:	c8 22       	and	r12, r24
     752:	d9 22       	and	r13, r25
     754:	ea 22       	and	r14, r26
     756:	fb 22       	and	r15, r27
     758:	c8 82       	st	Y, r12
     75a:	d9 82       	std	Y+1, r13	; 0x01
     75c:	ea 82       	std	Y+2, r14	; 0x02
     75e:	fb 82       	std	Y+3, r15	; 0x03
     760:	0e 94 34 0c 	call	0x1868	; 0x1868 <xTaskResumeAll>
     764:	68 81       	ld	r22, Y
     766:	79 81       	ldd	r23, Y+1	; 0x01
     768:	8a 81       	ldd	r24, Y+2	; 0x02
     76a:	9b 81       	ldd	r25, Y+3	; 0x03
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	cf 90       	pop	r12
     77c:	bf 90       	pop	r11
     77e:	af 90       	pop	r10
     780:	7f 90       	pop	r7
     782:	6f 90       	pop	r6
     784:	5f 90       	pop	r5
     786:	4f 90       	pop	r4
     788:	08 95       	ret

0000078a <vEventGroupSetBitsCallback>:
     78a:	0e 94 33 03 	call	0x666	; 0x666 <xEventGroupSetBits>
     78e:	08 95       	ret

00000790 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     794:	89 01       	movw	r16, r18
     796:	9a 01       	movw	r18, r20
     798:	ab 01       	movw	r20, r22
     79a:	bc 01       	movw	r22, r24
     79c:	85 ec       	ldi	r24, 0xC5	; 197
     79e:	93 e0       	ldi	r25, 0x03	; 3
     7a0:	0e 94 95 11 	call	0x232a	; 0x232a <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     7b0:	0e 94 49 0b 	call	0x1692	; 0x1692 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     7b4:	20 91 68 20 	lds	r18, 0x2068	; 0x802068 <__data_end>
     7b8:	30 91 69 20 	lds	r19, 0x2069	; 0x802069 <__data_end+0x1>
     7bc:	c9 01       	movw	r24, r18
     7be:	8c 0f       	add	r24, r28
     7c0:	9d 1f       	adc	r25, r29
     7c2:	88 3b       	cpi	r24, 0xB8	; 184
     7c4:	4b e0       	ldi	r20, 0x0B	; 11
     7c6:	94 07       	cpc	r25, r20
     7c8:	58 f4       	brcc	.+22     	; 0x7e0 <pvPortMalloc+0x36>
     7ca:	28 17       	cp	r18, r24
     7cc:	39 07       	cpc	r19, r25
     7ce:	58 f4       	brcc	.+22     	; 0x7e6 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     7d0:	e9 01       	movw	r28, r18
     7d2:	c6 59       	subi	r28, 0x96	; 150
     7d4:	df 4d       	sbci	r29, 0xDF	; 223
			xNextFreeByte += xWantedSize;			
     7d6:	80 93 68 20 	sts	0x2068, r24	; 0x802068 <__data_end>
     7da:	90 93 69 20 	sts	0x2069, r25	; 0x802069 <__data_end+0x1>
     7de:	05 c0       	rjmp	.+10     	; 0x7ea <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     7e0:	c0 e0       	ldi	r28, 0x00	; 0
     7e2:	d0 e0       	ldi	r29, 0x00	; 0
     7e4:	02 c0       	rjmp	.+4      	; 0x7ea <pvPortMalloc+0x40>
     7e6:	c0 e0       	ldi	r28, 0x00	; 0
     7e8:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     7ea:	0e 94 34 0c 	call	0x1868	; 0x1868 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     7ee:	ce 01       	movw	r24, r28
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     7f6:	08 95       	ret

000007f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     7f8:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7fa:	03 96       	adiw	r24, 0x03	; 3
     7fc:	81 83       	std	Z+1, r24	; 0x01
     7fe:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     800:	4f ef       	ldi	r20, 0xFF	; 255
     802:	5f ef       	ldi	r21, 0xFF	; 255
     804:	ba 01       	movw	r22, r20
     806:	43 83       	std	Z+3, r20	; 0x03
     808:	54 83       	std	Z+4, r21	; 0x04
     80a:	65 83       	std	Z+5, r22	; 0x05
     80c:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     80e:	87 83       	std	Z+7, r24	; 0x07
     810:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     812:	81 87       	std	Z+9, r24	; 0x09
     814:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     816:	10 82       	st	Z, r1
     818:	08 95       	ret

0000081a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     81a:	fc 01       	movw	r30, r24
     81c:	12 86       	std	Z+10, r1	; 0x0a
     81e:	13 86       	std	Z+11, r1	; 0x0b
     820:	08 95       	ret

00000822 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	9c 01       	movw	r18, r24
     828:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     82a:	dc 01       	movw	r26, r24
     82c:	11 96       	adiw	r26, 0x01	; 1
     82e:	cd 91       	ld	r28, X+
     830:	dc 91       	ld	r29, X
     832:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     834:	c4 83       	std	Z+4, r28	; 0x04
     836:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     838:	8e 81       	ldd	r24, Y+6	; 0x06
     83a:	9f 81       	ldd	r25, Y+7	; 0x07
     83c:	86 83       	std	Z+6, r24	; 0x06
     83e:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     840:	8e 81       	ldd	r24, Y+6	; 0x06
     842:	9f 81       	ldd	r25, Y+7	; 0x07
     844:	dc 01       	movw	r26, r24
     846:	14 96       	adiw	r26, 0x04	; 4
     848:	6d 93       	st	X+, r22
     84a:	7c 93       	st	X, r23
     84c:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     84e:	6e 83       	std	Y+6, r22	; 0x06
     850:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     852:	22 87       	std	Z+10, r18	; 0x0a
     854:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     856:	f9 01       	movw	r30, r18
     858:	80 81       	ld	r24, Z
     85a:	8f 5f       	subi	r24, 0xFF	; 255
     85c:	80 83       	st	Z, r24
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     86e:	08 81       	ld	r16, Y
     870:	19 81       	ldd	r17, Y+1	; 0x01
     872:	2a 81       	ldd	r18, Y+2	; 0x02
     874:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     876:	0f 3f       	cpi	r16, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	14 07       	cpc	r17, r20
     87c:	24 07       	cpc	r18, r20
     87e:	34 07       	cpc	r19, r20
     880:	21 f4       	brne	.+8      	; 0x88a <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     882:	fc 01       	movw	r30, r24
     884:	a1 85       	ldd	r26, Z+9	; 0x09
     886:	b2 85       	ldd	r27, Z+10	; 0x0a
     888:	11 c0       	rjmp	.+34     	; 0x8ac <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     88a:	dc 01       	movw	r26, r24
     88c:	13 96       	adiw	r26, 0x03	; 3
     88e:	01 c0       	rjmp	.+2      	; 0x892 <vListInsert+0x2e>
     890:	df 01       	movw	r26, r30
     892:	14 96       	adiw	r26, 0x04	; 4
     894:	ed 91       	ld	r30, X+
     896:	fc 91       	ld	r31, X
     898:	15 97       	sbiw	r26, 0x05	; 5
     89a:	40 81       	ld	r20, Z
     89c:	51 81       	ldd	r21, Z+1	; 0x01
     89e:	62 81       	ldd	r22, Z+2	; 0x02
     8a0:	73 81       	ldd	r23, Z+3	; 0x03
     8a2:	04 17       	cp	r16, r20
     8a4:	15 07       	cpc	r17, r21
     8a6:	26 07       	cpc	r18, r22
     8a8:	37 07       	cpc	r19, r23
     8aa:	90 f7       	brcc	.-28     	; 0x890 <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     8ac:	14 96       	adiw	r26, 0x04	; 4
     8ae:	ed 91       	ld	r30, X+
     8b0:	fc 91       	ld	r31, X
     8b2:	15 97       	sbiw	r26, 0x05	; 5
     8b4:	ec 83       	std	Y+4, r30	; 0x04
     8b6:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     8b8:	c6 83       	std	Z+6, r28	; 0x06
     8ba:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     8bc:	ae 83       	std	Y+6, r26	; 0x06
     8be:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     8c0:	14 96       	adiw	r26, 0x04	; 4
     8c2:	cd 93       	st	X+, r28
     8c4:	dc 93       	st	X, r29
     8c6:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     8c8:	8a 87       	std	Y+10, r24	; 0x0a
     8ca:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     8cc:	fc 01       	movw	r30, r24
     8ce:	20 81       	ld	r18, Z
     8d0:	2f 5f       	subi	r18, 0xFF	; 255
     8d2:	20 83       	st	Z, r18
}
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	08 95       	ret

000008de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     8e4:	a2 85       	ldd	r26, Z+10	; 0x0a
     8e6:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     8e8:	c4 81       	ldd	r28, Z+4	; 0x04
     8ea:	d5 81       	ldd	r29, Z+5	; 0x05
     8ec:	86 81       	ldd	r24, Z+6	; 0x06
     8ee:	97 81       	ldd	r25, Z+7	; 0x07
     8f0:	8e 83       	std	Y+6, r24	; 0x06
     8f2:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     8f4:	c6 81       	ldd	r28, Z+6	; 0x06
     8f6:	d7 81       	ldd	r29, Z+7	; 0x07
     8f8:	84 81       	ldd	r24, Z+4	; 0x04
     8fa:	95 81       	ldd	r25, Z+5	; 0x05
     8fc:	8c 83       	std	Y+4, r24	; 0x04
     8fe:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     900:	11 96       	adiw	r26, 0x01	; 1
     902:	8d 91       	ld	r24, X+
     904:	9c 91       	ld	r25, X
     906:	12 97       	sbiw	r26, 0x02	; 2
     908:	e8 17       	cp	r30, r24
     90a:	f9 07       	cpc	r31, r25
     90c:	31 f4       	brne	.+12     	; 0x91a <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     90e:	86 81       	ldd	r24, Z+6	; 0x06
     910:	97 81       	ldd	r25, Z+7	; 0x07
     912:	11 96       	adiw	r26, 0x01	; 1
     914:	8d 93       	st	X+, r24
     916:	9c 93       	st	X, r25
     918:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     91a:	12 86       	std	Z+10, r1	; 0x0a
     91c:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     91e:	8c 91       	ld	r24, X
     920:	81 50       	subi	r24, 0x01	; 1
     922:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     924:	8c 91       	ld	r24, X
}
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <_portSetInterruptMaskFromIsr>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     92c:	e0 ea       	ldi	r30, 0xA0	; 160
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	82 81       	ldd	r24, Z+2	; 0x02
     932:	92 81       	ldd	r25, Z+2	; 0x02
     934:	98 7f       	andi	r25, 0xF8	; 248
     936:	92 83       	std	Z+2, r25	; 0x02
     938:	08 95       	ret

0000093a <pxPortInitialiseStack>:
     93a:	cf 92       	push	r12
     93c:	df 92       	push	r13
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	31 e1       	ldi	r19, 0x11	; 17
     944:	fc 01       	movw	r30, r24
     946:	30 83       	st	Z, r19
     948:	31 97       	sbiw	r30, 0x01	; 1
     94a:	22 e2       	ldi	r18, 0x22	; 34
     94c:	20 83       	st	Z, r18
     94e:	31 97       	sbiw	r30, 0x01	; 1
     950:	a3 e3       	ldi	r26, 0x33	; 51
     952:	a0 83       	st	Z, r26
     954:	6b 01       	movw	r12, r22
     956:	e1 2c       	mov	r14, r1
     958:	f1 2c       	mov	r15, r1
     95a:	31 97       	sbiw	r30, 0x01	; 1
     95c:	60 83       	st	Z, r22
     95e:	31 97       	sbiw	r30, 0x01	; 1
     960:	d0 82       	st	Z, r13
     962:	31 97       	sbiw	r30, 0x01	; 1
     964:	e0 82       	st	Z, r14
     966:	31 97       	sbiw	r30, 0x01	; 1
     968:	61 e3       	ldi	r22, 0x31	; 49
     96a:	60 83       	st	Z, r22
     96c:	31 97       	sbiw	r30, 0x01	; 1
     96e:	60 e8       	ldi	r22, 0x80	; 128
     970:	60 83       	st	Z, r22
     972:	31 97       	sbiw	r30, 0x01	; 1
     974:	67 e8       	ldi	r22, 0x87	; 135
     976:	60 83       	st	Z, r22
     978:	31 97       	sbiw	r30, 0x01	; 1
     97a:	10 82       	st	Z, r1
     97c:	31 97       	sbiw	r30, 0x01	; 1
     97e:	10 82       	st	Z, r1
     980:	31 97       	sbiw	r30, 0x01	; 1
     982:	62 e0       	ldi	r22, 0x02	; 2
     984:	60 83       	st	Z, r22
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	63 e0       	ldi	r22, 0x03	; 3
     98a:	60 83       	st	Z, r22
     98c:	31 97       	sbiw	r30, 0x01	; 1
     98e:	64 e0       	ldi	r22, 0x04	; 4
     990:	60 83       	st	Z, r22
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	65 e0       	ldi	r22, 0x05	; 5
     996:	60 83       	st	Z, r22
     998:	31 97       	sbiw	r30, 0x01	; 1
     99a:	66 e0       	ldi	r22, 0x06	; 6
     99c:	60 83       	st	Z, r22
     99e:	31 97       	sbiw	r30, 0x01	; 1
     9a0:	67 e0       	ldi	r22, 0x07	; 7
     9a2:	60 83       	st	Z, r22
     9a4:	31 97       	sbiw	r30, 0x01	; 1
     9a6:	68 e0       	ldi	r22, 0x08	; 8
     9a8:	60 83       	st	Z, r22
     9aa:	31 97       	sbiw	r30, 0x01	; 1
     9ac:	69 e0       	ldi	r22, 0x09	; 9
     9ae:	60 83       	st	Z, r22
     9b0:	31 97       	sbiw	r30, 0x01	; 1
     9b2:	60 e1       	ldi	r22, 0x10	; 16
     9b4:	60 83       	st	Z, r22
     9b6:	31 97       	sbiw	r30, 0x01	; 1
     9b8:	30 83       	st	Z, r19
     9ba:	31 97       	sbiw	r30, 0x01	; 1
     9bc:	32 e1       	ldi	r19, 0x12	; 18
     9be:	30 83       	st	Z, r19
     9c0:	31 97       	sbiw	r30, 0x01	; 1
     9c2:	33 e1       	ldi	r19, 0x13	; 19
     9c4:	30 83       	st	Z, r19
     9c6:	31 97       	sbiw	r30, 0x01	; 1
     9c8:	34 e1       	ldi	r19, 0x14	; 20
     9ca:	30 83       	st	Z, r19
     9cc:	31 97       	sbiw	r30, 0x01	; 1
     9ce:	35 e1       	ldi	r19, 0x15	; 21
     9d0:	30 83       	st	Z, r19
     9d2:	31 97       	sbiw	r30, 0x01	; 1
     9d4:	36 e1       	ldi	r19, 0x16	; 22
     9d6:	30 83       	st	Z, r19
     9d8:	31 97       	sbiw	r30, 0x01	; 1
     9da:	37 e1       	ldi	r19, 0x17	; 23
     9dc:	30 83       	st	Z, r19
     9de:	31 97       	sbiw	r30, 0x01	; 1
     9e0:	38 e1       	ldi	r19, 0x18	; 24
     9e2:	30 83       	st	Z, r19
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	39 e1       	ldi	r19, 0x19	; 25
     9e8:	30 83       	st	Z, r19
     9ea:	31 97       	sbiw	r30, 0x01	; 1
     9ec:	30 e2       	ldi	r19, 0x20	; 32
     9ee:	30 83       	st	Z, r19
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	31 e2       	ldi	r19, 0x21	; 33
     9f4:	30 83       	st	Z, r19
     9f6:	31 97       	sbiw	r30, 0x01	; 1
     9f8:	20 83       	st	Z, r18
     9fa:	31 97       	sbiw	r30, 0x01	; 1
     9fc:	23 e2       	ldi	r18, 0x23	; 35
     9fe:	20 83       	st	Z, r18
     a00:	6a 01       	movw	r12, r20
     a02:	31 97       	sbiw	r30, 0x01	; 1
     a04:	40 83       	st	Z, r20
     a06:	31 97       	sbiw	r30, 0x01	; 1
     a08:	d0 82       	st	Z, r13
     a0a:	31 97       	sbiw	r30, 0x01	; 1
     a0c:	26 e2       	ldi	r18, 0x26	; 38
     a0e:	20 83       	st	Z, r18
     a10:	31 97       	sbiw	r30, 0x01	; 1
     a12:	27 e2       	ldi	r18, 0x27	; 39
     a14:	20 83       	st	Z, r18
     a16:	31 97       	sbiw	r30, 0x01	; 1
     a18:	28 e2       	ldi	r18, 0x28	; 40
     a1a:	20 83       	st	Z, r18
     a1c:	31 97       	sbiw	r30, 0x01	; 1
     a1e:	29 e2       	ldi	r18, 0x29	; 41
     a20:	20 83       	st	Z, r18
     a22:	31 97       	sbiw	r30, 0x01	; 1
     a24:	20 e3       	ldi	r18, 0x30	; 48
     a26:	20 83       	st	Z, r18
     a28:	88 97       	sbiw	r24, 0x28	; 40
     a2a:	ff 90       	pop	r15
     a2c:	ef 90       	pop	r14
     a2e:	df 90       	pop	r13
     a30:	cf 90       	pop	r12
     a32:	08 95       	ret

00000a34 <xPortStartScheduler>:
     a34:	83 ef       	ldi	r24, 0xF3	; 243
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     a3c:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     a40:	65 e0       	ldi	r22, 0x05	; 5
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	98 e0       	ldi	r25, 0x08	; 8
     a46:	0e 94 1c 02 	call	0x438	; 0x438 <TC0_ConfigClockSource>
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	98 e0       	ldi	r25, 0x08	; 8
     a50:	0e 94 28 02 	call	0x450	; 0x450 <TC0_SetOverflowIntLevel>
     a54:	a0 91 90 2c 	lds	r26, 0x2C90	; 0x802c90 <pxCurrentTCB>
     a58:	b0 91 91 2c 	lds	r27, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
     a5c:	0d 90       	ld	r0, X+
     a5e:	0d be       	out	0x3d, r0	; 61
     a60:	0d 90       	ld	r0, X+
     a62:	0e be       	out	0x3e, r0	; 62
     a64:	ef 91       	pop	r30
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	bf 91       	pop	r27
     a6c:	af 91       	pop	r26
     a6e:	9f 91       	pop	r25
     a70:	8f 91       	pop	r24
     a72:	7f 91       	pop	r23
     a74:	6f 91       	pop	r22
     a76:	5f 91       	pop	r21
     a78:	4f 91       	pop	r20
     a7a:	3f 91       	pop	r19
     a7c:	2f 91       	pop	r18
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	ff 90       	pop	r15
     a84:	ef 90       	pop	r14
     a86:	df 90       	pop	r13
     a88:	cf 90       	pop	r12
     a8a:	bf 90       	pop	r11
     a8c:	af 90       	pop	r10
     a8e:	9f 90       	pop	r9
     a90:	8f 90       	pop	r8
     a92:	7f 90       	pop	r7
     a94:	6f 90       	pop	r6
     a96:	5f 90       	pop	r5
     a98:	4f 90       	pop	r4
     a9a:	3f 90       	pop	r3
     a9c:	2f 90       	pop	r2
     a9e:	1f 90       	pop	r1
     aa0:	0f 90       	pop	r0
     aa2:	ff 91       	pop	r31
     aa4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     aa8:	ff 91       	pop	r31
     aaa:	ff bf       	out	0x3f, r31	; 63
     aac:	ff 91       	pop	r31
     aae:	08 95       	ret
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	08 95       	ret

00000ab4 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     ab4:	ff 93       	push	r31
     ab6:	ff b7       	in	r31, 0x3f	; 63
     ab8:	ff 93       	push	r31
     aba:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     abe:	ff 93       	push	r31
     ac0:	f8 7f       	andi	r31, 0xF8	; 248
     ac2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ac6:	0f 92       	push	r0
     ac8:	1f 92       	push	r1
     aca:	11 24       	eor	r1, r1
     acc:	2f 92       	push	r2
     ace:	3f 92       	push	r3
     ad0:	4f 92       	push	r4
     ad2:	5f 92       	push	r5
     ad4:	6f 92       	push	r6
     ad6:	7f 92       	push	r7
     ad8:	8f 92       	push	r8
     ada:	9f 92       	push	r9
     adc:	af 92       	push	r10
     ade:	bf 92       	push	r11
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	2f 93       	push	r18
     aee:	3f 93       	push	r19
     af0:	4f 93       	push	r20
     af2:	5f 93       	push	r21
     af4:	6f 93       	push	r22
     af6:	7f 93       	push	r23
     af8:	8f 93       	push	r24
     afa:	9f 93       	push	r25
     afc:	af 93       	push	r26
     afe:	bf 93       	push	r27
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	ef 93       	push	r30
     b06:	a0 91 90 2c 	lds	r26, 0x2C90	; 0x802c90 <pxCurrentTCB>
     b0a:	b0 91 91 2c 	lds	r27, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
     b0e:	0d b6       	in	r0, 0x3d	; 61
     b10:	0d 92       	st	X+, r0
     b12:	0e b6       	in	r0, 0x3e	; 62
     b14:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     b16:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     b1a:	a0 91 90 2c 	lds	r26, 0x2C90	; 0x802c90 <pxCurrentTCB>
     b1e:	b0 91 91 2c 	lds	r27, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
     b22:	0d 90       	ld	r0, X+
     b24:	0d be       	out	0x3d, r0	; 61
     b26:	0d 90       	ld	r0, X+
     b28:	0e be       	out	0x3e, r0	; 62
     b2a:	ef 91       	pop	r30
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	bf 91       	pop	r27
     b32:	af 91       	pop	r26
     b34:	9f 91       	pop	r25
     b36:	8f 91       	pop	r24
     b38:	7f 91       	pop	r23
     b3a:	6f 91       	pop	r22
     b3c:	5f 91       	pop	r21
     b3e:	4f 91       	pop	r20
     b40:	3f 91       	pop	r19
     b42:	2f 91       	pop	r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	cf 90       	pop	r12
     b50:	bf 90       	pop	r11
     b52:	af 90       	pop	r10
     b54:	9f 90       	pop	r9
     b56:	8f 90       	pop	r8
     b58:	7f 90       	pop	r7
     b5a:	6f 90       	pop	r6
     b5c:	5f 90       	pop	r5
     b5e:	4f 90       	pop	r4
     b60:	3f 90       	pop	r3
     b62:	2f 90       	pop	r2
     b64:	1f 90       	pop	r1
     b66:	0f 90       	pop	r0
     b68:	ff 91       	pop	r31
     b6a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b6e:	ff 91       	pop	r31
     b70:	ff bf       	out	0x3f, r31	; 63
     b72:	ff 91       	pop	r31
	asm volatile ( "ret" );
     b74:	08 95       	ret

00000b76 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     b76:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     b78:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <intTaskSwitchPending>
     b7c:	89 2b       	or	r24, r25
     b7e:	80 93 e4 2c 	sts	0x2CE4, r24	; 0x802ce4 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     b82:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     b86:	91 30       	cpi	r25, 0x01	; 1
     b88:	41 f0       	breq	.+16     	; 0xb9a <portTaskSwitchContext+0x24>
     b8a:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     b8e:	92 30       	cpi	r25, 0x02	; 2
     b90:	21 f0       	breq	.+8      	; 0xb9a <portTaskSwitchContext+0x24>
     b92:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     b96:	94 30       	cpi	r25, 0x04	; 4
     b98:	59 f4       	brne	.+22     	; 0xbb0 <portTaskSwitchContext+0x3a>
     b9a:	88 23       	and	r24, r24
     b9c:	49 f0       	breq	.+18     	; 0xbb0 <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     b9e:	0e 94 96 04 	call	0x92c	; 0x92c <_portSetInterruptMaskFromIsr>
     ba2:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     ba4:	10 92 e4 2c 	sts	0x2CE4, r1	; 0x802ce4 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     ba8:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     bac:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		}                                          					
	}
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     bb4:	ff 93       	push	r31
     bb6:	ff b7       	in	r31, 0x3f	; 63
     bb8:	ff 93       	push	r31
     bba:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     bbe:	ff 93       	push	r31
     bc0:	f8 7f       	andi	r31, 0xF8	; 248
     bc2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     bc6:	0f 92       	push	r0
     bc8:	1f 92       	push	r1
     bca:	11 24       	eor	r1, r1
     bcc:	2f 92       	push	r2
     bce:	3f 92       	push	r3
     bd0:	4f 92       	push	r4
     bd2:	5f 92       	push	r5
     bd4:	6f 92       	push	r6
     bd6:	7f 92       	push	r7
     bd8:	8f 92       	push	r8
     bda:	9f 92       	push	r9
     bdc:	af 92       	push	r10
     bde:	bf 92       	push	r11
     be0:	cf 92       	push	r12
     be2:	df 92       	push	r13
     be4:	ef 92       	push	r14
     be6:	ff 92       	push	r15
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	2f 93       	push	r18
     bee:	3f 93       	push	r19
     bf0:	4f 93       	push	r20
     bf2:	5f 93       	push	r21
     bf4:	6f 93       	push	r22
     bf6:	7f 93       	push	r23
     bf8:	8f 93       	push	r24
     bfa:	9f 93       	push	r25
     bfc:	af 93       	push	r26
     bfe:	bf 93       	push	r27
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	ef 93       	push	r30
     c06:	a0 91 90 2c 	lds	r26, 0x2C90	; 0x802c90 <pxCurrentTCB>
     c0a:	b0 91 91 2c 	lds	r27, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
     c0e:	0d b6       	in	r0, 0x3d	; 61
     c10:	0d 92       	st	X+, r0
     c12:	0e b6       	in	r0, 0x3e	; 62
     c14:	0d 92       	st	X+, r0
	//
	static void portTaskIncrementTick( void )
	{
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
     c16:	0e 94 96 04 	call	0x92c	; 0x92c <_portSetInterruptMaskFromIsr>
     c1a:	c8 2f       	mov	r28, r24
		xTaskIncrementTick();
     c1c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
     c20:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
		portTaskIncrementTick();
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	0e 94 bb 05 	call	0xb76	; 0xb76 <portTaskSwitchContext>
     c2a:	a0 91 90 2c 	lds	r26, 0x2C90	; 0x802c90 <pxCurrentTCB>
     c2e:	b0 91 91 2c 	lds	r27, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
     c32:	0d 90       	ld	r0, X+
     c34:	0d be       	out	0x3d, r0	; 61
     c36:	0d 90       	ld	r0, X+
     c38:	0e be       	out	0x3e, r0	; 62
     c3a:	ef 91       	pop	r30
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	bf 91       	pop	r27
     c42:	af 91       	pop	r26
     c44:	9f 91       	pop	r25
     c46:	8f 91       	pop	r24
     c48:	7f 91       	pop	r23
     c4a:	6f 91       	pop	r22
     c4c:	5f 91       	pop	r21
     c4e:	4f 91       	pop	r20
     c50:	3f 91       	pop	r19
     c52:	2f 91       	pop	r18
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	df 90       	pop	r13
     c5e:	cf 90       	pop	r12
     c60:	bf 90       	pop	r11
     c62:	af 90       	pop	r10
     c64:	9f 90       	pop	r9
     c66:	8f 90       	pop	r8
     c68:	7f 90       	pop	r7
     c6a:	6f 90       	pop	r6
     c6c:	5f 90       	pop	r5
     c6e:	4f 90       	pop	r4
     c70:	3f 90       	pop	r3
     c72:	2f 90       	pop	r2
     c74:	1f 90       	pop	r1
     c76:	0f 90       	pop	r0
     c78:	ff 91       	pop	r31
     c7a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c7e:	ff 91       	pop	r31
     c80:	ff bf       	out	0x3f, r31	; 63
     c82:	ff 91       	pop	r31
     c84:	18 95       	reti

00000c86 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     c86:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c8a:	ff 93       	push	r31
     c8c:	f8 7f       	andi	r31, 0xF8	; 248
     c8e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c92:	fc 01       	movw	r30, r24
     c94:	96 8d       	ldd	r25, Z+30	; 0x1e
     c96:	ff 91       	pop	r31
     c98:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	91 11       	cpse	r25, r1
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	08 95       	ret

00000ca4 <prvIsQueueFull>:
     ca4:	dc 01       	movw	r26, r24
     ca6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     caa:	ff 93       	push	r31
     cac:	f8 7f       	andi	r31, 0xF8	; 248
     cae:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     cb2:	5e 96       	adiw	r26, 0x1e	; 30
     cb4:	9c 91       	ld	r25, X
     cb6:	5e 97       	sbiw	r26, 0x1e	; 30
     cb8:	ff 91       	pop	r31
     cba:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	5f 96       	adiw	r26, 0x1f	; 31
     cc2:	2c 91       	ld	r18, X
     cc4:	29 13       	cpse	r18, r25
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	08 95       	ret

00000cca <prvCopyDataToQueue>:
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ec 01       	movw	r28, r24
     cd4:	04 2f       	mov	r16, r20
     cd6:	1e 8d       	ldd	r17, Y+30	; 0x1e
     cd8:	48 a1       	ldd	r20, Y+32	; 0x20
     cda:	44 23       	and	r20, r20
     cdc:	b9 f1       	breq	.+110    	; 0xd4c <prvCopyDataToQueue+0x82>
     cde:	01 11       	cpse	r16, r1
     ce0:	16 c0       	rjmp	.+44     	; 0xd0e <prvCopyDataToQueue+0x44>
     ce2:	50 e0       	ldi	r21, 0x00	; 0
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	9d 81       	ldd	r25, Y+5	; 0x05
     ce8:	0e 94 82 20 	call	0x4104	; 0x4104 <memcpy>
     cec:	28 a1       	ldd	r18, Y+32	; 0x20
     cee:	8c 81       	ldd	r24, Y+4	; 0x04
     cf0:	9d 81       	ldd	r25, Y+5	; 0x05
     cf2:	82 0f       	add	r24, r18
     cf4:	91 1d       	adc	r25, r1
     cf6:	8c 83       	std	Y+4, r24	; 0x04
     cf8:	9d 83       	std	Y+5, r25	; 0x05
     cfa:	2a 81       	ldd	r18, Y+2	; 0x02
     cfc:	3b 81       	ldd	r19, Y+3	; 0x03
     cfe:	82 17       	cp	r24, r18
     d00:	93 07       	cpc	r25, r19
     d02:	20 f1       	brcs	.+72     	; 0xd4c <prvCopyDataToQueue+0x82>
     d04:	88 81       	ld	r24, Y
     d06:	99 81       	ldd	r25, Y+1	; 0x01
     d08:	8c 83       	std	Y+4, r24	; 0x04
     d0a:	9d 83       	std	Y+5, r25	; 0x05
     d0c:	1f c0       	rjmp	.+62     	; 0xd4c <prvCopyDataToQueue+0x82>
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	8e 81       	ldd	r24, Y+6	; 0x06
     d12:	9f 81       	ldd	r25, Y+7	; 0x07
     d14:	0e 94 82 20 	call	0x4104	; 0x4104 <memcpy>
     d18:	88 a1       	ldd	r24, Y+32	; 0x20
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	91 95       	neg	r25
     d1e:	81 95       	neg	r24
     d20:	91 09       	sbc	r25, r1
     d22:	2e 81       	ldd	r18, Y+6	; 0x06
     d24:	3f 81       	ldd	r19, Y+7	; 0x07
     d26:	28 0f       	add	r18, r24
     d28:	39 1f       	adc	r19, r25
     d2a:	2e 83       	std	Y+6, r18	; 0x06
     d2c:	3f 83       	std	Y+7, r19	; 0x07
     d2e:	48 81       	ld	r20, Y
     d30:	59 81       	ldd	r21, Y+1	; 0x01
     d32:	24 17       	cp	r18, r20
     d34:	35 07       	cpc	r19, r21
     d36:	30 f4       	brcc	.+12     	; 0xd44 <prvCopyDataToQueue+0x7a>
     d38:	2a 81       	ldd	r18, Y+2	; 0x02
     d3a:	3b 81       	ldd	r19, Y+3	; 0x03
     d3c:	82 0f       	add	r24, r18
     d3e:	93 1f       	adc	r25, r19
     d40:	8e 83       	std	Y+6, r24	; 0x06
     d42:	9f 83       	std	Y+7, r25	; 0x07
     d44:	02 30       	cpi	r16, 0x02	; 2
     d46:	11 f4       	brne	.+4      	; 0xd4c <prvCopyDataToQueue+0x82>
     d48:	11 11       	cpse	r17, r1
     d4a:	11 50       	subi	r17, 0x01	; 1
     d4c:	1f 5f       	subi	r17, 0xFF	; 255
     d4e:	1e 8f       	std	Y+30, r17	; 0x1e
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	08 95       	ret

00000d5c <prvCopyDataFromQueue>:
     d5c:	fc 01       	movw	r30, r24
     d5e:	40 a1       	ldd	r20, Z+32	; 0x20
     d60:	44 23       	and	r20, r20
     d62:	a9 f0       	breq	.+42     	; 0xd8e <prvCopyDataFromQueue+0x32>
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	26 81       	ldd	r18, Z+6	; 0x06
     d68:	37 81       	ldd	r19, Z+7	; 0x07
     d6a:	24 0f       	add	r18, r20
     d6c:	35 1f       	adc	r19, r21
     d6e:	26 83       	std	Z+6, r18	; 0x06
     d70:	37 83       	std	Z+7, r19	; 0x07
     d72:	82 81       	ldd	r24, Z+2	; 0x02
     d74:	93 81       	ldd	r25, Z+3	; 0x03
     d76:	28 17       	cp	r18, r24
     d78:	39 07       	cpc	r19, r25
     d7a:	20 f0       	brcs	.+8      	; 0xd84 <prvCopyDataFromQueue+0x28>
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	86 83       	std	Z+6, r24	; 0x06
     d82:	97 83       	std	Z+7, r25	; 0x07
     d84:	cb 01       	movw	r24, r22
     d86:	66 81       	ldd	r22, Z+6	; 0x06
     d88:	77 81       	ldd	r23, Z+7	; 0x07
     d8a:	0e 94 82 20 	call	0x4104	; 0x4104 <memcpy>
     d8e:	08 95       	ret

00000d90 <prvUnlockQueue>:
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	8c 01       	movw	r16, r24
     d9c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     da0:	ff 93       	push	r31
     da2:	f8 7f       	andi	r31, 0xF8	; 248
     da4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     da8:	fc 01       	movw	r30, r24
     daa:	c2 a1       	ldd	r28, Z+34	; 0x22
     dac:	1c 16       	cp	r1, r28
     dae:	ac f4       	brge	.+42     	; 0xdda <prvUnlockQueue+0x4a>
     db0:	83 89       	ldd	r24, Z+19	; 0x13
     db2:	81 11       	cpse	r24, r1
     db4:	06 c0       	rjmp	.+12     	; 0xdc2 <prvUnlockQueue+0x32>
     db6:	11 c0       	rjmp	.+34     	; 0xdda <prvUnlockQueue+0x4a>
     db8:	f8 01       	movw	r30, r16
     dba:	83 89       	ldd	r24, Z+19	; 0x13
     dbc:	81 11       	cpse	r24, r1
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <prvUnlockQueue+0x3a>
     dc0:	0c c0       	rjmp	.+24     	; 0xdda <prvUnlockQueue+0x4a>
     dc2:	78 01       	movw	r14, r16
     dc4:	f3 e1       	ldi	r31, 0x13	; 19
     dc6:	ef 0e       	add	r14, r31
     dc8:	f1 1c       	adc	r15, r1
     dca:	c7 01       	movw	r24, r14
     dcc:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <xTaskRemoveFromEventList>
     dd0:	81 11       	cpse	r24, r1
     dd2:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <vTaskMissedYield>
     dd6:	c1 50       	subi	r28, 0x01	; 1
     dd8:	79 f7       	brne	.-34     	; 0xdb8 <prvUnlockQueue+0x28>
     dda:	8f ef       	ldi	r24, 0xFF	; 255
     ddc:	f8 01       	movw	r30, r16
     dde:	82 a3       	std	Z+34, r24	; 0x22
     de0:	ff 91       	pop	r31
     de2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     de6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     dea:	ff 93       	push	r31
     dec:	f8 7f       	andi	r31, 0xF8	; 248
     dee:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     df2:	f8 01       	movw	r30, r16
     df4:	c1 a1       	ldd	r28, Z+33	; 0x21
     df6:	1c 16       	cp	r1, r28
     df8:	ac f4       	brge	.+42     	; 0xe24 <prvUnlockQueue+0x94>
     dfa:	80 85       	ldd	r24, Z+8	; 0x08
     dfc:	81 11       	cpse	r24, r1
     dfe:	06 c0       	rjmp	.+12     	; 0xe0c <prvUnlockQueue+0x7c>
     e00:	11 c0       	rjmp	.+34     	; 0xe24 <prvUnlockQueue+0x94>
     e02:	f8 01       	movw	r30, r16
     e04:	80 85       	ldd	r24, Z+8	; 0x08
     e06:	81 11       	cpse	r24, r1
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <prvUnlockQueue+0x84>
     e0a:	0c c0       	rjmp	.+24     	; 0xe24 <prvUnlockQueue+0x94>
     e0c:	78 01       	movw	r14, r16
     e0e:	f8 e0       	ldi	r31, 0x08	; 8
     e10:	ef 0e       	add	r14, r31
     e12:	f1 1c       	adc	r15, r1
     e14:	c7 01       	movw	r24, r14
     e16:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <xTaskRemoveFromEventList>
     e1a:	81 11       	cpse	r24, r1
     e1c:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <vTaskMissedYield>
     e20:	c1 50       	subi	r28, 0x01	; 1
     e22:	79 f7       	brne	.-34     	; 0xe02 <prvUnlockQueue+0x72>
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	f8 01       	movw	r30, r16
     e28:	81 a3       	std	Z+33, r24	; 0x21
     e2a:	ff 91       	pop	r31
     e2c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	08 95       	ret

00000e3c <xQueueGenericReset>:
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	ec 01       	movw	r28, r24
     e42:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e46:	ff 93       	push	r31
     e48:	f8 7f       	andi	r31, 0xF8	; 248
     e4a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e4e:	48 81       	ld	r20, Y
     e50:	59 81       	ldd	r21, Y+1	; 0x01
     e52:	28 a1       	ldd	r18, Y+32	; 0x20
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	7f 8d       	ldd	r23, Y+31	; 0x1f
     e58:	72 9f       	mul	r23, r18
     e5a:	c0 01       	movw	r24, r0
     e5c:	73 9f       	mul	r23, r19
     e5e:	90 0d       	add	r25, r0
     e60:	11 24       	eor	r1, r1
     e62:	fa 01       	movw	r30, r20
     e64:	e8 0f       	add	r30, r24
     e66:	f9 1f       	adc	r31, r25
     e68:	ea 83       	std	Y+2, r30	; 0x02
     e6a:	fb 83       	std	Y+3, r31	; 0x03
     e6c:	1e 8e       	std	Y+30, r1	; 0x1e
     e6e:	4c 83       	std	Y+4, r20	; 0x04
     e70:	5d 83       	std	Y+5, r21	; 0x05
     e72:	82 1b       	sub	r24, r18
     e74:	93 0b       	sbc	r25, r19
     e76:	84 0f       	add	r24, r20
     e78:	95 1f       	adc	r25, r21
     e7a:	8e 83       	std	Y+6, r24	; 0x06
     e7c:	9f 83       	std	Y+7, r25	; 0x07
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	89 a3       	std	Y+33, r24	; 0x21
     e82:	8a a3       	std	Y+34, r24	; 0x22
     e84:	61 11       	cpse	r22, r1
     e86:	0c c0       	rjmp	.+24     	; 0xea0 <xQueueGenericReset+0x64>
     e88:	88 85       	ldd	r24, Y+8	; 0x08
     e8a:	88 23       	and	r24, r24
     e8c:	89 f0       	breq	.+34     	; 0xeb0 <xQueueGenericReset+0x74>
     e8e:	ce 01       	movw	r24, r28
     e90:	08 96       	adiw	r24, 0x08	; 8
     e92:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <xTaskRemoveFromEventList>
     e96:	88 23       	and	r24, r24
     e98:	59 f0       	breq	.+22     	; 0xeb0 <xQueueGenericReset+0x74>
     e9a:	0e 94 5a 05 	call	0xab4	; 0xab4 <vPortYield>
     e9e:	08 c0       	rjmp	.+16     	; 0xeb0 <xQueueGenericReset+0x74>
     ea0:	ce 01       	movw	r24, r28
     ea2:	08 96       	adiw	r24, 0x08	; 8
     ea4:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <vListInitialise>
     ea8:	ce 01       	movw	r24, r28
     eaa:	43 96       	adiw	r24, 0x13	; 19
     eac:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <vListInitialise>
     eb0:	ff 91       	pop	r31
     eb2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	08 95       	ret

00000ebe <xQueueGenericCreate>:
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	08 2f       	mov	r16, r24
     eca:	16 2f       	mov	r17, r22
     ecc:	f4 2e       	mov	r15, r20
     ece:	66 23       	and	r22, r22
     ed0:	c9 f0       	breq	.+50     	; 0xf04 <xQueueGenericCreate+0x46>
     ed2:	86 9f       	mul	r24, r22
     ed4:	c0 01       	movw	r24, r0
     ed6:	11 24       	eor	r1, r1
     ed8:	85 96       	adiw	r24, 0x25	; 37
     eda:	0e 94 d5 03 	call	0x7aa	; 0x7aa <pvPortMalloc>
     ede:	ec 01       	movw	r28, r24
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	49 f4       	brne	.+18     	; 0xef6 <xQueueGenericCreate+0x38>
     ee4:	16 c0       	rjmp	.+44     	; 0xf12 <xQueueGenericCreate+0x54>
     ee6:	0f 8f       	std	Y+31, r16	; 0x1f
     ee8:	18 a3       	std	Y+32, r17	; 0x20
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	ce 01       	movw	r24, r28
     eee:	0e 94 1e 07 	call	0xe3c	; 0xe3c <xQueueGenericReset>
     ef2:	fc a2       	std	Y+36, r15	; 0x24
     ef4:	0e c0       	rjmp	.+28     	; 0xf12 <xQueueGenericCreate+0x54>
     ef6:	85 96       	adiw	r24, 0x25	; 37
     ef8:	88 83       	st	Y, r24
     efa:	99 83       	std	Y+1, r25	; 0x01
     efc:	f4 cf       	rjmp	.-24     	; 0xee6 <xQueueGenericCreate+0x28>
     efe:	c8 83       	st	Y, r28
     f00:	d9 83       	std	Y+1, r29	; 0x01
     f02:	f1 cf       	rjmp	.-30     	; 0xee6 <xQueueGenericCreate+0x28>
     f04:	85 e2       	ldi	r24, 0x25	; 37
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 d5 03 	call	0x7aa	; 0x7aa <pvPortMalloc>
     f0c:	ec 01       	movw	r28, r24
     f0e:	89 2b       	or	r24, r25
     f10:	b1 f7       	brne	.-20     	; 0xefe <xQueueGenericCreate+0x40>
     f12:	ce 01       	movw	r24, r28
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	08 95       	ret

00000f20 <xQueueGenericSend>:
     f20:	af 92       	push	r10
     f22:	bf 92       	push	r11
     f24:	cf 92       	push	r12
     f26:	df 92       	push	r13
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	29 97       	sbiw	r28, 0x09	; 9
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	7c 01       	movw	r14, r24
     f40:	5b 01       	movw	r10, r22
     f42:	2e 83       	std	Y+6, r18	; 0x06
     f44:	3f 83       	std	Y+7, r19	; 0x07
     f46:	48 87       	std	Y+8, r20	; 0x08
     f48:	59 87       	std	Y+9, r21	; 0x09
     f4a:	10 e0       	ldi	r17, 0x00	; 0
     f4c:	6c 01       	movw	r12, r24
     f4e:	88 e0       	ldi	r24, 0x08	; 8
     f50:	c8 0e       	add	r12, r24
     f52:	d1 1c       	adc	r13, r1
     f54:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f58:	ff 93       	push	r31
     f5a:	f8 7f       	andi	r31, 0xF8	; 248
     f5c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f60:	f7 01       	movw	r30, r14
     f62:	96 8d       	ldd	r25, Z+30	; 0x1e
     f64:	87 8d       	ldd	r24, Z+31	; 0x1f
     f66:	98 17       	cp	r25, r24
     f68:	10 f0       	brcs	.+4      	; 0xf6e <xQueueGenericSend+0x4e>
     f6a:	02 30       	cpi	r16, 0x02	; 2
     f6c:	d1 f4       	brne	.+52     	; 0xfa2 <xQueueGenericSend+0x82>
     f6e:	40 2f       	mov	r20, r16
     f70:	b5 01       	movw	r22, r10
     f72:	c7 01       	movw	r24, r14
     f74:	0e 94 65 06 	call	0xcca	; 0xcca <prvCopyDataToQueue>
     f78:	f7 01       	movw	r30, r14
     f7a:	93 89       	ldd	r25, Z+19	; 0x13
     f7c:	99 23       	and	r25, r25
     f7e:	49 f0       	breq	.+18     	; 0xf92 <xQueueGenericSend+0x72>
     f80:	c7 01       	movw	r24, r14
     f82:	43 96       	adiw	r24, 0x13	; 19
     f84:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <xTaskRemoveFromEventList>
     f88:	88 23       	and	r24, r24
     f8a:	31 f0       	breq	.+12     	; 0xf98 <xQueueGenericSend+0x78>
     f8c:	0e 94 5a 05 	call	0xab4	; 0xab4 <vPortYield>
     f90:	03 c0       	rjmp	.+6      	; 0xf98 <xQueueGenericSend+0x78>
     f92:	81 11       	cpse	r24, r1
     f94:	0e 94 5a 05 	call	0xab4	; 0xab4 <vPortYield>
     f98:	ff 91       	pop	r31
     f9a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	57 c0       	rjmp	.+174    	; 0x1050 <xQueueGenericSend+0x130>
     fa2:	8e 81       	ldd	r24, Y+6	; 0x06
     fa4:	9f 81       	ldd	r25, Y+7	; 0x07
     fa6:	a8 85       	ldd	r26, Y+8	; 0x08
     fa8:	b9 85       	ldd	r27, Y+9	; 0x09
     faa:	89 2b       	or	r24, r25
     fac:	8a 2b       	or	r24, r26
     fae:	8b 2b       	or	r24, r27
     fb0:	29 f4       	brne	.+10     	; 0xfbc <xQueueGenericSend+0x9c>
     fb2:	ff 91       	pop	r31
     fb4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	4a c0       	rjmp	.+148    	; 0x1050 <xQueueGenericSend+0x130>
     fbc:	11 11       	cpse	r17, r1
     fbe:	05 c0       	rjmp	.+10     	; 0xfca <xQueueGenericSend+0xaa>
     fc0:	ce 01       	movw	r24, r28
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <vTaskInternalSetTimeOutState>
     fc8:	11 e0       	ldi	r17, 0x01	; 1
     fca:	ff 91       	pop	r31
     fcc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fd0:	0e 94 49 0b 	call	0x1692	; 0x1692 <vTaskSuspendAll>
     fd4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fd8:	ff 93       	push	r31
     fda:	f8 7f       	andi	r31, 0xF8	; 248
     fdc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fe0:	f7 01       	movw	r30, r14
     fe2:	81 a1       	ldd	r24, Z+33	; 0x21
     fe4:	8f 3f       	cpi	r24, 0xFF	; 255
     fe6:	09 f4       	brne	.+2      	; 0xfea <xQueueGenericSend+0xca>
     fe8:	11 a2       	std	Z+33, r1	; 0x21
     fea:	f7 01       	movw	r30, r14
     fec:	82 a1       	ldd	r24, Z+34	; 0x22
     fee:	8f 3f       	cpi	r24, 0xFF	; 255
     ff0:	09 f4       	brne	.+2      	; 0xff4 <xQueueGenericSend+0xd4>
     ff2:	12 a2       	std	Z+34, r1	; 0x22
     ff4:	ff 91       	pop	r31
     ff6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ffa:	be 01       	movw	r22, r28
     ffc:	6a 5f       	subi	r22, 0xFA	; 250
     ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    1000:	ce 01       	movw	r24, r28
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <xTaskCheckForTimeOut>
    1008:	81 11       	cpse	r24, r1
    100a:	1c c0       	rjmp	.+56     	; 0x1044 <xQueueGenericSend+0x124>
    100c:	c7 01       	movw	r24, r14
    100e:	0e 94 52 06 	call	0xca4	; 0xca4 <prvIsQueueFull>
    1012:	88 23       	and	r24, r24
    1014:	89 f0       	breq	.+34     	; 0x1038 <xQueueGenericSend+0x118>
    1016:	4e 81       	ldd	r20, Y+6	; 0x06
    1018:	5f 81       	ldd	r21, Y+7	; 0x07
    101a:	68 85       	ldd	r22, Y+8	; 0x08
    101c:	79 85       	ldd	r23, Y+9	; 0x09
    101e:	c6 01       	movw	r24, r12
    1020:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vTaskPlaceOnEventList>
    1024:	c7 01       	movw	r24, r14
    1026:	0e 94 c8 06 	call	0xd90	; 0xd90 <prvUnlockQueue>
    102a:	0e 94 34 0c 	call	0x1868	; 0x1868 <xTaskResumeAll>
    102e:	81 11       	cpse	r24, r1
    1030:	91 cf       	rjmp	.-222    	; 0xf54 <xQueueGenericSend+0x34>
    1032:	0e 94 5a 05 	call	0xab4	; 0xab4 <vPortYield>
    1036:	8e cf       	rjmp	.-228    	; 0xf54 <xQueueGenericSend+0x34>
    1038:	c7 01       	movw	r24, r14
    103a:	0e 94 c8 06 	call	0xd90	; 0xd90 <prvUnlockQueue>
    103e:	0e 94 34 0c 	call	0x1868	; 0x1868 <xTaskResumeAll>
    1042:	88 cf       	rjmp	.-240    	; 0xf54 <xQueueGenericSend+0x34>
    1044:	c7 01       	movw	r24, r14
    1046:	0e 94 c8 06 	call	0xd90	; 0xd90 <prvUnlockQueue>
    104a:	0e 94 34 0c 	call	0x1868	; 0x1868 <xTaskResumeAll>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	29 96       	adiw	r28, 0x09	; 9
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	df 90       	pop	r13
    1064:	cf 90       	pop	r12
    1066:	bf 90       	pop	r11
    1068:	af 90       	pop	r10
    106a:	08 95       	ret

0000106c <xQueueGenericSendFromISR>:
    106c:	af 92       	push	r10
    106e:	bf 92       	push	r11
    1070:	cf 92       	push	r12
    1072:	df 92       	push	r13
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	ec 01       	movw	r28, r24
    1080:	6b 01       	movw	r12, r22
    1082:	5a 01       	movw	r10, r20
    1084:	02 2f       	mov	r16, r18
    1086:	0e 94 96 04 	call	0x92c	; 0x92c <_portSetInterruptMaskFromIsr>
    108a:	f8 2e       	mov	r15, r24
    108c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    108e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1090:	98 17       	cp	r25, r24
    1092:	10 f0       	brcs	.+4      	; 0x1098 <xQueueGenericSendFromISR+0x2c>
    1094:	02 30       	cpi	r16, 0x02	; 2
    1096:	e1 f4       	brne	.+56     	; 0x10d0 <xQueueGenericSendFromISR+0x64>
    1098:	1a a1       	ldd	r17, Y+34	; 0x22
    109a:	40 2f       	mov	r20, r16
    109c:	b6 01       	movw	r22, r12
    109e:	ce 01       	movw	r24, r28
    10a0:	0e 94 65 06 	call	0xcca	; 0xcca <prvCopyDataToQueue>
    10a4:	1f 3f       	cpi	r17, 0xFF	; 255
    10a6:	81 f4       	brne	.+32     	; 0x10c8 <xQueueGenericSendFromISR+0x5c>
    10a8:	8b 89       	ldd	r24, Y+19	; 0x13
    10aa:	88 23       	and	r24, r24
    10ac:	99 f0       	breq	.+38     	; 0x10d4 <xQueueGenericSendFromISR+0x68>
    10ae:	ce 01       	movw	r24, r28
    10b0:	43 96       	adiw	r24, 0x13	; 19
    10b2:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <xTaskRemoveFromEventList>
    10b6:	88 23       	and	r24, r24
    10b8:	79 f0       	breq	.+30     	; 0x10d8 <xQueueGenericSendFromISR+0x6c>
    10ba:	a1 14       	cp	r10, r1
    10bc:	b1 04       	cpc	r11, r1
    10be:	71 f0       	breq	.+28     	; 0x10dc <xQueueGenericSendFromISR+0x70>
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	f5 01       	movw	r30, r10
    10c4:	80 83       	st	Z, r24
    10c6:	0b c0       	rjmp	.+22     	; 0x10de <xQueueGenericSendFromISR+0x72>
    10c8:	1f 5f       	subi	r17, 0xFF	; 255
    10ca:	1a a3       	std	Y+34, r17	; 0x22
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <xQueueGenericSendFromISR+0x72>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	05 c0       	rjmp	.+10     	; 0x10de <xQueueGenericSendFromISR+0x72>
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <xQueueGenericSendFromISR+0x72>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	01 c0       	rjmp	.+2      	; 0x10de <xQueueGenericSendFromISR+0x72>
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	ff 90       	pop	r15
    10ec:	df 90       	pop	r13
    10ee:	cf 90       	pop	r12
    10f0:	bf 90       	pop	r11
    10f2:	af 90       	pop	r10
    10f4:	08 95       	ret

000010f6 <xQueueReceive>:
    10f6:	af 92       	push	r10
    10f8:	bf 92       	push	r11
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	29 97       	sbiw	r28, 0x09	; 9
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	8c 01       	movw	r16, r24
    1116:	5b 01       	movw	r10, r22
    1118:	2e 83       	std	Y+6, r18	; 0x06
    111a:	3f 83       	std	Y+7, r19	; 0x07
    111c:	48 87       	std	Y+8, r20	; 0x08
    111e:	59 87       	std	Y+9, r21	; 0x09
    1120:	e1 2c       	mov	r14, r1
    1122:	6c 01       	movw	r12, r24
    1124:	83 e1       	ldi	r24, 0x13	; 19
    1126:	c8 0e       	add	r12, r24
    1128:	d1 1c       	adc	r13, r1
    112a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    112e:	ff 93       	push	r31
    1130:	f8 7f       	andi	r31, 0xF8	; 248
    1132:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1136:	f8 01       	movw	r30, r16
    1138:	f6 8c       	ldd	r15, Z+30	; 0x1e
    113a:	ff 20       	and	r15, r15
    113c:	b1 f0       	breq	.+44     	; 0x116a <xQueueReceive+0x74>
    113e:	b5 01       	movw	r22, r10
    1140:	c8 01       	movw	r24, r16
    1142:	0e 94 ae 06 	call	0xd5c	; 0xd5c <prvCopyDataFromQueue>
    1146:	fa 94       	dec	r15
    1148:	f8 01       	movw	r30, r16
    114a:	f6 8e       	std	Z+30, r15	; 0x1e
    114c:	80 85       	ldd	r24, Z+8	; 0x08
    114e:	88 23       	and	r24, r24
    1150:	39 f0       	breq	.+14     	; 0x1160 <xQueueReceive+0x6a>
    1152:	c8 01       	movw	r24, r16
    1154:	08 96       	adiw	r24, 0x08	; 8
    1156:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <xTaskRemoveFromEventList>
    115a:	81 11       	cpse	r24, r1
    115c:	0e 94 5a 05 	call	0xab4	; 0xab4 <vPortYield>
    1160:	ff 91       	pop	r31
    1162:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	5e c0       	rjmp	.+188    	; 0x1226 <xQueueReceive+0x130>
    116a:	8e 81       	ldd	r24, Y+6	; 0x06
    116c:	9f 81       	ldd	r25, Y+7	; 0x07
    116e:	a8 85       	ldd	r26, Y+8	; 0x08
    1170:	b9 85       	ldd	r27, Y+9	; 0x09
    1172:	89 2b       	or	r24, r25
    1174:	8a 2b       	or	r24, r26
    1176:	8b 2b       	or	r24, r27
    1178:	29 f4       	brne	.+10     	; 0x1184 <xQueueReceive+0x8e>
    117a:	ff 91       	pop	r31
    117c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	51 c0       	rjmp	.+162    	; 0x1226 <xQueueReceive+0x130>
    1184:	e1 10       	cpse	r14, r1
    1186:	06 c0       	rjmp	.+12     	; 0x1194 <xQueueReceive+0x9e>
    1188:	ce 01       	movw	r24, r28
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <vTaskInternalSetTimeOutState>
    1190:	ee 24       	eor	r14, r14
    1192:	e3 94       	inc	r14
    1194:	ff 91       	pop	r31
    1196:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    119a:	0e 94 49 0b 	call	0x1692	; 0x1692 <vTaskSuspendAll>
    119e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11a2:	ff 93       	push	r31
    11a4:	f8 7f       	andi	r31, 0xF8	; 248
    11a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11aa:	f8 01       	movw	r30, r16
    11ac:	81 a1       	ldd	r24, Z+33	; 0x21
    11ae:	8f 3f       	cpi	r24, 0xFF	; 255
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <xQueueReceive+0xbe>
    11b2:	11 a2       	std	Z+33, r1	; 0x21
    11b4:	f8 01       	movw	r30, r16
    11b6:	82 a1       	ldd	r24, Z+34	; 0x22
    11b8:	8f 3f       	cpi	r24, 0xFF	; 255
    11ba:	09 f4       	brne	.+2      	; 0x11be <xQueueReceive+0xc8>
    11bc:	12 a2       	std	Z+34, r1	; 0x22
    11be:	ff 91       	pop	r31
    11c0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11c4:	be 01       	movw	r22, r28
    11c6:	6a 5f       	subi	r22, 0xFA	; 250
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	ce 01       	movw	r24, r28
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <xTaskCheckForTimeOut>
    11d2:	81 11       	cpse	r24, r1
    11d4:	1c c0       	rjmp	.+56     	; 0x120e <xQueueReceive+0x118>
    11d6:	c8 01       	movw	r24, r16
    11d8:	0e 94 43 06 	call	0xc86	; 0xc86 <prvIsQueueEmpty>
    11dc:	88 23       	and	r24, r24
    11de:	89 f0       	breq	.+34     	; 0x1202 <xQueueReceive+0x10c>
    11e0:	4e 81       	ldd	r20, Y+6	; 0x06
    11e2:	5f 81       	ldd	r21, Y+7	; 0x07
    11e4:	68 85       	ldd	r22, Y+8	; 0x08
    11e6:	79 85       	ldd	r23, Y+9	; 0x09
    11e8:	c6 01       	movw	r24, r12
    11ea:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vTaskPlaceOnEventList>
    11ee:	c8 01       	movw	r24, r16
    11f0:	0e 94 c8 06 	call	0xd90	; 0xd90 <prvUnlockQueue>
    11f4:	0e 94 34 0c 	call	0x1868	; 0x1868 <xTaskResumeAll>
    11f8:	81 11       	cpse	r24, r1
    11fa:	97 cf       	rjmp	.-210    	; 0x112a <xQueueReceive+0x34>
    11fc:	0e 94 5a 05 	call	0xab4	; 0xab4 <vPortYield>
    1200:	94 cf       	rjmp	.-216    	; 0x112a <xQueueReceive+0x34>
    1202:	c8 01       	movw	r24, r16
    1204:	0e 94 c8 06 	call	0xd90	; 0xd90 <prvUnlockQueue>
    1208:	0e 94 34 0c 	call	0x1868	; 0x1868 <xTaskResumeAll>
    120c:	8e cf       	rjmp	.-228    	; 0x112a <xQueueReceive+0x34>
    120e:	c8 01       	movw	r24, r16
    1210:	0e 94 c8 06 	call	0xd90	; 0xd90 <prvUnlockQueue>
    1214:	0e 94 34 0c 	call	0x1868	; 0x1868 <xTaskResumeAll>
    1218:	c8 01       	movw	r24, r16
    121a:	0e 94 43 06 	call	0xc86	; 0xc86 <prvIsQueueEmpty>
    121e:	88 23       	and	r24, r24
    1220:	09 f4       	brne	.+2      	; 0x1224 <xQueueReceive+0x12e>
    1222:	83 cf       	rjmp	.-250    	; 0x112a <xQueueReceive+0x34>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	29 96       	adiw	r28, 0x09	; 9
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	df 90       	pop	r13
    123a:	cf 90       	pop	r12
    123c:	bf 90       	pop	r11
    123e:	af 90       	pop	r10
    1240:	08 95       	ret

00001242 <uxQueueMessagesWaiting>:
    1242:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1246:	ff 93       	push	r31
    1248:	f8 7f       	andi	r31, 0xF8	; 248
    124a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    124e:	fc 01       	movw	r30, r24
    1250:	86 8d       	ldd	r24, Z+30	; 0x1e
    1252:	ff 91       	pop	r31
    1254:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1258:	08 95       	ret

0000125a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1260:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1264:	ff 93       	push	r31
    1266:	f8 7f       	andi	r31, 0xF8	; 248
    1268:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    126c:	89 a1       	ldd	r24, Y+33	; 0x21
    126e:	8f 3f       	cpi	r24, 0xFF	; 255
    1270:	09 f4       	brne	.+2      	; 0x1274 <vQueueWaitForMessageRestricted+0x1a>
    1272:	19 a2       	std	Y+33, r1	; 0x21
    1274:	8a a1       	ldd	r24, Y+34	; 0x22
    1276:	8f 3f       	cpi	r24, 0xFF	; 255
    1278:	09 f4       	brne	.+2      	; 0x127c <vQueueWaitForMessageRestricted+0x22>
    127a:	1a a2       	std	Y+34, r1	; 0x22
    127c:	ff 91       	pop	r31
    127e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1282:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1284:	81 11       	cpse	r24, r1
    1286:	04 c0       	rjmp	.+8      	; 0x1290 <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1288:	ce 01       	movw	r24, r28
    128a:	43 96       	adiw	r24, 0x13	; 19
    128c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1290:	ce 01       	movw	r24, r28
    1292:	0e 94 c8 06 	call	0xd90	; 0xd90 <prvUnlockQueue>
	}
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	08 95       	ret

0000129c <prvResetNextTaskUnblockTime>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    129c:	e0 91 4c 2c 	lds	r30, 0x2C4C	; 0x802c4c <pxDelayedTaskList>
    12a0:	f0 91 4d 2c 	lds	r31, 0x2C4D	; 0x802c4d <pxDelayedTaskList+0x1>
    12a4:	80 81       	ld	r24, Z
    12a6:	81 11       	cpse	r24, r1
    12a8:	0c c0       	rjmp	.+24     	; 0x12c2 <prvResetNextTaskUnblockTime+0x26>
    12aa:	8f ef       	ldi	r24, 0xFF	; 255
    12ac:	9f ef       	ldi	r25, 0xFF	; 255
    12ae:	dc 01       	movw	r26, r24
    12b0:	80 93 25 2c 	sts	0x2C25, r24	; 0x802c25 <xNextTaskUnblockTime>
    12b4:	90 93 26 2c 	sts	0x2C26, r25	; 0x802c26 <xNextTaskUnblockTime+0x1>
    12b8:	a0 93 27 2c 	sts	0x2C27, r26	; 0x802c27 <xNextTaskUnblockTime+0x2>
    12bc:	b0 93 28 2c 	sts	0x2C28, r27	; 0x802c28 <xNextTaskUnblockTime+0x3>
    12c0:	08 95       	ret
    12c2:	e0 91 4c 2c 	lds	r30, 0x2C4C	; 0x802c4c <pxDelayedTaskList>
    12c6:	f0 91 4d 2c 	lds	r31, 0x2C4D	; 0x802c4d <pxDelayedTaskList+0x1>
    12ca:	07 80       	ldd	r0, Z+7	; 0x07
    12cc:	f0 85       	ldd	r31, Z+8	; 0x08
    12ce:	e0 2d       	mov	r30, r0
    12d0:	00 84       	ldd	r0, Z+8	; 0x08
    12d2:	f1 85       	ldd	r31, Z+9	; 0x09
    12d4:	e0 2d       	mov	r30, r0
    12d6:	82 81       	ldd	r24, Z+2	; 0x02
    12d8:	93 81       	ldd	r25, Z+3	; 0x03
    12da:	a4 81       	ldd	r26, Z+4	; 0x04
    12dc:	b5 81       	ldd	r27, Z+5	; 0x05
    12de:	80 93 25 2c 	sts	0x2C25, r24	; 0x802c25 <xNextTaskUnblockTime>
    12e2:	90 93 26 2c 	sts	0x2C26, r25	; 0x802c26 <xNextTaskUnblockTime+0x1>
    12e6:	a0 93 27 2c 	sts	0x2C27, r26	; 0x802c27 <xNextTaskUnblockTime+0x2>
    12ea:	b0 93 28 2c 	sts	0x2C28, r27	; 0x802c28 <xNextTaskUnblockTime+0x3>
    12ee:	08 95       	ret

000012f0 <prvAddCurrentTaskToDelayedList>:
    12f0:	8f 92       	push	r8
    12f2:	9f 92       	push	r9
    12f4:	af 92       	push	r10
    12f6:	bf 92       	push	r11
    12f8:	cf 92       	push	r12
    12fa:	df 92       	push	r13
    12fc:	ef 92       	push	r14
    12fe:	ff 92       	push	r15
    1300:	cf 93       	push	r28
    1302:	6b 01       	movw	r12, r22
    1304:	7c 01       	movw	r14, r24
    1306:	c4 2f       	mov	r28, r20
    1308:	80 90 2f 2c 	lds	r8, 0x2C2F	; 0x802c2f <xTickCount>
    130c:	90 90 30 2c 	lds	r9, 0x2C30	; 0x802c30 <xTickCount+0x1>
    1310:	a0 90 31 2c 	lds	r10, 0x2C31	; 0x802c31 <xTickCount+0x2>
    1314:	b0 90 32 2c 	lds	r11, 0x2C32	; 0x802c32 <xTickCount+0x3>
    1318:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <pxCurrentTCB>
    131c:	90 91 91 2c 	lds	r25, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1320:	02 96       	adiw	r24, 0x02	; 2
    1322:	0e 94 6f 04 	call	0x8de	; 0x8de <uxListRemove>
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	c8 16       	cp	r12, r24
    132a:	d8 06       	cpc	r13, r24
    132c:	e8 06       	cpc	r14, r24
    132e:	f8 06       	cpc	r15, r24
    1330:	69 f4       	brne	.+26     	; 0x134c <prvAddCurrentTaskToDelayedList+0x5c>
    1332:	cc 23       	and	r28, r28
    1334:	59 f0       	breq	.+22     	; 0x134c <prvAddCurrentTaskToDelayedList+0x5c>
    1336:	60 91 90 2c 	lds	r22, 0x2C90	; 0x802c90 <pxCurrentTCB>
    133a:	70 91 91 2c 	lds	r23, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    133e:	6e 5f       	subi	r22, 0xFE	; 254
    1340:	7f 4f       	sbci	r23, 0xFF	; 255
    1342:	84 e3       	ldi	r24, 0x34	; 52
    1344:	9c e2       	ldi	r25, 0x2C	; 44
    1346:	0e 94 11 04 	call	0x822	; 0x822 <vListInsertEnd>
    134a:	3f c0       	rjmp	.+126    	; 0x13ca <prvAddCurrentTaskToDelayedList+0xda>
    134c:	c8 0c       	add	r12, r8
    134e:	d9 1c       	adc	r13, r9
    1350:	ea 1c       	adc	r14, r10
    1352:	fb 1c       	adc	r15, r11
    1354:	e0 91 90 2c 	lds	r30, 0x2C90	; 0x802c90 <pxCurrentTCB>
    1358:	f0 91 91 2c 	lds	r31, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    135c:	c2 82       	std	Z+2, r12	; 0x02
    135e:	d3 82       	std	Z+3, r13	; 0x03
    1360:	e4 82       	std	Z+4, r14	; 0x04
    1362:	f5 82       	std	Z+5, r15	; 0x05
    1364:	c8 14       	cp	r12, r8
    1366:	d9 04       	cpc	r13, r9
    1368:	ea 04       	cpc	r14, r10
    136a:	fb 04       	cpc	r15, r11
    136c:	68 f4       	brcc	.+26     	; 0x1388 <prvAddCurrentTaskToDelayedList+0x98>
    136e:	60 91 90 2c 	lds	r22, 0x2C90	; 0x802c90 <pxCurrentTCB>
    1372:	70 91 91 2c 	lds	r23, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1376:	80 91 4a 2c 	lds	r24, 0x2C4A	; 0x802c4a <pxOverflowDelayedTaskList>
    137a:	90 91 4b 2c 	lds	r25, 0x2C4B	; 0x802c4b <pxOverflowDelayedTaskList+0x1>
    137e:	6e 5f       	subi	r22, 0xFE	; 254
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	0e 94 32 04 	call	0x864	; 0x864 <vListInsert>
    1386:	21 c0       	rjmp	.+66     	; 0x13ca <prvAddCurrentTaskToDelayedList+0xda>
    1388:	60 91 90 2c 	lds	r22, 0x2C90	; 0x802c90 <pxCurrentTCB>
    138c:	70 91 91 2c 	lds	r23, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1390:	80 91 4c 2c 	lds	r24, 0x2C4C	; 0x802c4c <pxDelayedTaskList>
    1394:	90 91 4d 2c 	lds	r25, 0x2C4D	; 0x802c4d <pxDelayedTaskList+0x1>
    1398:	6e 5f       	subi	r22, 0xFE	; 254
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	0e 94 32 04 	call	0x864	; 0x864 <vListInsert>
    13a0:	80 91 25 2c 	lds	r24, 0x2C25	; 0x802c25 <xNextTaskUnblockTime>
    13a4:	90 91 26 2c 	lds	r25, 0x2C26	; 0x802c26 <xNextTaskUnblockTime+0x1>
    13a8:	a0 91 27 2c 	lds	r26, 0x2C27	; 0x802c27 <xNextTaskUnblockTime+0x2>
    13ac:	b0 91 28 2c 	lds	r27, 0x2C28	; 0x802c28 <xNextTaskUnblockTime+0x3>
    13b0:	c8 16       	cp	r12, r24
    13b2:	d9 06       	cpc	r13, r25
    13b4:	ea 06       	cpc	r14, r26
    13b6:	fb 06       	cpc	r15, r27
    13b8:	40 f4       	brcc	.+16     	; 0x13ca <prvAddCurrentTaskToDelayedList+0xda>
    13ba:	c0 92 25 2c 	sts	0x2C25, r12	; 0x802c25 <xNextTaskUnblockTime>
    13be:	d0 92 26 2c 	sts	0x2C26, r13	; 0x802c26 <xNextTaskUnblockTime+0x1>
    13c2:	e0 92 27 2c 	sts	0x2C27, r14	; 0x802c27 <xNextTaskUnblockTime+0x2>
    13c6:	f0 92 28 2c 	sts	0x2C28, r15	; 0x802c28 <xNextTaskUnblockTime+0x3>
    13ca:	cf 91       	pop	r28
    13cc:	ff 90       	pop	r15
    13ce:	ef 90       	pop	r14
    13d0:	df 90       	pop	r13
    13d2:	cf 90       	pop	r12
    13d4:	bf 90       	pop	r11
    13d6:	af 90       	pop	r10
    13d8:	9f 90       	pop	r9
    13da:	8f 90       	pop	r8
    13dc:	08 95       	ret

000013de <prvIdleTask>:
    13de:	c4 e6       	ldi	r28, 0x64	; 100
    13e0:	dc e2       	ldi	r29, 0x2C	; 44
    13e2:	88 81       	ld	r24, Y
    13e4:	82 30       	cpi	r24, 0x02	; 2
    13e6:	10 f0       	brcs	.+4      	; 0x13ec <prvIdleTask+0xe>
    13e8:	0e 94 5a 05 	call	0xab4	; 0xab4 <vPortYield>
    13ec:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <vApplicationIdleHook>
    13f0:	f8 cf       	rjmp	.-16     	; 0x13e2 <prvIdleTask+0x4>

000013f2 <xTaskCreate>:
    13f2:	4f 92       	push	r4
    13f4:	5f 92       	push	r5
    13f6:	6f 92       	push	r6
    13f8:	7f 92       	push	r7
    13fa:	8f 92       	push	r8
    13fc:	9f 92       	push	r9
    13fe:	af 92       	push	r10
    1400:	bf 92       	push	r11
    1402:	cf 92       	push	r12
    1404:	df 92       	push	r13
    1406:	ef 92       	push	r14
    1408:	ff 92       	push	r15
    140a:	0f 93       	push	r16
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	4c 01       	movw	r8, r24
    1412:	6b 01       	movw	r12, r22
    1414:	5a 01       	movw	r10, r20
    1416:	29 01       	movw	r4, r18
    1418:	ca 01       	movw	r24, r20
    141a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <pvPortMalloc>
    141e:	3c 01       	movw	r6, r24
    1420:	89 2b       	or	r24, r25
    1422:	09 f4       	brne	.+2      	; 0x1426 <xTaskCreate+0x34>
    1424:	ea c0       	rjmp	.+468    	; 0x15fa <xTaskCreate+0x208>
    1426:	8c e2       	ldi	r24, 0x2C	; 44
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <pvPortMalloc>
    142e:	ec 01       	movw	r28, r24
    1430:	89 2b       	or	r24, r25
    1432:	b1 f0       	breq	.+44     	; 0x1460 <xTaskCreate+0x6e>
    1434:	6b 8e       	std	Y+27, r6	; 0x1b
    1436:	7c 8e       	std	Y+28, r7	; 0x1c
    1438:	a5 01       	movw	r20, r10
    143a:	65 ea       	ldi	r22, 0xA5	; 165
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	c3 01       	movw	r24, r6
    1440:	0e 94 8b 20 	call	0x4116	; 0x4116 <memset>
    1444:	21 e0       	ldi	r18, 0x01	; 1
    1446:	a2 1a       	sub	r10, r18
    1448:	b1 08       	sbc	r11, r1
    144a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    144c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    144e:	a8 0e       	add	r10, r24
    1450:	b9 1e       	adc	r11, r25
    1452:	d6 01       	movw	r26, r12
    1454:	8c 91       	ld	r24, X
    1456:	8d 8f       	std	Y+29, r24	; 0x1d
    1458:	8c 91       	ld	r24, X
    145a:	81 11       	cpse	r24, r1
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <xTaskCreate+0x76>
    145e:	18 c0       	rjmp	.+48     	; 0x1490 <xTaskCreate+0x9e>
    1460:	c3 01       	movw	r24, r6
    1462:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <vPortFree>
    1466:	c9 c0       	rjmp	.+402    	; 0x15fa <xTaskCreate+0x208>
    1468:	ae 01       	movw	r20, r28
    146a:	42 5e       	subi	r20, 0xE2	; 226
    146c:	5f 4f       	sbci	r21, 0xFF	; 255
    146e:	f6 01       	movw	r30, r12
    1470:	31 96       	adiw	r30, 0x01	; 1
    1472:	b8 e0       	ldi	r27, 0x08	; 8
    1474:	cb 0e       	add	r12, r27
    1476:	d1 1c       	adc	r13, r1
    1478:	cf 01       	movw	r24, r30
    147a:	21 91       	ld	r18, Z+
    147c:	da 01       	movw	r26, r20
    147e:	2d 93       	st	X+, r18
    1480:	ad 01       	movw	r20, r26
    1482:	dc 01       	movw	r26, r24
    1484:	8c 91       	ld	r24, X
    1486:	88 23       	and	r24, r24
    1488:	19 f0       	breq	.+6      	; 0x1490 <xTaskCreate+0x9e>
    148a:	ec 15       	cp	r30, r12
    148c:	fd 05       	cpc	r31, r13
    148e:	a1 f7       	brne	.-24     	; 0x1478 <xTaskCreate+0x86>
    1490:	1c a2       	std	Y+36, r1	; 0x24
    1492:	04 30       	cpi	r16, 0x04	; 4
    1494:	08 f0       	brcs	.+2      	; 0x1498 <xTaskCreate+0xa6>
    1496:	03 e0       	ldi	r16, 0x03	; 3
    1498:	0a 8f       	std	Y+26, r16	; 0x1a
    149a:	6e 01       	movw	r12, r28
    149c:	b2 e0       	ldi	r27, 0x02	; 2
    149e:	cb 0e       	add	r12, r27
    14a0:	d1 1c       	adc	r13, r1
    14a2:	c6 01       	movw	r24, r12
    14a4:	0e 94 0d 04 	call	0x81a	; 0x81a <vListInitialiseItem>
    14a8:	ce 01       	movw	r24, r28
    14aa:	0e 96       	adiw	r24, 0x0e	; 14
    14ac:	0e 94 0d 04 	call	0x81a	; 0x81a <vListInitialiseItem>
    14b0:	ca 87       	std	Y+10, r28	; 0x0a
    14b2:	db 87       	std	Y+11, r29	; 0x0b
    14b4:	84 e0       	ldi	r24, 0x04	; 4
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	a0 e0       	ldi	r26, 0x00	; 0
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	80 1b       	sub	r24, r16
    14be:	91 09       	sbc	r25, r1
    14c0:	a1 09       	sbc	r26, r1
    14c2:	b1 09       	sbc	r27, r1
    14c4:	8e 87       	std	Y+14, r24	; 0x0e
    14c6:	9f 87       	std	Y+15, r25	; 0x0f
    14c8:	a8 8b       	std	Y+16, r26	; 0x10
    14ca:	b9 8b       	std	Y+17, r27	; 0x11
    14cc:	ce 8b       	std	Y+22, r28	; 0x16
    14ce:	df 8b       	std	Y+23, r29	; 0x17
    14d0:	1f a2       	std	Y+39, r1	; 0x27
    14d2:	18 a6       	std	Y+40, r1	; 0x28
    14d4:	19 a6       	std	Y+41, r1	; 0x29
    14d6:	1a a6       	std	Y+42, r1	; 0x2a
    14d8:	1b a6       	std	Y+43, r1	; 0x2b
    14da:	a2 01       	movw	r20, r4
    14dc:	b4 01       	movw	r22, r8
    14de:	c5 01       	movw	r24, r10
    14e0:	0e 94 9d 04 	call	0x93a	; 0x93a <pxPortInitialiseStack>
    14e4:	88 83       	st	Y, r24
    14e6:	99 83       	std	Y+1, r25	; 0x01
    14e8:	e1 14       	cp	r14, r1
    14ea:	f1 04       	cpc	r15, r1
    14ec:	19 f0       	breq	.+6      	; 0x14f4 <xTaskCreate+0x102>
    14ee:	f7 01       	movw	r30, r14
    14f0:	c0 83       	st	Z, r28
    14f2:	d1 83       	std	Z+1, r29	; 0x01
    14f4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14f8:	ff 93       	push	r31
    14fa:	f8 7f       	andi	r31, 0xF8	; 248
    14fc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1500:	80 91 33 2c 	lds	r24, 0x2C33	; 0x802c33 <uxCurrentNumberOfTasks>
    1504:	8f 5f       	subi	r24, 0xFF	; 255
    1506:	80 93 33 2c 	sts	0x2C33, r24	; 0x802c33 <uxCurrentNumberOfTasks>
    150a:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <pxCurrentTCB>
    150e:	90 91 91 2c 	lds	r25, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1512:	89 2b       	or	r24, r25
    1514:	a9 f5       	brne	.+106    	; 0x1580 <xTaskCreate+0x18e>
    1516:	c0 93 90 2c 	sts	0x2C90, r28	; 0x802c90 <pxCurrentTCB>
    151a:	d0 93 91 2c 	sts	0x2C91, r29	; 0x802c91 <pxCurrentTCB+0x1>
    151e:	80 91 33 2c 	lds	r24, 0x2C33	; 0x802c33 <uxCurrentNumberOfTasks>
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	e9 f5       	brne	.+122    	; 0x15a0 <xTaskCreate+0x1ae>
    1526:	84 e6       	ldi	r24, 0x64	; 100
    1528:	9c e2       	ldi	r25, 0x2C	; 44
    152a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <vListInitialise>
    152e:	8f e6       	ldi	r24, 0x6F	; 111
    1530:	9c e2       	ldi	r25, 0x2C	; 44
    1532:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <vListInitialise>
    1536:	8a e7       	ldi	r24, 0x7A	; 122
    1538:	9c e2       	ldi	r25, 0x2C	; 44
    153a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <vListInitialise>
    153e:	85 e8       	ldi	r24, 0x85	; 133
    1540:	9c e2       	ldi	r25, 0x2C	; 44
    1542:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <vListInitialise>
    1546:	89 e5       	ldi	r24, 0x59	; 89
    1548:	9c e2       	ldi	r25, 0x2C	; 44
    154a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <vListInitialise>
    154e:	8e e4       	ldi	r24, 0x4E	; 78
    1550:	9c e2       	ldi	r25, 0x2C	; 44
    1552:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <vListInitialise>
    1556:	8f e3       	ldi	r24, 0x3F	; 63
    1558:	9c e2       	ldi	r25, 0x2C	; 44
    155a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <vListInitialise>
    155e:	84 e3       	ldi	r24, 0x34	; 52
    1560:	9c e2       	ldi	r25, 0x2C	; 44
    1562:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <vListInitialise>
    1566:	89 e5       	ldi	r24, 0x59	; 89
    1568:	9c e2       	ldi	r25, 0x2C	; 44
    156a:	80 93 4c 2c 	sts	0x2C4C, r24	; 0x802c4c <pxDelayedTaskList>
    156e:	90 93 4d 2c 	sts	0x2C4D, r25	; 0x802c4d <pxDelayedTaskList+0x1>
    1572:	8e e4       	ldi	r24, 0x4E	; 78
    1574:	9c e2       	ldi	r25, 0x2C	; 44
    1576:	80 93 4a 2c 	sts	0x2C4A, r24	; 0x802c4a <pxOverflowDelayedTaskList>
    157a:	90 93 4b 2c 	sts	0x2C4B, r25	; 0x802c4b <pxOverflowDelayedTaskList+0x1>
    157e:	10 c0       	rjmp	.+32     	; 0x15a0 <xTaskCreate+0x1ae>
    1580:	80 91 2d 2c 	lds	r24, 0x2C2D	; 0x802c2d <xSchedulerRunning>
    1584:	81 11       	cpse	r24, r1
    1586:	0c c0       	rjmp	.+24     	; 0x15a0 <xTaskCreate+0x1ae>
    1588:	e0 91 90 2c 	lds	r30, 0x2C90	; 0x802c90 <pxCurrentTCB>
    158c:	f0 91 91 2c 	lds	r31, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1590:	92 8d       	ldd	r25, Z+26	; 0x1a
    1592:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1594:	89 17       	cp	r24, r25
    1596:	20 f0       	brcs	.+8      	; 0x15a0 <xTaskCreate+0x1ae>
    1598:	c0 93 90 2c 	sts	0x2C90, r28	; 0x802c90 <pxCurrentTCB>
    159c:	d0 93 91 2c 	sts	0x2C91, r29	; 0x802c91 <pxCurrentTCB+0x1>
    15a0:	80 91 29 2c 	lds	r24, 0x2C29	; 0x802c29 <uxTaskNumber>
    15a4:	8f 5f       	subi	r24, 0xFF	; 255
    15a6:	80 93 29 2c 	sts	0x2C29, r24	; 0x802c29 <uxTaskNumber>
    15aa:	8d a3       	std	Y+37, r24	; 0x25
    15ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15ae:	90 91 2e 2c 	lds	r25, 0x2C2E	; 0x802c2e <uxTopReadyPriority>
    15b2:	98 17       	cp	r25, r24
    15b4:	10 f4       	brcc	.+4      	; 0x15ba <xTaskCreate+0x1c8>
    15b6:	80 93 2e 2c 	sts	0x2C2E, r24	; 0x802c2e <uxTopReadyPriority>
    15ba:	fb e0       	ldi	r31, 0x0B	; 11
    15bc:	8f 9f       	mul	r24, r31
    15be:	c0 01       	movw	r24, r0
    15c0:	11 24       	eor	r1, r1
    15c2:	b6 01       	movw	r22, r12
    15c4:	8c 59       	subi	r24, 0x9C	; 156
    15c6:	93 4d       	sbci	r25, 0xD3	; 211
    15c8:	0e 94 11 04 	call	0x822	; 0x822 <vListInsertEnd>
    15cc:	ff 91       	pop	r31
    15ce:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    15d2:	80 91 2d 2c 	lds	r24, 0x2C2D	; 0x802c2d <xSchedulerRunning>
    15d6:	88 23       	and	r24, r24
    15d8:	61 f0       	breq	.+24     	; 0x15f2 <xTaskCreate+0x200>
    15da:	e0 91 90 2c 	lds	r30, 0x2C90	; 0x802c90 <pxCurrentTCB>
    15de:	f0 91 91 2c 	lds	r31, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    15e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    15e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15e6:	98 17       	cp	r25, r24
    15e8:	30 f4       	brcc	.+12     	; 0x15f6 <xTaskCreate+0x204>
    15ea:	0e 94 5a 05 	call	0xab4	; 0xab4 <vPortYield>
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	05 c0       	rjmp	.+10     	; 0x15fc <xTaskCreate+0x20a>
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <xTaskCreate+0x20a>
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	01 c0       	rjmp	.+2      	; 0x15fc <xTaskCreate+0x20a>
    15fa:	8f ef       	ldi	r24, 0xFF	; 255
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	0f 91       	pop	r16
    1602:	ff 90       	pop	r15
    1604:	ef 90       	pop	r14
    1606:	df 90       	pop	r13
    1608:	cf 90       	pop	r12
    160a:	bf 90       	pop	r11
    160c:	af 90       	pop	r10
    160e:	9f 90       	pop	r9
    1610:	8f 90       	pop	r8
    1612:	7f 90       	pop	r7
    1614:	6f 90       	pop	r6
    1616:	5f 90       	pop	r5
    1618:	4f 90       	pop	r4
    161a:	08 95       	ret

0000161c <vTaskStartScheduler>:
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	0f 2e       	mov	r0, r31
    1624:	f3 e2       	ldi	r31, 0x23	; 35
    1626:	ef 2e       	mov	r14, r31
    1628:	fc e2       	ldi	r31, 0x2C	; 44
    162a:	ff 2e       	mov	r15, r31
    162c:	f0 2d       	mov	r31, r0
    162e:	00 e0       	ldi	r16, 0x00	; 0
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	48 ec       	ldi	r20, 0xC8	; 200
    1636:	50 e0       	ldi	r21, 0x00	; 0
    1638:	64 e0       	ldi	r22, 0x04	; 4
    163a:	70 e2       	ldi	r23, 0x20	; 32
    163c:	8f ee       	ldi	r24, 0xEF	; 239
    163e:	99 e0       	ldi	r25, 0x09	; 9
    1640:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <xTaskCreate>
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	09 f5       	brne	.+66     	; 0x168a <vTaskStartScheduler+0x6e>
    1648:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <xTimerCreateTimerTask>
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	e9 f4       	brne	.+58     	; 0x168a <vTaskStartScheduler+0x6e>
    1650:	e0 ea       	ldi	r30, 0xA0	; 160
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	82 81       	ldd	r24, Z+2	; 0x02
    1656:	88 7f       	andi	r24, 0xF8	; 248
    1658:	82 83       	std	Z+2, r24	; 0x02
    165a:	8f ef       	ldi	r24, 0xFF	; 255
    165c:	9f ef       	ldi	r25, 0xFF	; 255
    165e:	dc 01       	movw	r26, r24
    1660:	80 93 25 2c 	sts	0x2C25, r24	; 0x802c25 <xNextTaskUnblockTime>
    1664:	90 93 26 2c 	sts	0x2C26, r25	; 0x802c26 <xNextTaskUnblockTime+0x1>
    1668:	a0 93 27 2c 	sts	0x2C27, r26	; 0x802c27 <xNextTaskUnblockTime+0x2>
    166c:	b0 93 28 2c 	sts	0x2C28, r27	; 0x802c28 <xNextTaskUnblockTime+0x3>
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	80 93 2d 2c 	sts	0x2C2D, r24	; 0x802c2d <xSchedulerRunning>
    1676:	10 92 2f 2c 	sts	0x2C2F, r1	; 0x802c2f <xTickCount>
    167a:	10 92 30 2c 	sts	0x2C30, r1	; 0x802c30 <xTickCount+0x1>
    167e:	10 92 31 2c 	sts	0x2C31, r1	; 0x802c31 <xTickCount+0x2>
    1682:	10 92 32 2c 	sts	0x2C32, r1	; 0x802c32 <xTickCount+0x3>
    1686:	0e 94 1a 05 	call	0xa34	; 0xa34 <xPortStartScheduler>
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	08 95       	ret

00001692 <vTaskSuspendAll>:
    1692:	80 91 22 2c 	lds	r24, 0x2C22	; 0x802c22 <uxSchedulerSuspended>
    1696:	8f 5f       	subi	r24, 0xFF	; 255
    1698:	80 93 22 2c 	sts	0x2C22, r24	; 0x802c22 <uxSchedulerSuspended>
    169c:	08 95       	ret

0000169e <xTaskGetTickCount>:
    169e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    16a2:	ff 93       	push	r31
    16a4:	f8 7f       	andi	r31, 0xF8	; 248
    16a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    16aa:	60 91 2f 2c 	lds	r22, 0x2C2F	; 0x802c2f <xTickCount>
    16ae:	70 91 30 2c 	lds	r23, 0x2C30	; 0x802c30 <xTickCount+0x1>
    16b2:	80 91 31 2c 	lds	r24, 0x2C31	; 0x802c31 <xTickCount+0x2>
    16b6:	90 91 32 2c 	lds	r25, 0x2C32	; 0x802c32 <xTickCount+0x3>
    16ba:	ff 91       	pop	r31
    16bc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    16c0:	08 95       	ret

000016c2 <xTaskIncrementTick>:
    16c2:	af 92       	push	r10
    16c4:	bf 92       	push	r11
    16c6:	cf 92       	push	r12
    16c8:	df 92       	push	r13
    16ca:	ef 92       	push	r14
    16cc:	ff 92       	push	r15
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	80 91 22 2c 	lds	r24, 0x2C22	; 0x802c22 <uxSchedulerSuspended>
    16da:	81 11       	cpse	r24, r1
    16dc:	ad c0       	rjmp	.+346    	; 0x1838 <xTaskIncrementTick+0x176>
    16de:	c0 90 2f 2c 	lds	r12, 0x2C2F	; 0x802c2f <xTickCount>
    16e2:	d0 90 30 2c 	lds	r13, 0x2C30	; 0x802c30 <xTickCount+0x1>
    16e6:	e0 90 31 2c 	lds	r14, 0x2C31	; 0x802c31 <xTickCount+0x2>
    16ea:	f0 90 32 2c 	lds	r15, 0x2C32	; 0x802c32 <xTickCount+0x3>
    16ee:	8f ef       	ldi	r24, 0xFF	; 255
    16f0:	c8 1a       	sub	r12, r24
    16f2:	d8 0a       	sbc	r13, r24
    16f4:	e8 0a       	sbc	r14, r24
    16f6:	f8 0a       	sbc	r15, r24
    16f8:	c0 92 2f 2c 	sts	0x2C2F, r12	; 0x802c2f <xTickCount>
    16fc:	d0 92 30 2c 	sts	0x2C30, r13	; 0x802c30 <xTickCount+0x1>
    1700:	e0 92 31 2c 	sts	0x2C31, r14	; 0x802c31 <xTickCount+0x2>
    1704:	f0 92 32 2c 	sts	0x2C32, r15	; 0x802c32 <xTickCount+0x3>
    1708:	c1 14       	cp	r12, r1
    170a:	d1 04       	cpc	r13, r1
    170c:	e1 04       	cpc	r14, r1
    170e:	f1 04       	cpc	r15, r1
    1710:	b9 f4       	brne	.+46     	; 0x1740 <xTaskIncrementTick+0x7e>
    1712:	80 91 4c 2c 	lds	r24, 0x2C4C	; 0x802c4c <pxDelayedTaskList>
    1716:	90 91 4d 2c 	lds	r25, 0x2C4D	; 0x802c4d <pxDelayedTaskList+0x1>
    171a:	20 91 4a 2c 	lds	r18, 0x2C4A	; 0x802c4a <pxOverflowDelayedTaskList>
    171e:	30 91 4b 2c 	lds	r19, 0x2C4B	; 0x802c4b <pxOverflowDelayedTaskList+0x1>
    1722:	20 93 4c 2c 	sts	0x2C4C, r18	; 0x802c4c <pxDelayedTaskList>
    1726:	30 93 4d 2c 	sts	0x2C4D, r19	; 0x802c4d <pxDelayedTaskList+0x1>
    172a:	80 93 4a 2c 	sts	0x2C4A, r24	; 0x802c4a <pxOverflowDelayedTaskList>
    172e:	90 93 4b 2c 	sts	0x2C4B, r25	; 0x802c4b <pxOverflowDelayedTaskList+0x1>
    1732:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <xNumOfOverflows>
    1736:	8f 5f       	subi	r24, 0xFF	; 255
    1738:	80 93 2a 2c 	sts	0x2C2A, r24	; 0x802c2a <xNumOfOverflows>
    173c:	0e 94 4e 09 	call	0x129c	; 0x129c <prvResetNextTaskUnblockTime>
    1740:	80 91 25 2c 	lds	r24, 0x2C25	; 0x802c25 <xNextTaskUnblockTime>
    1744:	90 91 26 2c 	lds	r25, 0x2C26	; 0x802c26 <xNextTaskUnblockTime+0x1>
    1748:	a0 91 27 2c 	lds	r26, 0x2C27	; 0x802c27 <xNextTaskUnblockTime+0x2>
    174c:	b0 91 28 2c 	lds	r27, 0x2C28	; 0x802c28 <xNextTaskUnblockTime+0x3>
    1750:	c8 16       	cp	r12, r24
    1752:	d9 06       	cpc	r13, r25
    1754:	ea 06       	cpc	r14, r26
    1756:	fb 06       	cpc	r15, r27
    1758:	10 f4       	brcc	.+4      	; 0x175e <xTaskIncrementTick+0x9c>
    175a:	b1 2c       	mov	r11, r1
    175c:	5c c0       	rjmp	.+184    	; 0x1816 <xTaskIncrementTick+0x154>
    175e:	b1 2c       	mov	r11, r1
    1760:	0f 2e       	mov	r0, r31
    1762:	fb e0       	ldi	r31, 0x0B	; 11
    1764:	af 2e       	mov	r10, r31
    1766:	f0 2d       	mov	r31, r0
    1768:	e0 91 4c 2c 	lds	r30, 0x2C4C	; 0x802c4c <pxDelayedTaskList>
    176c:	f0 91 4d 2c 	lds	r31, 0x2C4D	; 0x802c4d <pxDelayedTaskList+0x1>
    1770:	80 81       	ld	r24, Z
    1772:	81 11       	cpse	r24, r1
    1774:	0c c0       	rjmp	.+24     	; 0x178e <xTaskIncrementTick+0xcc>
    1776:	8f ef       	ldi	r24, 0xFF	; 255
    1778:	9f ef       	ldi	r25, 0xFF	; 255
    177a:	dc 01       	movw	r26, r24
    177c:	80 93 25 2c 	sts	0x2C25, r24	; 0x802c25 <xNextTaskUnblockTime>
    1780:	90 93 26 2c 	sts	0x2C26, r25	; 0x802c26 <xNextTaskUnblockTime+0x1>
    1784:	a0 93 27 2c 	sts	0x2C27, r26	; 0x802c27 <xNextTaskUnblockTime+0x2>
    1788:	b0 93 28 2c 	sts	0x2C28, r27	; 0x802c28 <xNextTaskUnblockTime+0x3>
    178c:	44 c0       	rjmp	.+136    	; 0x1816 <xTaskIncrementTick+0x154>
    178e:	e0 91 4c 2c 	lds	r30, 0x2C4C	; 0x802c4c <pxDelayedTaskList>
    1792:	f0 91 4d 2c 	lds	r31, 0x2C4D	; 0x802c4d <pxDelayedTaskList+0x1>
    1796:	07 80       	ldd	r0, Z+7	; 0x07
    1798:	f0 85       	ldd	r31, Z+8	; 0x08
    179a:	e0 2d       	mov	r30, r0
    179c:	c0 85       	ldd	r28, Z+8	; 0x08
    179e:	d1 85       	ldd	r29, Z+9	; 0x09
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	9b 81       	ldd	r25, Y+3	; 0x03
    17a4:	ac 81       	ldd	r26, Y+4	; 0x04
    17a6:	bd 81       	ldd	r27, Y+5	; 0x05
    17a8:	c8 16       	cp	r12, r24
    17aa:	d9 06       	cpc	r13, r25
    17ac:	ea 06       	cpc	r14, r26
    17ae:	fb 06       	cpc	r15, r27
    17b0:	48 f4       	brcc	.+18     	; 0x17c4 <xTaskIncrementTick+0x102>
    17b2:	80 93 25 2c 	sts	0x2C25, r24	; 0x802c25 <xNextTaskUnblockTime>
    17b6:	90 93 26 2c 	sts	0x2C26, r25	; 0x802c26 <xNextTaskUnblockTime+0x1>
    17ba:	a0 93 27 2c 	sts	0x2C27, r26	; 0x802c27 <xNextTaskUnblockTime+0x2>
    17be:	b0 93 28 2c 	sts	0x2C28, r27	; 0x802c28 <xNextTaskUnblockTime+0x3>
    17c2:	29 c0       	rjmp	.+82     	; 0x1816 <xTaskIncrementTick+0x154>
    17c4:	8e 01       	movw	r16, r28
    17c6:	0e 5f       	subi	r16, 0xFE	; 254
    17c8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ca:	c8 01       	movw	r24, r16
    17cc:	0e 94 6f 04 	call	0x8de	; 0x8de <uxListRemove>
    17d0:	88 8d       	ldd	r24, Y+24	; 0x18
    17d2:	99 8d       	ldd	r25, Y+25	; 0x19
    17d4:	89 2b       	or	r24, r25
    17d6:	21 f0       	breq	.+8      	; 0x17e0 <xTaskIncrementTick+0x11e>
    17d8:	ce 01       	movw	r24, r28
    17da:	0e 96       	adiw	r24, 0x0e	; 14
    17dc:	0e 94 6f 04 	call	0x8de	; 0x8de <uxListRemove>
    17e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17e2:	90 91 2e 2c 	lds	r25, 0x2C2E	; 0x802c2e <uxTopReadyPriority>
    17e6:	98 17       	cp	r25, r24
    17e8:	10 f4       	brcc	.+4      	; 0x17ee <xTaskIncrementTick+0x12c>
    17ea:	80 93 2e 2c 	sts	0x2C2E, r24	; 0x802c2e <uxTopReadyPriority>
    17ee:	a8 9e       	mul	r10, r24
    17f0:	c0 01       	movw	r24, r0
    17f2:	11 24       	eor	r1, r1
    17f4:	b8 01       	movw	r22, r16
    17f6:	8c 59       	subi	r24, 0x9C	; 156
    17f8:	93 4d       	sbci	r25, 0xD3	; 211
    17fa:	0e 94 11 04 	call	0x822	; 0x822 <vListInsertEnd>
    17fe:	e0 91 90 2c 	lds	r30, 0x2C90	; 0x802c90 <pxCurrentTCB>
    1802:	f0 91 91 2c 	lds	r31, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1806:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1808:	82 8d       	ldd	r24, Z+26	; 0x1a
    180a:	98 17       	cp	r25, r24
    180c:	08 f4       	brcc	.+2      	; 0x1810 <xTaskIncrementTick+0x14e>
    180e:	ac cf       	rjmp	.-168    	; 0x1768 <xTaskIncrementTick+0xa6>
    1810:	bb 24       	eor	r11, r11
    1812:	b3 94       	inc	r11
    1814:	a9 cf       	rjmp	.-174    	; 0x1768 <xTaskIncrementTick+0xa6>
    1816:	e0 91 90 2c 	lds	r30, 0x2C90	; 0x802c90 <pxCurrentTCB>
    181a:	f0 91 91 2c 	lds	r31, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    181e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1820:	8b e0       	ldi	r24, 0x0B	; 11
    1822:	e8 9f       	mul	r30, r24
    1824:	f0 01       	movw	r30, r0
    1826:	11 24       	eor	r1, r1
    1828:	ec 59       	subi	r30, 0x9C	; 156
    182a:	f3 4d       	sbci	r31, 0xD3	; 211
    182c:	80 81       	ld	r24, Z
    182e:	82 30       	cpi	r24, 0x02	; 2
    1830:	48 f0       	brcs	.+18     	; 0x1844 <xTaskIncrementTick+0x182>
    1832:	bb 24       	eor	r11, r11
    1834:	b3 94       	inc	r11
    1836:	06 c0       	rjmp	.+12     	; 0x1844 <xTaskIncrementTick+0x182>
    1838:	80 91 2c 2c 	lds	r24, 0x2C2C	; 0x802c2c <uxPendedTicks>
    183c:	8f 5f       	subi	r24, 0xFF	; 255
    183e:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxPendedTicks>
    1842:	b1 2c       	mov	r11, r1
    1844:	80 91 2b 2c 	lds	r24, 0x2C2B	; 0x802c2b <xYieldPending>
    1848:	88 23       	and	r24, r24
    184a:	11 f0       	breq	.+4      	; 0x1850 <xTaskIncrementTick+0x18e>
    184c:	bb 24       	eor	r11, r11
    184e:	b3 94       	inc	r11
    1850:	8b 2d       	mov	r24, r11
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	df 90       	pop	r13
    1860:	cf 90       	pop	r12
    1862:	bf 90       	pop	r11
    1864:	af 90       	pop	r10
    1866:	08 95       	ret

00001868 <xTaskResumeAll>:
    1868:	cf 92       	push	r12
    186a:	df 92       	push	r13
    186c:	ef 92       	push	r14
    186e:	ff 92       	push	r15
    1870:	0f 93       	push	r16
    1872:	1f 93       	push	r17
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    187c:	ff 93       	push	r31
    187e:	f8 7f       	andi	r31, 0xF8	; 248
    1880:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1884:	80 91 22 2c 	lds	r24, 0x2C22	; 0x802c22 <uxSchedulerSuspended>
    1888:	81 50       	subi	r24, 0x01	; 1
    188a:	80 93 22 2c 	sts	0x2C22, r24	; 0x802c22 <uxSchedulerSuspended>
    188e:	80 91 22 2c 	lds	r24, 0x2C22	; 0x802c22 <uxSchedulerSuspended>
    1892:	81 11       	cpse	r24, r1
    1894:	5c c0       	rjmp	.+184    	; 0x194e <xTaskResumeAll+0xe6>
    1896:	80 91 33 2c 	lds	r24, 0x2C33	; 0x802c33 <uxCurrentNumberOfTasks>
    189a:	81 11       	cpse	r24, r1
    189c:	2c c0       	rjmp	.+88     	; 0x18f6 <xTaskResumeAll+0x8e>
    189e:	5a c0       	rjmp	.+180    	; 0x1954 <xTaskResumeAll+0xec>
    18a0:	d7 01       	movw	r26, r14
    18a2:	17 96       	adiw	r26, 0x07	; 7
    18a4:	ed 91       	ld	r30, X+
    18a6:	fc 91       	ld	r31, X
    18a8:	18 97       	sbiw	r26, 0x08	; 8
    18aa:	c0 85       	ldd	r28, Z+8	; 0x08
    18ac:	d1 85       	ldd	r29, Z+9	; 0x09
    18ae:	ce 01       	movw	r24, r28
    18b0:	0e 96       	adiw	r24, 0x0e	; 14
    18b2:	0e 94 6f 04 	call	0x8de	; 0x8de <uxListRemove>
    18b6:	8e 01       	movw	r16, r28
    18b8:	0e 5f       	subi	r16, 0xFE	; 254
    18ba:	1f 4f       	sbci	r17, 0xFF	; 255
    18bc:	c8 01       	movw	r24, r16
    18be:	0e 94 6f 04 	call	0x8de	; 0x8de <uxListRemove>
    18c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18c4:	90 91 2e 2c 	lds	r25, 0x2C2E	; 0x802c2e <uxTopReadyPriority>
    18c8:	98 17       	cp	r25, r24
    18ca:	10 f4       	brcc	.+4      	; 0x18d0 <xTaskResumeAll+0x68>
    18cc:	80 93 2e 2c 	sts	0x2C2E, r24	; 0x802c2e <uxTopReadyPriority>
    18d0:	d8 9e       	mul	r13, r24
    18d2:	c0 01       	movw	r24, r0
    18d4:	11 24       	eor	r1, r1
    18d6:	b8 01       	movw	r22, r16
    18d8:	8c 59       	subi	r24, 0x9C	; 156
    18da:	93 4d       	sbci	r25, 0xD3	; 211
    18dc:	0e 94 11 04 	call	0x822	; 0x822 <vListInsertEnd>
    18e0:	e0 91 90 2c 	lds	r30, 0x2C90	; 0x802c90 <pxCurrentTCB>
    18e4:	f0 91 91 2c 	lds	r31, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    18e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ec:	98 17       	cp	r25, r24
    18ee:	88 f0       	brcs	.+34     	; 0x1912 <xTaskResumeAll+0xaa>
    18f0:	c0 92 2b 2c 	sts	0x2C2B, r12	; 0x802c2b <xYieldPending>
    18f4:	0e c0       	rjmp	.+28     	; 0x1912 <xTaskResumeAll+0xaa>
    18f6:	c0 e0       	ldi	r28, 0x00	; 0
    18f8:	d0 e0       	ldi	r29, 0x00	; 0
    18fa:	0f 2e       	mov	r0, r31
    18fc:	ff e3       	ldi	r31, 0x3F	; 63
    18fe:	ef 2e       	mov	r14, r31
    1900:	fc e2       	ldi	r31, 0x2C	; 44
    1902:	ff 2e       	mov	r15, r31
    1904:	f0 2d       	mov	r31, r0
    1906:	0f 2e       	mov	r0, r31
    1908:	fb e0       	ldi	r31, 0x0B	; 11
    190a:	df 2e       	mov	r13, r31
    190c:	f0 2d       	mov	r31, r0
    190e:	cc 24       	eor	r12, r12
    1910:	c3 94       	inc	r12
    1912:	f7 01       	movw	r30, r14
    1914:	80 81       	ld	r24, Z
    1916:	81 11       	cpse	r24, r1
    1918:	c3 cf       	rjmp	.-122    	; 0x18a0 <xTaskResumeAll+0x38>
    191a:	cd 2b       	or	r28, r29
    191c:	11 f0       	breq	.+4      	; 0x1922 <xTaskResumeAll+0xba>
    191e:	0e 94 4e 09 	call	0x129c	; 0x129c <prvResetNextTaskUnblockTime>
    1922:	c0 91 2c 2c 	lds	r28, 0x2C2C	; 0x802c2c <uxPendedTicks>
    1926:	cc 23       	and	r28, r28
    1928:	51 f0       	breq	.+20     	; 0x193e <xTaskResumeAll+0xd6>
    192a:	d1 e0       	ldi	r29, 0x01	; 1
    192c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <xTaskIncrementTick>
    1930:	81 11       	cpse	r24, r1
    1932:	d0 93 2b 2c 	sts	0x2C2B, r29	; 0x802c2b <xYieldPending>
    1936:	c1 50       	subi	r28, 0x01	; 1
    1938:	c9 f7       	brne	.-14     	; 0x192c <xTaskResumeAll+0xc4>
    193a:	10 92 2c 2c 	sts	0x2C2C, r1	; 0x802c2c <uxPendedTicks>
    193e:	80 91 2b 2c 	lds	r24, 0x2C2B	; 0x802c2b <xYieldPending>
    1942:	88 23       	and	r24, r24
    1944:	31 f0       	breq	.+12     	; 0x1952 <xTaskResumeAll+0xea>
    1946:	0e 94 5a 05 	call	0xab4	; 0xab4 <vPortYield>
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	03 c0       	rjmp	.+6      	; 0x1954 <xTaskResumeAll+0xec>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	01 c0       	rjmp	.+2      	; 0x1954 <xTaskResumeAll+0xec>
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	ff 91       	pop	r31
    1956:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	ff 90       	pop	r15
    1964:	ef 90       	pop	r14
    1966:	df 90       	pop	r13
    1968:	cf 90       	pop	r12
    196a:	08 95       	ret

0000196c <vTaskDelay>:
    196c:	cf 92       	push	r12
    196e:	df 92       	push	r13
    1970:	ef 92       	push	r14
    1972:	ff 92       	push	r15
    1974:	6b 01       	movw	r12, r22
    1976:	7c 01       	movw	r14, r24
    1978:	67 2b       	or	r22, r23
    197a:	68 2b       	or	r22, r24
    197c:	69 2b       	or	r22, r25
    197e:	59 f0       	breq	.+22     	; 0x1996 <vTaskDelay+0x2a>
    1980:	0e 94 49 0b 	call	0x1692	; 0x1692 <vTaskSuspendAll>
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	c7 01       	movw	r24, r14
    1988:	b6 01       	movw	r22, r12
    198a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <prvAddCurrentTaskToDelayedList>
    198e:	0e 94 34 0c 	call	0x1868	; 0x1868 <xTaskResumeAll>
    1992:	81 11       	cpse	r24, r1
    1994:	02 c0       	rjmp	.+4      	; 0x199a <vTaskDelay+0x2e>
    1996:	0e 94 5a 05 	call	0xab4	; 0xab4 <vPortYield>
    199a:	ff 90       	pop	r15
    199c:	ef 90       	pop	r14
    199e:	df 90       	pop	r13
    19a0:	cf 90       	pop	r12
    19a2:	08 95       	ret

000019a4 <vTaskSwitchContext>:
    19a4:	80 91 22 2c 	lds	r24, 0x2C22	; 0x802c22 <uxSchedulerSuspended>
    19a8:	88 23       	and	r24, r24
    19aa:	21 f0       	breq	.+8      	; 0x19b4 <vTaskSwitchContext+0x10>
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	80 93 2b 2c 	sts	0x2C2B, r24	; 0x802c2b <xYieldPending>
    19b2:	08 95       	ret
    19b4:	10 92 2b 2c 	sts	0x2C2B, r1	; 0x802c2b <xYieldPending>
    19b8:	e0 91 90 2c 	lds	r30, 0x2C90	; 0x802c90 <pxCurrentTCB>
    19bc:	f0 91 91 2c 	lds	r31, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    19c0:	03 8c       	ldd	r0, Z+27	; 0x1b
    19c2:	f4 8d       	ldd	r31, Z+28	; 0x1c
    19c4:	e0 2d       	mov	r30, r0
    19c6:	80 81       	ld	r24, Z
    19c8:	91 81       	ldd	r25, Z+1	; 0x01
    19ca:	a2 81       	ldd	r26, Z+2	; 0x02
    19cc:	b3 81       	ldd	r27, Z+3	; 0x03
    19ce:	85 3a       	cpi	r24, 0xA5	; 165
    19d0:	95 4a       	sbci	r25, 0xA5	; 165
    19d2:	a5 4a       	sbci	r26, 0xA5	; 165
    19d4:	b5 4a       	sbci	r27, 0xA5	; 165
    19d6:	d9 f4       	brne	.+54     	; 0x1a0e <vTaskSwitchContext+0x6a>
    19d8:	84 81       	ldd	r24, Z+4	; 0x04
    19da:	95 81       	ldd	r25, Z+5	; 0x05
    19dc:	a6 81       	ldd	r26, Z+6	; 0x06
    19de:	b7 81       	ldd	r27, Z+7	; 0x07
    19e0:	85 3a       	cpi	r24, 0xA5	; 165
    19e2:	95 4a       	sbci	r25, 0xA5	; 165
    19e4:	a5 4a       	sbci	r26, 0xA5	; 165
    19e6:	b5 4a       	sbci	r27, 0xA5	; 165
    19e8:	91 f4       	brne	.+36     	; 0x1a0e <vTaskSwitchContext+0x6a>
    19ea:	80 85       	ldd	r24, Z+8	; 0x08
    19ec:	91 85       	ldd	r25, Z+9	; 0x09
    19ee:	a2 85       	ldd	r26, Z+10	; 0x0a
    19f0:	b3 85       	ldd	r27, Z+11	; 0x0b
    19f2:	85 3a       	cpi	r24, 0xA5	; 165
    19f4:	95 4a       	sbci	r25, 0xA5	; 165
    19f6:	a5 4a       	sbci	r26, 0xA5	; 165
    19f8:	b5 4a       	sbci	r27, 0xA5	; 165
    19fa:	49 f4       	brne	.+18     	; 0x1a0e <vTaskSwitchContext+0x6a>
    19fc:	84 85       	ldd	r24, Z+12	; 0x0c
    19fe:	95 85       	ldd	r25, Z+13	; 0x0d
    1a00:	a6 85       	ldd	r26, Z+14	; 0x0e
    1a02:	b7 85       	ldd	r27, Z+15	; 0x0f
    1a04:	85 3a       	cpi	r24, 0xA5	; 165
    1a06:	95 4a       	sbci	r25, 0xA5	; 165
    1a08:	a5 4a       	sbci	r26, 0xA5	; 165
    1a0a:	b5 4a       	sbci	r27, 0xA5	; 165
    1a0c:	61 f0       	breq	.+24     	; 0x1a26 <vTaskSwitchContext+0x82>
    1a0e:	60 91 90 2c 	lds	r22, 0x2C90	; 0x802c90 <pxCurrentTCB>
    1a12:	70 91 91 2c 	lds	r23, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1a16:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <pxCurrentTCB>
    1a1a:	90 91 91 2c 	lds	r25, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1a1e:	63 5e       	subi	r22, 0xE3	; 227
    1a20:	7f 4f       	sbci	r23, 0xFF	; 255
    1a22:	0e 94 35 02 	call	0x46a	; 0x46a <vApplicationStackOverflowHook>
    1a26:	80 91 2e 2c 	lds	r24, 0x2C2E	; 0x802c2e <uxTopReadyPriority>
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	9b e0       	ldi	r25, 0x0B	; 11
    1a30:	89 9f       	mul	r24, r25
    1a32:	f0 01       	movw	r30, r0
    1a34:	11 24       	eor	r1, r1
    1a36:	ec 59       	subi	r30, 0x9C	; 156
    1a38:	f3 4d       	sbci	r31, 0xD3	; 211
    1a3a:	90 81       	ld	r25, Z
    1a3c:	91 11       	cpse	r25, r1
    1a3e:	0e c0       	rjmp	.+28     	; 0x1a5c <vTaskSwitchContext+0xb8>
    1a40:	4b e0       	ldi	r20, 0x0B	; 11
    1a42:	81 50       	subi	r24, 0x01	; 1
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	42 9f       	mul	r20, r18
    1a4a:	f0 01       	movw	r30, r0
    1a4c:	43 9f       	mul	r20, r19
    1a4e:	f0 0d       	add	r31, r0
    1a50:	11 24       	eor	r1, r1
    1a52:	ec 59       	subi	r30, 0x9C	; 156
    1a54:	f3 4d       	sbci	r31, 0xD3	; 211
    1a56:	90 81       	ld	r25, Z
    1a58:	99 23       	and	r25, r25
    1a5a:	99 f3       	breq	.-26     	; 0x1a42 <vTaskSwitchContext+0x9e>
    1a5c:	9b e0       	ldi	r25, 0x0B	; 11
    1a5e:	92 9f       	mul	r25, r18
    1a60:	a0 01       	movw	r20, r0
    1a62:	93 9f       	mul	r25, r19
    1a64:	50 0d       	add	r21, r0
    1a66:	11 24       	eor	r1, r1
    1a68:	da 01       	movw	r26, r20
    1a6a:	ac 59       	subi	r26, 0x9C	; 156
    1a6c:	b3 4d       	sbci	r27, 0xD3	; 211
    1a6e:	11 96       	adiw	r26, 0x01	; 1
    1a70:	ed 91       	ld	r30, X+
    1a72:	fc 91       	ld	r31, X
    1a74:	12 97       	sbiw	r26, 0x02	; 2
    1a76:	04 80       	ldd	r0, Z+4	; 0x04
    1a78:	f5 81       	ldd	r31, Z+5	; 0x05
    1a7a:	e0 2d       	mov	r30, r0
    1a7c:	11 96       	adiw	r26, 0x01	; 1
    1a7e:	ed 93       	st	X+, r30
    1a80:	fc 93       	st	X, r31
    1a82:	12 97       	sbiw	r26, 0x02	; 2
    1a84:	49 59       	subi	r20, 0x99	; 153
    1a86:	53 4d       	sbci	r21, 0xD3	; 211
    1a88:	e4 17       	cp	r30, r20
    1a8a:	f5 07       	cpc	r31, r21
    1a8c:	29 f4       	brne	.+10     	; 0x1a98 <vTaskSwitchContext+0xf4>
    1a8e:	44 81       	ldd	r20, Z+4	; 0x04
    1a90:	55 81       	ldd	r21, Z+5	; 0x05
    1a92:	fd 01       	movw	r30, r26
    1a94:	41 83       	std	Z+1, r20	; 0x01
    1a96:	52 83       	std	Z+2, r21	; 0x02
    1a98:	9b e0       	ldi	r25, 0x0B	; 11
    1a9a:	92 9f       	mul	r25, r18
    1a9c:	f0 01       	movw	r30, r0
    1a9e:	93 9f       	mul	r25, r19
    1aa0:	f0 0d       	add	r31, r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	ec 59       	subi	r30, 0x9C	; 156
    1aa6:	f3 4d       	sbci	r31, 0xD3	; 211
    1aa8:	01 80       	ldd	r0, Z+1	; 0x01
    1aaa:	f2 81       	ldd	r31, Z+2	; 0x02
    1aac:	e0 2d       	mov	r30, r0
    1aae:	20 85       	ldd	r18, Z+8	; 0x08
    1ab0:	31 85       	ldd	r19, Z+9	; 0x09
    1ab2:	20 93 90 2c 	sts	0x2C90, r18	; 0x802c90 <pxCurrentTCB>
    1ab6:	30 93 91 2c 	sts	0x2C91, r19	; 0x802c91 <pxCurrentTCB+0x1>
    1aba:	80 93 2e 2c 	sts	0x2C2E, r24	; 0x802c2e <uxTopReadyPriority>
    1abe:	08 95       	ret

00001ac0 <vTaskPlaceOnEventList>:
    1ac0:	cf 92       	push	r12
    1ac2:	df 92       	push	r13
    1ac4:	ef 92       	push	r14
    1ac6:	ff 92       	push	r15
    1ac8:	6a 01       	movw	r12, r20
    1aca:	7b 01       	movw	r14, r22
    1acc:	60 91 90 2c 	lds	r22, 0x2C90	; 0x802c90 <pxCurrentTCB>
    1ad0:	70 91 91 2c 	lds	r23, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1ad4:	62 5f       	subi	r22, 0xF2	; 242
    1ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad8:	0e 94 32 04 	call	0x864	; 0x864 <vListInsert>
    1adc:	41 e0       	ldi	r20, 0x01	; 1
    1ade:	c7 01       	movw	r24, r14
    1ae0:	b6 01       	movw	r22, r12
    1ae2:	0e 94 78 09 	call	0x12f0	; 0x12f0 <prvAddCurrentTaskToDelayedList>
    1ae6:	ff 90       	pop	r15
    1ae8:	ef 90       	pop	r14
    1aea:	df 90       	pop	r13
    1aec:	cf 90       	pop	r12
    1aee:	08 95       	ret

00001af0 <vTaskPlaceOnUnorderedEventList>:
    1af0:	cf 92       	push	r12
    1af2:	df 92       	push	r13
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	68 01       	movw	r12, r16
    1afe:	79 01       	movw	r14, r18
    1b00:	e0 91 90 2c 	lds	r30, 0x2C90	; 0x802c90 <pxCurrentTCB>
    1b04:	f0 91 91 2c 	lds	r31, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1b08:	70 68       	ori	r23, 0x80	; 128
    1b0a:	46 87       	std	Z+14, r20	; 0x0e
    1b0c:	57 87       	std	Z+15, r21	; 0x0f
    1b0e:	60 8b       	std	Z+16, r22	; 0x10
    1b10:	71 8b       	std	Z+17, r23	; 0x11
    1b12:	60 91 90 2c 	lds	r22, 0x2C90	; 0x802c90 <pxCurrentTCB>
    1b16:	70 91 91 2c 	lds	r23, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1b1a:	62 5f       	subi	r22, 0xF2	; 242
    1b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1e:	0e 94 11 04 	call	0x822	; 0x822 <vListInsertEnd>
    1b22:	41 e0       	ldi	r20, 0x01	; 1
    1b24:	c7 01       	movw	r24, r14
    1b26:	b6 01       	movw	r22, r12
    1b28:	0e 94 78 09 	call	0x12f0	; 0x12f0 <prvAddCurrentTaskToDelayedList>
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	ff 90       	pop	r15
    1b32:	ef 90       	pop	r14
    1b34:	df 90       	pop	r13
    1b36:	cf 90       	pop	r12
    1b38:	08 95       	ret

00001b3a <vTaskPlaceOnEventListRestricted>:
    1b3a:	cf 92       	push	r12
    1b3c:	df 92       	push	r13
    1b3e:	ef 92       	push	r14
    1b40:	ff 92       	push	r15
    1b42:	cf 93       	push	r28
    1b44:	6a 01       	movw	r12, r20
    1b46:	7b 01       	movw	r14, r22
    1b48:	c2 2f       	mov	r28, r18
    1b4a:	60 91 90 2c 	lds	r22, 0x2C90	; 0x802c90 <pxCurrentTCB>
    1b4e:	70 91 91 2c 	lds	r23, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1b52:	62 5f       	subi	r22, 0xF2	; 242
    1b54:	7f 4f       	sbci	r23, 0xFF	; 255
    1b56:	0e 94 11 04 	call	0x822	; 0x822 <vListInsertEnd>
    1b5a:	cc 23       	and	r28, r28
    1b5c:	21 f0       	breq	.+8      	; 0x1b66 <vTaskPlaceOnEventListRestricted+0x2c>
    1b5e:	cc 24       	eor	r12, r12
    1b60:	ca 94       	dec	r12
    1b62:	dc 2c       	mov	r13, r12
    1b64:	76 01       	movw	r14, r12
    1b66:	4c 2f       	mov	r20, r28
    1b68:	c7 01       	movw	r24, r14
    1b6a:	b6 01       	movw	r22, r12
    1b6c:	0e 94 78 09 	call	0x12f0	; 0x12f0 <prvAddCurrentTaskToDelayedList>
    1b70:	cf 91       	pop	r28
    1b72:	ff 90       	pop	r15
    1b74:	ef 90       	pop	r14
    1b76:	df 90       	pop	r13
    1b78:	cf 90       	pop	r12
    1b7a:	08 95       	ret

00001b7c <xTaskRemoveFromEventList>:
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	dc 01       	movw	r26, r24
    1b86:	17 96       	adiw	r26, 0x07	; 7
    1b88:	ed 91       	ld	r30, X+
    1b8a:	fc 91       	ld	r31, X
    1b8c:	18 97       	sbiw	r26, 0x08	; 8
    1b8e:	c0 85       	ldd	r28, Z+8	; 0x08
    1b90:	d1 85       	ldd	r29, Z+9	; 0x09
    1b92:	8e 01       	movw	r16, r28
    1b94:	02 5f       	subi	r16, 0xF2	; 242
    1b96:	1f 4f       	sbci	r17, 0xFF	; 255
    1b98:	c8 01       	movw	r24, r16
    1b9a:	0e 94 6f 04 	call	0x8de	; 0x8de <uxListRemove>
    1b9e:	80 91 22 2c 	lds	r24, 0x2C22	; 0x802c22 <uxSchedulerSuspended>
    1ba2:	81 11       	cpse	r24, r1
    1ba4:	16 c0       	rjmp	.+44     	; 0x1bd2 <xTaskRemoveFromEventList+0x56>
    1ba6:	0c 50       	subi	r16, 0x0C	; 12
    1ba8:	11 09       	sbc	r17, r1
    1baa:	c8 01       	movw	r24, r16
    1bac:	0e 94 6f 04 	call	0x8de	; 0x8de <uxListRemove>
    1bb0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bb2:	90 91 2e 2c 	lds	r25, 0x2C2E	; 0x802c2e <uxTopReadyPriority>
    1bb6:	98 17       	cp	r25, r24
    1bb8:	10 f4       	brcc	.+4      	; 0x1bbe <xTaskRemoveFromEventList+0x42>
    1bba:	80 93 2e 2c 	sts	0x2C2E, r24	; 0x802c2e <uxTopReadyPriority>
    1bbe:	bb e0       	ldi	r27, 0x0B	; 11
    1bc0:	8b 9f       	mul	r24, r27
    1bc2:	c0 01       	movw	r24, r0
    1bc4:	11 24       	eor	r1, r1
    1bc6:	b8 01       	movw	r22, r16
    1bc8:	8c 59       	subi	r24, 0x9C	; 156
    1bca:	93 4d       	sbci	r25, 0xD3	; 211
    1bcc:	0e 94 11 04 	call	0x822	; 0x822 <vListInsertEnd>
    1bd0:	05 c0       	rjmp	.+10     	; 0x1bdc <xTaskRemoveFromEventList+0x60>
    1bd2:	b8 01       	movw	r22, r16
    1bd4:	8f e3       	ldi	r24, 0x3F	; 63
    1bd6:	9c e2       	ldi	r25, 0x2C	; 44
    1bd8:	0e 94 11 04 	call	0x822	; 0x822 <vListInsertEnd>
    1bdc:	e0 91 90 2c 	lds	r30, 0x2C90	; 0x802c90 <pxCurrentTCB>
    1be0:	f0 91 91 2c 	lds	r31, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1be4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1be6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1be8:	89 17       	cp	r24, r25
    1bea:	20 f4       	brcc	.+8      	; 0x1bf4 <xTaskRemoveFromEventList+0x78>
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	80 93 2b 2c 	sts	0x2C2B, r24	; 0x802c2b <xYieldPending>
    1bf2:	01 c0       	rjmp	.+2      	; 0x1bf6 <xTaskRemoveFromEventList+0x7a>
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	08 95       	ret

00001c00 <vTaskRemoveFromUnorderedEventList>:
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	70 68       	ori	r23, 0x80	; 128
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	40 83       	st	Z, r20
    1c0e:	51 83       	std	Z+1, r21	; 0x01
    1c10:	62 83       	std	Z+2, r22	; 0x02
    1c12:	73 83       	std	Z+3, r23	; 0x03
    1c14:	c0 85       	ldd	r28, Z+8	; 0x08
    1c16:	d1 85       	ldd	r29, Z+9	; 0x09
    1c18:	0e 94 6f 04 	call	0x8de	; 0x8de <uxListRemove>
    1c1c:	8e 01       	movw	r16, r28
    1c1e:	0e 5f       	subi	r16, 0xFE	; 254
    1c20:	1f 4f       	sbci	r17, 0xFF	; 255
    1c22:	c8 01       	movw	r24, r16
    1c24:	0e 94 6f 04 	call	0x8de	; 0x8de <uxListRemove>
    1c28:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c2a:	90 91 2e 2c 	lds	r25, 0x2C2E	; 0x802c2e <uxTopReadyPriority>
    1c2e:	98 17       	cp	r25, r24
    1c30:	10 f4       	brcc	.+4      	; 0x1c36 <vTaskRemoveFromUnorderedEventList+0x36>
    1c32:	80 93 2e 2c 	sts	0x2C2E, r24	; 0x802c2e <uxTopReadyPriority>
    1c36:	fb e0       	ldi	r31, 0x0B	; 11
    1c38:	8f 9f       	mul	r24, r31
    1c3a:	c0 01       	movw	r24, r0
    1c3c:	11 24       	eor	r1, r1
    1c3e:	b8 01       	movw	r22, r16
    1c40:	8c 59       	subi	r24, 0x9C	; 156
    1c42:	93 4d       	sbci	r25, 0xD3	; 211
    1c44:	0e 94 11 04 	call	0x822	; 0x822 <vListInsertEnd>
    1c48:	e0 91 90 2c 	lds	r30, 0x2C90	; 0x802c90 <pxCurrentTCB>
    1c4c:	f0 91 91 2c 	lds	r31, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1c50:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c52:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c54:	89 17       	cp	r24, r25
    1c56:	18 f4       	brcc	.+6      	; 0x1c5e <vTaskRemoveFromUnorderedEventList+0x5e>
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	80 93 2b 2c 	sts	0x2C2B, r24	; 0x802c2b <xYieldPending>
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	08 95       	ret

00001c68 <vTaskInternalSetTimeOutState>:
    1c68:	20 91 2a 2c 	lds	r18, 0x2C2A	; 0x802c2a <xNumOfOverflows>
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	20 83       	st	Z, r18
    1c70:	40 91 2f 2c 	lds	r20, 0x2C2F	; 0x802c2f <xTickCount>
    1c74:	50 91 30 2c 	lds	r21, 0x2C30	; 0x802c30 <xTickCount+0x1>
    1c78:	60 91 31 2c 	lds	r22, 0x2C31	; 0x802c31 <xTickCount+0x2>
    1c7c:	70 91 32 2c 	lds	r23, 0x2C32	; 0x802c32 <xTickCount+0x3>
    1c80:	41 83       	std	Z+1, r20	; 0x01
    1c82:	52 83       	std	Z+2, r21	; 0x02
    1c84:	63 83       	std	Z+3, r22	; 0x03
    1c86:	74 83       	std	Z+4, r23	; 0x04
    1c88:	08 95       	ret

00001c8a <xTaskCheckForTimeOut>:
    1c8a:	cf 92       	push	r12
    1c8c:	df 92       	push	r13
    1c8e:	ef 92       	push	r14
    1c90:	ff 92       	push	r15
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	db 01       	movw	r26, r22
    1c9c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ca0:	ff 93       	push	r31
    1ca2:	f8 7f       	andi	r31, 0xF8	; 248
    1ca4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ca8:	40 91 2f 2c 	lds	r20, 0x2C2F	; 0x802c2f <xTickCount>
    1cac:	50 91 30 2c 	lds	r21, 0x2C30	; 0x802c30 <xTickCount+0x1>
    1cb0:	60 91 31 2c 	lds	r22, 0x2C31	; 0x802c31 <xTickCount+0x2>
    1cb4:	70 91 32 2c 	lds	r23, 0x2C32	; 0x802c32 <xTickCount+0x3>
    1cb8:	0d 91       	ld	r16, X+
    1cba:	1d 91       	ld	r17, X+
    1cbc:	2d 91       	ld	r18, X+
    1cbe:	3c 91       	ld	r19, X
    1cc0:	13 97       	sbiw	r26, 0x03	; 3
    1cc2:	0f 3f       	cpi	r16, 0xFF	; 255
    1cc4:	cf ef       	ldi	r28, 0xFF	; 255
    1cc6:	1c 07       	cpc	r17, r28
    1cc8:	2c 07       	cpc	r18, r28
    1cca:	3c 07       	cpc	r19, r28
    1ccc:	69 f1       	breq	.+90     	; 0x1d28 <xTaskCheckForTimeOut+0x9e>
    1cce:	fc 01       	movw	r30, r24
    1cd0:	c1 80       	ldd	r12, Z+1	; 0x01
    1cd2:	d2 80       	ldd	r13, Z+2	; 0x02
    1cd4:	e3 80       	ldd	r14, Z+3	; 0x03
    1cd6:	f4 80       	ldd	r15, Z+4	; 0x04
    1cd8:	e0 91 2a 2c 	lds	r30, 0x2C2A	; 0x802c2a <xNumOfOverflows>
    1cdc:	ec 01       	movw	r28, r24
    1cde:	f8 81       	ld	r31, Y
    1ce0:	fe 17       	cp	r31, r30
    1ce2:	29 f0       	breq	.+10     	; 0x1cee <xTaskCheckForTimeOut+0x64>
    1ce4:	4c 15       	cp	r20, r12
    1ce6:	5d 05       	cpc	r21, r13
    1ce8:	6e 05       	cpc	r22, r14
    1cea:	7f 05       	cpc	r23, r15
    1cec:	f8 f4       	brcc	.+62     	; 0x1d2c <xTaskCheckForTimeOut+0xa2>
    1cee:	4c 19       	sub	r20, r12
    1cf0:	5d 09       	sbc	r21, r13
    1cf2:	6e 09       	sbc	r22, r14
    1cf4:	7f 09       	sbc	r23, r15
    1cf6:	40 17       	cp	r20, r16
    1cf8:	51 07       	cpc	r21, r17
    1cfa:	62 07       	cpc	r22, r18
    1cfc:	73 07       	cpc	r23, r19
    1cfe:	68 f4       	brcc	.+26     	; 0x1d1a <xTaskCheckForTimeOut+0x90>
    1d00:	fd 01       	movw	r30, r26
    1d02:	04 1b       	sub	r16, r20
    1d04:	15 0b       	sbc	r17, r21
    1d06:	26 0b       	sbc	r18, r22
    1d08:	37 0b       	sbc	r19, r23
    1d0a:	00 83       	st	Z, r16
    1d0c:	11 83       	std	Z+1, r17	; 0x01
    1d0e:	22 83       	std	Z+2, r18	; 0x02
    1d10:	33 83       	std	Z+3, r19	; 0x03
    1d12:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <vTaskInternalSetTimeOutState>
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	0a c0       	rjmp	.+20     	; 0x1d2e <xTaskCheckForTimeOut+0xa4>
    1d1a:	1d 92       	st	X+, r1
    1d1c:	1d 92       	st	X+, r1
    1d1e:	1d 92       	st	X+, r1
    1d20:	1c 92       	st	X, r1
    1d22:	13 97       	sbiw	r26, 0x03	; 3
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	03 c0       	rjmp	.+6      	; 0x1d2e <xTaskCheckForTimeOut+0xa4>
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	01 c0       	rjmp	.+2      	; 0x1d2e <xTaskCheckForTimeOut+0xa4>
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	ff 91       	pop	r31
    1d30:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	1f 91       	pop	r17
    1d3a:	0f 91       	pop	r16
    1d3c:	ff 90       	pop	r15
    1d3e:	ef 90       	pop	r14
    1d40:	df 90       	pop	r13
    1d42:	cf 90       	pop	r12
    1d44:	08 95       	ret

00001d46 <vTaskMissedYield>:
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	80 93 2b 2c 	sts	0x2C2B, r24	; 0x802c2b <xYieldPending>
    1d4c:	08 95       	ret

00001d4e <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1d4e:	80 91 2d 2c 	lds	r24, 0x2C2D	; 0x802c2d <xSchedulerRunning>
    1d52:	88 23       	and	r24, r24
    1d54:	31 f0       	breq	.+12     	; 0x1d62 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1d56:	80 91 22 2c 	lds	r24, 0x2C22	; 0x802c22 <uxSchedulerSuspended>
    1d5a:	88 23       	and	r24, r24
    1d5c:	21 f0       	breq	.+8      	; 0x1d66 <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	08 95       	ret
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
			{
				xReturn = taskSCHEDULER_RUNNING;
    1d66:	82 e0       	ldi	r24, 0x02	; 2
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    1d68:	08 95       	ret

00001d6a <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1d6a:	cf 92       	push	r12
    1d6c:	df 92       	push	r13
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1d72:	e0 91 90 2c 	lds	r30, 0x2C90	; 0x802c90 <pxCurrentTCB>
    1d76:	f0 91 91 2c 	lds	r31, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1d7a:	66 85       	ldd	r22, Z+14	; 0x0e
    1d7c:	77 85       	ldd	r23, Z+15	; 0x0f
    1d7e:	80 89       	ldd	r24, Z+16	; 0x10
    1d80:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d82:	e0 91 90 2c 	lds	r30, 0x2C90	; 0x802c90 <pxCurrentTCB>
    1d86:	f0 91 91 2c 	lds	r31, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1d8a:	a0 91 90 2c 	lds	r26, 0x2C90	; 0x802c90 <pxCurrentTCB>
    1d8e:	b0 91 91 2c 	lds	r27, 0x2C91	; 0x802c91 <pxCurrentTCB+0x1>
    1d92:	5a 96       	adiw	r26, 0x1a	; 26
    1d94:	2c 91       	ld	r18, X
    1d96:	c1 2c       	mov	r12, r1
    1d98:	d1 2c       	mov	r13, r1
    1d9a:	76 01       	movw	r14, r12
    1d9c:	68 94       	set
    1d9e:	c2 f8       	bld	r12, 2
    1da0:	c2 1a       	sub	r12, r18
    1da2:	d1 08       	sbc	r13, r1
    1da4:	e1 08       	sbc	r14, r1
    1da6:	f1 08       	sbc	r15, r1
    1da8:	c6 86       	std	Z+14, r12	; 0x0e
    1daa:	d7 86       	std	Z+15, r13	; 0x0f
    1dac:	e0 8a       	std	Z+16, r14	; 0x10
    1dae:	f1 8a       	std	Z+17, r15	; 0x11

	return uxReturn;
}
    1db0:	ff 90       	pop	r15
    1db2:	ef 90       	pop	r14
    1db4:	df 90       	pop	r13
    1db6:	cf 90       	pop	r12
    1db8:	08 95       	ret

00001dba <prvInsertTimerInActiveList>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    1dba:	cf 92       	push	r12
    1dbc:	df 92       	push	r13
    1dbe:	ef 92       	push	r14
    1dc0:	ff 92       	push	r15
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	42 83       	std	Z+2, r20	; 0x02
    1dca:	53 83       	std	Z+3, r21	; 0x03
    1dcc:	64 83       	std	Z+4, r22	; 0x04
    1dce:	75 83       	std	Z+5, r23	; 0x05
    1dd0:	82 87       	std	Z+10, r24	; 0x0a
    1dd2:	93 87       	std	Z+11, r25	; 0x0b
    1dd4:	04 17       	cp	r16, r20
    1dd6:	15 07       	cpc	r17, r21
    1dd8:	26 07       	cpc	r18, r22
    1dda:	37 07       	cpc	r19, r23
    1ddc:	c0 f0       	brcs	.+48     	; 0x1e0e <prvInsertTimerInActiveList+0x54>
    1dde:	0c 19       	sub	r16, r12
    1de0:	1d 09       	sbc	r17, r13
    1de2:	2e 09       	sbc	r18, r14
    1de4:	3f 09       	sbc	r19, r15
    1de6:	86 85       	ldd	r24, Z+14	; 0x0e
    1de8:	97 85       	ldd	r25, Z+15	; 0x0f
    1dea:	a0 89       	ldd	r26, Z+16	; 0x10
    1dec:	b1 89       	ldd	r27, Z+17	; 0x11
    1dee:	08 17       	cp	r16, r24
    1df0:	19 07       	cpc	r17, r25
    1df2:	2a 07       	cpc	r18, r26
    1df4:	3b 07       	cpc	r19, r27
    1df6:	00 f5       	brcc	.+64     	; 0x1e38 <prvInsertTimerInActiveList+0x7e>
    1df8:	bf 01       	movw	r22, r30
    1dfa:	6e 5f       	subi	r22, 0xFE	; 254
    1dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfe:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <pxOverflowTimerList>
    1e02:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <pxOverflowTimerList+0x1>
    1e06:	0e 94 32 04 	call	0x864	; 0x864 <vListInsert>
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	18 c0       	rjmp	.+48     	; 0x1e3e <prvInsertTimerInActiveList+0x84>
    1e0e:	0c 15       	cp	r16, r12
    1e10:	1d 05       	cpc	r17, r13
    1e12:	2e 05       	cpc	r18, r14
    1e14:	3f 05       	cpc	r19, r15
    1e16:	28 f4       	brcc	.+10     	; 0x1e22 <prvInsertTimerInActiveList+0x68>
    1e18:	4c 15       	cp	r20, r12
    1e1a:	5d 05       	cpc	r21, r13
    1e1c:	6e 05       	cpc	r22, r14
    1e1e:	7f 05       	cpc	r23, r15
    1e20:	68 f4       	brcc	.+26     	; 0x1e3c <prvInsertTimerInActiveList+0x82>
    1e22:	bf 01       	movw	r22, r30
    1e24:	6e 5f       	subi	r22, 0xFE	; 254
    1e26:	7f 4f       	sbci	r23, 0xFF	; 255
    1e28:	80 91 9c 2c 	lds	r24, 0x2C9C	; 0x802c9c <pxCurrentTimerList>
    1e2c:	90 91 9d 2c 	lds	r25, 0x2C9D	; 0x802c9d <pxCurrentTimerList+0x1>
    1e30:	0e 94 32 04 	call	0x864	; 0x864 <vListInsert>
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	03 c0       	rjmp	.+6      	; 0x1e3e <prvInsertTimerInActiveList+0x84>
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <prvInsertTimerInActiveList+0x84>
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	1f 91       	pop	r17
    1e40:	0f 91       	pop	r16
    1e42:	ff 90       	pop	r15
    1e44:	ef 90       	pop	r14
    1e46:	df 90       	pop	r13
    1e48:	cf 90       	pop	r12
    1e4a:	08 95       	ret

00001e4c <prvCheckForValidListAndQueue>:
    1e4c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e50:	ff 93       	push	r31
    1e52:	f8 7f       	andi	r31, 0xF8	; 248
    1e54:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e58:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <xTimerQueue>
    1e5c:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <xTimerQueue+0x1>
    1e60:	89 2b       	or	r24, r25
    1e62:	e9 f4       	brne	.+58     	; 0x1e9e <prvCheckForValidListAndQueue+0x52>
    1e64:	89 ea       	ldi	r24, 0xA9	; 169
    1e66:	9c e2       	ldi	r25, 0x2C	; 44
    1e68:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <vListInitialise>
    1e6c:	8e e9       	ldi	r24, 0x9E	; 158
    1e6e:	9c e2       	ldi	r25, 0x2C	; 44
    1e70:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <vListInitialise>
    1e74:	89 ea       	ldi	r24, 0xA9	; 169
    1e76:	9c e2       	ldi	r25, 0x2C	; 44
    1e78:	80 93 9c 2c 	sts	0x2C9C, r24	; 0x802c9c <pxCurrentTimerList>
    1e7c:	90 93 9d 2c 	sts	0x2C9D, r25	; 0x802c9d <pxCurrentTimerList+0x1>
    1e80:	8e e9       	ldi	r24, 0x9E	; 158
    1e82:	9c e2       	ldi	r25, 0x2C	; 44
    1e84:	80 93 9a 2c 	sts	0x2C9A, r24	; 0x802c9a <pxOverflowTimerList>
    1e88:	90 93 9b 2c 	sts	0x2C9B, r25	; 0x802c9b <pxOverflowTimerList+0x1>
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	69 e0       	ldi	r22, 0x09	; 9
    1e90:	85 e0       	ldi	r24, 0x05	; 5
    1e92:	0e 94 5f 07 	call	0xebe	; 0xebe <xQueueGenericCreate>
    1e96:	80 93 98 2c 	sts	0x2C98, r24	; 0x802c98 <xTimerQueue>
    1e9a:	90 93 99 2c 	sts	0x2C99, r25	; 0x802c99 <xTimerQueue+0x1>
    1e9e:	ff 91       	pop	r31
    1ea0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ea4:	08 95       	ret

00001ea6 <xTimerCreateTimerTask>:
    1ea6:	ef 92       	push	r14
    1ea8:	ff 92       	push	r15
    1eaa:	0f 93       	push	r16
    1eac:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <prvCheckForValidListAndQueue>
    1eb0:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <xTimerQueue>
    1eb4:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <xTimerQueue+0x1>
    1eb8:	89 2b       	or	r24, r25
    1eba:	91 f0       	breq	.+36     	; 0x1ee0 <xTimerCreateTimerTask+0x3a>
    1ebc:	0f 2e       	mov	r0, r31
    1ebe:	f6 e9       	ldi	r31, 0x96	; 150
    1ec0:	ef 2e       	mov	r14, r31
    1ec2:	fc e2       	ldi	r31, 0x2C	; 44
    1ec4:	ff 2e       	mov	r15, r31
    1ec6:	f0 2d       	mov	r31, r0
    1ec8:	03 e0       	ldi	r16, 0x03	; 3
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	48 ec       	ldi	r20, 0xC8	; 200
    1ed0:	50 e0       	ldi	r21, 0x00	; 0
    1ed2:	69 e0       	ldi	r22, 0x09	; 9
    1ed4:	70 e2       	ldi	r23, 0x20	; 32
    1ed6:	86 e6       	ldi	r24, 0x66	; 102
    1ed8:	90 e1       	ldi	r25, 0x10	; 16
    1eda:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <xTaskCreate>
    1ede:	01 c0       	rjmp	.+2      	; 0x1ee2 <xTimerCreateTimerTask+0x3c>
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	0f 91       	pop	r16
    1ee4:	ff 90       	pop	r15
    1ee6:	ef 90       	pop	r14
    1ee8:	08 95       	ret

00001eea <xTimerGenericCommand>:
    1eea:	8f 92       	push	r8
    1eec:	9f 92       	push	r9
    1eee:	af 92       	push	r10
    1ef0:	bf 92       	push	r11
    1ef2:	cf 92       	push	r12
    1ef4:	df 92       	push	r13
    1ef6:	ef 92       	push	r14
    1ef8:	ff 92       	push	r15
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	29 97       	sbiw	r28, 0x09	; 9
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <xTimerQueue>
    1f10:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <xTimerQueue+0x1>
    1f14:	30 97       	sbiw	r30, 0x00	; 0
    1f16:	89 f1       	breq	.+98     	; 0x1f7a <xTimerGenericCommand+0x90>
    1f18:	69 83       	std	Y+1, r22	; 0x01
    1f1a:	2a 83       	std	Y+2, r18	; 0x02
    1f1c:	3b 83       	std	Y+3, r19	; 0x03
    1f1e:	4c 83       	std	Y+4, r20	; 0x04
    1f20:	5d 83       	std	Y+5, r21	; 0x05
    1f22:	8e 83       	std	Y+6, r24	; 0x06
    1f24:	9f 83       	std	Y+7, r25	; 0x07
    1f26:	66 30       	cpi	r22, 0x06	; 6
    1f28:	fc f4       	brge	.+62     	; 0x1f68 <xTimerGenericCommand+0x7e>
    1f2a:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <xTaskGetSchedulerState>
    1f2e:	82 30       	cpi	r24, 0x02	; 2
    1f30:	69 f4       	brne	.+26     	; 0x1f4c <xTimerGenericCommand+0x62>
    1f32:	00 e0       	ldi	r16, 0x00	; 0
    1f34:	a7 01       	movw	r20, r14
    1f36:	96 01       	movw	r18, r12
    1f38:	be 01       	movw	r22, r28
    1f3a:	6f 5f       	subi	r22, 0xFF	; 255
    1f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3e:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <xTimerQueue>
    1f42:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <xTimerQueue+0x1>
    1f46:	0e 94 90 07 	call	0xf20	; 0xf20 <xQueueGenericSend>
    1f4a:	18 c0       	rjmp	.+48     	; 0x1f7c <xTimerGenericCommand+0x92>
    1f4c:	00 e0       	ldi	r16, 0x00	; 0
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	a9 01       	movw	r20, r18
    1f54:	be 01       	movw	r22, r28
    1f56:	6f 5f       	subi	r22, 0xFF	; 255
    1f58:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5a:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <xTimerQueue>
    1f5e:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <xTimerQueue+0x1>
    1f62:	0e 94 90 07 	call	0xf20	; 0xf20 <xQueueGenericSend>
    1f66:	0a c0       	rjmp	.+20     	; 0x1f7c <xTimerGenericCommand+0x92>
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	a8 01       	movw	r20, r16
    1f6c:	be 01       	movw	r22, r28
    1f6e:	6f 5f       	subi	r22, 0xFF	; 255
    1f70:	7f 4f       	sbci	r23, 0xFF	; 255
    1f72:	cf 01       	movw	r24, r30
    1f74:	0e 94 36 08 	call	0x106c	; 0x106c <xQueueGenericSendFromISR>
    1f78:	01 c0       	rjmp	.+2      	; 0x1f7c <xTimerGenericCommand+0x92>
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	29 96       	adiw	r28, 0x09	; 9
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	1f 91       	pop	r17
    1f88:	0f 91       	pop	r16
    1f8a:	ff 90       	pop	r15
    1f8c:	ef 90       	pop	r14
    1f8e:	df 90       	pop	r13
    1f90:	cf 90       	pop	r12
    1f92:	bf 90       	pop	r11
    1f94:	af 90       	pop	r10
    1f96:	9f 90       	pop	r9
    1f98:	8f 90       	pop	r8
    1f9a:	08 95       	ret

00001f9c <prvSampleTimeNow>:
    1f9c:	2f 92       	push	r2
    1f9e:	3f 92       	push	r3
    1fa0:	4f 92       	push	r4
    1fa2:	5f 92       	push	r5
    1fa4:	6f 92       	push	r6
    1fa6:	7f 92       	push	r7
    1fa8:	8f 92       	push	r8
    1faa:	9f 92       	push	r9
    1fac:	af 92       	push	r10
    1fae:	bf 92       	push	r11
    1fb0:	cf 92       	push	r12
    1fb2:	df 92       	push	r13
    1fb4:	ef 92       	push	r14
    1fb6:	ff 92       	push	r15
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	1c 01       	movw	r2, r24
    1fc2:	0e 94 4f 0b 	call	0x169e	; 0x169e <xTaskGetTickCount>
    1fc6:	2b 01       	movw	r4, r22
    1fc8:	3c 01       	movw	r6, r24
    1fca:	80 91 92 2c 	lds	r24, 0x2C92	; 0x802c92 <xLastTime.4745>
    1fce:	90 91 93 2c 	lds	r25, 0x2C93	; 0x802c93 <xLastTime.4745+0x1>
    1fd2:	a0 91 94 2c 	lds	r26, 0x2C94	; 0x802c94 <xLastTime.4745+0x2>
    1fd6:	b0 91 95 2c 	lds	r27, 0x2C95	; 0x802c95 <xLastTime.4745+0x3>
    1fda:	48 16       	cp	r4, r24
    1fdc:	59 06       	cpc	r5, r25
    1fde:	6a 06       	cpc	r6, r26
    1fe0:	7b 06       	cpc	r7, r27
    1fe2:	08 f0       	brcs	.+2      	; 0x1fe6 <prvSampleTimeNow+0x4a>
    1fe4:	54 c0       	rjmp	.+168    	; 0x208e <prvSampleTimeNow+0xf2>
    1fe6:	3c c0       	rjmp	.+120    	; 0x2060 <prvSampleTimeNow+0xc4>
    1fe8:	07 80       	ldd	r0, Z+7	; 0x07
    1fea:	f0 85       	ldd	r31, Z+8	; 0x08
    1fec:	e0 2d       	mov	r30, r0
    1fee:	80 80       	ld	r8, Z
    1ff0:	91 80       	ldd	r9, Z+1	; 0x01
    1ff2:	a2 80       	ldd	r10, Z+2	; 0x02
    1ff4:	b3 80       	ldd	r11, Z+3	; 0x03
    1ff6:	c0 85       	ldd	r28, Z+8	; 0x08
    1ff8:	d1 85       	ldd	r29, Z+9	; 0x09
    1ffa:	8e 01       	movw	r16, r28
    1ffc:	0e 5f       	subi	r16, 0xFE	; 254
    1ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    2000:	c8 01       	movw	r24, r16
    2002:	0e 94 6f 04 	call	0x8de	; 0x8de <uxListRemove>
    2006:	ed 89       	ldd	r30, Y+21	; 0x15
    2008:	fe 89       	ldd	r31, Y+22	; 0x16
    200a:	ce 01       	movw	r24, r28
    200c:	19 95       	eicall
    200e:	8a 89       	ldd	r24, Y+18	; 0x12
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	31 f5       	brne	.+76     	; 0x2060 <prvSampleTimeNow+0xc4>
    2014:	8e 85       	ldd	r24, Y+14	; 0x0e
    2016:	9f 85       	ldd	r25, Y+15	; 0x0f
    2018:	a8 89       	ldd	r26, Y+16	; 0x10
    201a:	b9 89       	ldd	r27, Y+17	; 0x11
    201c:	88 0d       	add	r24, r8
    201e:	99 1d       	adc	r25, r9
    2020:	aa 1d       	adc	r26, r10
    2022:	bb 1d       	adc	r27, r11
    2024:	88 16       	cp	r8, r24
    2026:	99 06       	cpc	r9, r25
    2028:	aa 06       	cpc	r10, r26
    202a:	bb 06       	cpc	r11, r27
    202c:	70 f4       	brcc	.+28     	; 0x204a <prvSampleTimeNow+0xae>
    202e:	8a 83       	std	Y+2, r24	; 0x02
    2030:	9b 83       	std	Y+3, r25	; 0x03
    2032:	ac 83       	std	Y+4, r26	; 0x04
    2034:	bd 83       	std	Y+5, r27	; 0x05
    2036:	ca 87       	std	Y+10, r28	; 0x0a
    2038:	db 87       	std	Y+11, r29	; 0x0b
    203a:	b8 01       	movw	r22, r16
    203c:	80 91 9c 2c 	lds	r24, 0x2C9C	; 0x802c9c <pxCurrentTimerList>
    2040:	90 91 9d 2c 	lds	r25, 0x2C9D	; 0x802c9d <pxCurrentTimerList+0x1>
    2044:	0e 94 32 04 	call	0x864	; 0x864 <vListInsert>
    2048:	0b c0       	rjmp	.+22     	; 0x2060 <prvSampleTimeNow+0xc4>
    204a:	c1 2c       	mov	r12, r1
    204c:	d1 2c       	mov	r13, r1
    204e:	76 01       	movw	r14, r12
    2050:	00 e0       	ldi	r16, 0x00	; 0
    2052:	10 e0       	ldi	r17, 0x00	; 0
    2054:	a5 01       	movw	r20, r10
    2056:	94 01       	movw	r18, r8
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	ce 01       	movw	r24, r28
    205c:	0e 94 75 0f 	call	0x1eea	; 0x1eea <xTimerGenericCommand>
    2060:	e0 91 9c 2c 	lds	r30, 0x2C9C	; 0x802c9c <pxCurrentTimerList>
    2064:	f0 91 9d 2c 	lds	r31, 0x2C9D	; 0x802c9d <pxCurrentTimerList+0x1>
    2068:	80 81       	ld	r24, Z
    206a:	81 11       	cpse	r24, r1
    206c:	bd cf       	rjmp	.-134    	; 0x1fe8 <prvSampleTimeNow+0x4c>
    206e:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <pxOverflowTimerList>
    2072:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <pxOverflowTimerList+0x1>
    2076:	80 93 9c 2c 	sts	0x2C9C, r24	; 0x802c9c <pxCurrentTimerList>
    207a:	90 93 9d 2c 	sts	0x2C9D, r25	; 0x802c9d <pxCurrentTimerList+0x1>
    207e:	e0 93 9a 2c 	sts	0x2C9A, r30	; 0x802c9a <pxOverflowTimerList>
    2082:	f0 93 9b 2c 	sts	0x2C9B, r31	; 0x802c9b <pxOverflowTimerList+0x1>
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	f1 01       	movw	r30, r2
    208a:	80 83       	st	Z, r24
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <prvSampleTimeNow+0xf6>
    208e:	f1 01       	movw	r30, r2
    2090:	10 82       	st	Z, r1
    2092:	40 92 92 2c 	sts	0x2C92, r4	; 0x802c92 <xLastTime.4745>
    2096:	50 92 93 2c 	sts	0x2C93, r5	; 0x802c93 <xLastTime.4745+0x1>
    209a:	60 92 94 2c 	sts	0x2C94, r6	; 0x802c94 <xLastTime.4745+0x2>
    209e:	70 92 95 2c 	sts	0x2C95, r7	; 0x802c95 <xLastTime.4745+0x3>
    20a2:	c3 01       	movw	r24, r6
    20a4:	b2 01       	movw	r22, r4
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	1f 91       	pop	r17
    20ac:	0f 91       	pop	r16
    20ae:	ff 90       	pop	r15
    20b0:	ef 90       	pop	r14
    20b2:	df 90       	pop	r13
    20b4:	cf 90       	pop	r12
    20b6:	bf 90       	pop	r11
    20b8:	af 90       	pop	r10
    20ba:	9f 90       	pop	r9
    20bc:	8f 90       	pop	r8
    20be:	7f 90       	pop	r7
    20c0:	6f 90       	pop	r6
    20c2:	5f 90       	pop	r5
    20c4:	4f 90       	pop	r4
    20c6:	3f 90       	pop	r3
    20c8:	2f 90       	pop	r2
    20ca:	08 95       	ret

000020cc <prvTimerTask>:
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	2e 97       	sbiw	r28, 0x0e	; 14
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	ce 01       	movw	r24, r28
    20dc:	01 96       	adiw	r24, 0x01	; 1
    20de:	1c 01       	movw	r2, r24
    20e0:	a8 2e       	mov	r10, r24
    20e2:	b3 2c       	mov	r11, r3
    20e4:	e0 91 9c 2c 	lds	r30, 0x2C9C	; 0x802c9c <pxCurrentTimerList>
    20e8:	f0 91 9d 2c 	lds	r31, 0x2C9D	; 0x802c9d <pxCurrentTimerList+0x1>
    20ec:	80 81       	ld	r24, Z
    20ee:	88 23       	and	r24, r24
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <prvTimerTask+0x28>
    20f2:	03 c1       	rjmp	.+518    	; 0x22fa <prvTimerTask+0x22e>
    20f4:	07 80       	ldd	r0, Z+7	; 0x07
    20f6:	f0 85       	ldd	r31, Z+8	; 0x08
    20f8:	e0 2d       	mov	r30, r0
    20fa:	40 80       	ld	r4, Z
    20fc:	51 80       	ldd	r5, Z+1	; 0x01
    20fe:	62 80       	ldd	r6, Z+2	; 0x02
    2100:	73 80       	ldd	r7, Z+3	; 0x03
    2102:	0e 94 49 0b 	call	0x1692	; 0x1692 <vTaskSuspendAll>
    2106:	c1 01       	movw	r24, r2
    2108:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <prvSampleTimeNow>
    210c:	6b 87       	std	Y+11, r22	; 0x0b
    210e:	7c 87       	std	Y+12, r23	; 0x0c
    2110:	8d 87       	std	Y+13, r24	; 0x0d
    2112:	9e 87       	std	Y+14, r25	; 0x0e
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	81 11       	cpse	r24, r1
    2118:	5e c0       	rjmp	.+188    	; 0x21d6 <prvTimerTask+0x10a>
    211a:	8b 85       	ldd	r24, Y+11	; 0x0b
    211c:	9c 85       	ldd	r25, Y+12	; 0x0c
    211e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2120:	be 85       	ldd	r27, Y+14	; 0x0e
    2122:	84 15       	cp	r24, r4
    2124:	95 05       	cpc	r25, r5
    2126:	a6 05       	cpc	r26, r6
    2128:	b7 05       	cpc	r27, r7
    212a:	e8 f1       	brcs	.+122    	; 0x21a6 <prvTimerTask+0xda>
    212c:	0e 94 34 0c 	call	0x1868	; 0x1868 <xTaskResumeAll>
    2130:	e0 91 9c 2c 	lds	r30, 0x2C9C	; 0x802c9c <pxCurrentTimerList>
    2134:	f0 91 9d 2c 	lds	r31, 0x2C9D	; 0x802c9d <pxCurrentTimerList+0x1>
    2138:	07 80       	ldd	r0, Z+7	; 0x07
    213a:	f0 85       	ldd	r31, Z+8	; 0x08
    213c:	e0 2d       	mov	r30, r0
    213e:	80 84       	ldd	r8, Z+8	; 0x08
    2140:	91 84       	ldd	r9, Z+9	; 0x09
    2142:	c4 01       	movw	r24, r8
    2144:	02 96       	adiw	r24, 0x02	; 2
    2146:	0e 94 6f 04 	call	0x8de	; 0x8de <uxListRemove>
    214a:	d4 01       	movw	r26, r8
    214c:	52 96       	adiw	r26, 0x12	; 18
    214e:	8c 91       	ld	r24, X
    2150:	52 97       	sbiw	r26, 0x12	; 18
    2152:	81 30       	cpi	r24, 0x01	; 1
    2154:	01 f5       	brne	.+64     	; 0x2196 <prvTimerTask+0xca>
    2156:	1e 96       	adiw	r26, 0x0e	; 14
    2158:	4d 91       	ld	r20, X+
    215a:	5d 91       	ld	r21, X+
    215c:	6d 91       	ld	r22, X+
    215e:	7c 91       	ld	r23, X
    2160:	51 97       	sbiw	r26, 0x11	; 17
    2162:	44 0d       	add	r20, r4
    2164:	55 1d       	adc	r21, r5
    2166:	66 1d       	adc	r22, r6
    2168:	77 1d       	adc	r23, r7
    216a:	73 01       	movw	r14, r6
    216c:	62 01       	movw	r12, r4
    216e:	0b 85       	ldd	r16, Y+11	; 0x0b
    2170:	1c 85       	ldd	r17, Y+12	; 0x0c
    2172:	2d 85       	ldd	r18, Y+13	; 0x0d
    2174:	3e 85       	ldd	r19, Y+14	; 0x0e
    2176:	c4 01       	movw	r24, r8
    2178:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <prvInsertTimerInActiveList>
    217c:	88 23       	and	r24, r24
    217e:	59 f0       	breq	.+22     	; 0x2196 <prvTimerTask+0xca>
    2180:	c1 2c       	mov	r12, r1
    2182:	d1 2c       	mov	r13, r1
    2184:	76 01       	movw	r14, r12
    2186:	00 e0       	ldi	r16, 0x00	; 0
    2188:	10 e0       	ldi	r17, 0x00	; 0
    218a:	a3 01       	movw	r20, r6
    218c:	92 01       	movw	r18, r4
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	c4 01       	movw	r24, r8
    2192:	0e 94 75 0f 	call	0x1eea	; 0x1eea <xTimerGenericCommand>
    2196:	d4 01       	movw	r26, r8
    2198:	55 96       	adiw	r26, 0x15	; 21
    219a:	ed 91       	ld	r30, X+
    219c:	fc 91       	ld	r31, X
    219e:	56 97       	sbiw	r26, 0x16	; 22
    21a0:	c4 01       	movw	r24, r8
    21a2:	19 95       	eicall
    21a4:	9c c0       	rjmp	.+312    	; 0x22de <prvTimerTask+0x212>
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	b3 01       	movw	r22, r6
    21aa:	a2 01       	movw	r20, r4
    21ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    21ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    21b0:	ad 85       	ldd	r26, Y+13	; 0x0d
    21b2:	be 85       	ldd	r27, Y+14	; 0x0e
    21b4:	48 1b       	sub	r20, r24
    21b6:	59 0b       	sbc	r21, r25
    21b8:	6a 0b       	sbc	r22, r26
    21ba:	7b 0b       	sbc	r23, r27
    21bc:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <xTimerQueue>
    21c0:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <xTimerQueue+0x1>
    21c4:	0e 94 2d 09 	call	0x125a	; 0x125a <vQueueWaitForMessageRestricted>
    21c8:	0e 94 34 0c 	call	0x1868	; 0x1868 <xTaskResumeAll>
    21cc:	81 11       	cpse	r24, r1
    21ce:	87 c0       	rjmp	.+270    	; 0x22de <prvTimerTask+0x212>
    21d0:	0e 94 5a 05 	call	0xab4	; 0xab4 <vPortYield>
    21d4:	84 c0       	rjmp	.+264    	; 0x22de <prvTimerTask+0x212>
    21d6:	0e 94 34 0c 	call	0x1868	; 0x1868 <xTaskResumeAll>
    21da:	81 c0       	rjmp	.+258    	; 0x22de <prvTimerTask+0x212>
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	88 23       	and	r24, r24
    21e0:	6c f4       	brge	.+26     	; 0x21fc <prvTimerTask+0x130>
    21e2:	4e 81       	ldd	r20, Y+6	; 0x06
    21e4:	5f 81       	ldd	r21, Y+7	; 0x07
    21e6:	68 85       	ldd	r22, Y+8	; 0x08
    21e8:	79 85       	ldd	r23, Y+9	; 0x09
    21ea:	ea 81       	ldd	r30, Y+2	; 0x02
    21ec:	fb 81       	ldd	r31, Y+3	; 0x03
    21ee:	8c 81       	ldd	r24, Y+4	; 0x04
    21f0:	9d 81       	ldd	r25, Y+5	; 0x05
    21f2:	19 95       	eicall
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	88 23       	and	r24, r24
    21f8:	0c f4       	brge	.+2      	; 0x21fc <prvTimerTask+0x130>
    21fa:	71 c0       	rjmp	.+226    	; 0x22de <prvTimerTask+0x212>
    21fc:	8e 80       	ldd	r8, Y+6	; 0x06
    21fe:	9f 80       	ldd	r9, Y+7	; 0x07
    2200:	d4 01       	movw	r26, r8
    2202:	1c 96       	adiw	r26, 0x0c	; 12
    2204:	8d 91       	ld	r24, X+
    2206:	9c 91       	ld	r25, X
    2208:	1d 97       	sbiw	r26, 0x0d	; 13
    220a:	89 2b       	or	r24, r25
    220c:	21 f0       	breq	.+8      	; 0x2216 <prvTimerTask+0x14a>
    220e:	c4 01       	movw	r24, r8
    2210:	02 96       	adiw	r24, 0x02	; 2
    2212:	0e 94 6f 04 	call	0x8de	; 0x8de <uxListRemove>
    2216:	ce 01       	movw	r24, r28
    2218:	0a 96       	adiw	r24, 0x0a	; 10
    221a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <prvSampleTimeNow>
    221e:	8b 01       	movw	r16, r22
    2220:	9c 01       	movw	r18, r24
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	08 2e       	mov	r0, r24
    2226:	00 0c       	add	r0, r0
    2228:	99 0b       	sbc	r25, r25
    222a:	aa 0b       	sbc	r26, r26
    222c:	bb 0b       	sbc	r27, r27
    222e:	8a 30       	cpi	r24, 0x0A	; 10
    2230:	91 05       	cpc	r25, r1
    2232:	08 f0       	brcs	.+2      	; 0x2236 <prvTimerTask+0x16a>
    2234:	54 c0       	rjmp	.+168    	; 0x22de <prvTimerTask+0x212>
    2236:	fc 01       	movw	r30, r24
    2238:	88 27       	eor	r24, r24
    223a:	e2 50       	subi	r30, 0x02	; 2
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	8f 4f       	sbci	r24, 0xFF	; 255
    2240:	0c 94 72 1f 	jmp	0x3ee4	; 0x3ee4 <__tablejump2__>
    2244:	ca 80       	ldd	r12, Y+2	; 0x02
    2246:	db 80       	ldd	r13, Y+3	; 0x03
    2248:	ec 80       	ldd	r14, Y+4	; 0x04
    224a:	fd 80       	ldd	r15, Y+5	; 0x05
    224c:	f4 01       	movw	r30, r8
    224e:	46 85       	ldd	r20, Z+14	; 0x0e
    2250:	57 85       	ldd	r21, Z+15	; 0x0f
    2252:	60 89       	ldd	r22, Z+16	; 0x10
    2254:	71 89       	ldd	r23, Z+17	; 0x11
    2256:	4c 0d       	add	r20, r12
    2258:	5d 1d       	adc	r21, r13
    225a:	6e 1d       	adc	r22, r14
    225c:	7f 1d       	adc	r23, r15
    225e:	c4 01       	movw	r24, r8
    2260:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <prvInsertTimerInActiveList>
    2264:	88 23       	and	r24, r24
    2266:	d9 f1       	breq	.+118    	; 0x22de <prvTimerTask+0x212>
    2268:	d4 01       	movw	r26, r8
    226a:	55 96       	adiw	r26, 0x15	; 21
    226c:	ed 91       	ld	r30, X+
    226e:	fc 91       	ld	r31, X
    2270:	56 97       	sbiw	r26, 0x16	; 22
    2272:	c4 01       	movw	r24, r8
    2274:	19 95       	eicall
    2276:	f4 01       	movw	r30, r8
    2278:	82 89       	ldd	r24, Z+18	; 0x12
    227a:	81 30       	cpi	r24, 0x01	; 1
    227c:	81 f5       	brne	.+96     	; 0x22de <prvTimerTask+0x212>
    227e:	4a 81       	ldd	r20, Y+2	; 0x02
    2280:	5b 81       	ldd	r21, Y+3	; 0x03
    2282:	6c 81       	ldd	r22, Y+4	; 0x04
    2284:	7d 81       	ldd	r23, Y+5	; 0x05
    2286:	86 85       	ldd	r24, Z+14	; 0x0e
    2288:	97 85       	ldd	r25, Z+15	; 0x0f
    228a:	a0 89       	ldd	r26, Z+16	; 0x10
    228c:	b1 89       	ldd	r27, Z+17	; 0x11
    228e:	9a 01       	movw	r18, r20
    2290:	ab 01       	movw	r20, r22
    2292:	28 0f       	add	r18, r24
    2294:	39 1f       	adc	r19, r25
    2296:	4a 1f       	adc	r20, r26
    2298:	5b 1f       	adc	r21, r27
    229a:	c1 2c       	mov	r12, r1
    229c:	d1 2c       	mov	r13, r1
    229e:	76 01       	movw	r14, r12
    22a0:	00 e0       	ldi	r16, 0x00	; 0
    22a2:	10 e0       	ldi	r17, 0x00	; 0
    22a4:	60 e0       	ldi	r22, 0x00	; 0
    22a6:	c4 01       	movw	r24, r8
    22a8:	0e 94 75 0f 	call	0x1eea	; 0x1eea <xTimerGenericCommand>
    22ac:	18 c0       	rjmp	.+48     	; 0x22de <prvTimerTask+0x212>
    22ae:	4a 81       	ldd	r20, Y+2	; 0x02
    22b0:	5b 81       	ldd	r21, Y+3	; 0x03
    22b2:	6c 81       	ldd	r22, Y+4	; 0x04
    22b4:	7d 81       	ldd	r23, Y+5	; 0x05
    22b6:	d4 01       	movw	r26, r8
    22b8:	1e 96       	adiw	r26, 0x0e	; 14
    22ba:	4d 93       	st	X+, r20
    22bc:	5d 93       	st	X+, r21
    22be:	6d 93       	st	X+, r22
    22c0:	7c 93       	st	X, r23
    22c2:	51 97       	sbiw	r26, 0x11	; 17
    22c4:	40 0f       	add	r20, r16
    22c6:	51 1f       	adc	r21, r17
    22c8:	62 1f       	adc	r22, r18
    22ca:	73 1f       	adc	r23, r19
    22cc:	68 01       	movw	r12, r16
    22ce:	79 01       	movw	r14, r18
    22d0:	c4 01       	movw	r24, r8
    22d2:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <prvInsertTimerInActiveList>
    22d6:	03 c0       	rjmp	.+6      	; 0x22de <prvTimerTask+0x212>
    22d8:	c4 01       	movw	r24, r8
    22da:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <vPortFree>
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	a9 01       	movw	r20, r18
    22e4:	6a 2d       	mov	r22, r10
    22e6:	7b 2d       	mov	r23, r11
    22e8:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <xTimerQueue>
    22ec:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <xTimerQueue+0x1>
    22f0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <xQueueReceive>
    22f4:	81 11       	cpse	r24, r1
    22f6:	72 cf       	rjmp	.-284    	; 0x21dc <prvTimerTask+0x110>
    22f8:	f5 ce       	rjmp	.-534    	; 0x20e4 <prvTimerTask+0x18>
    22fa:	0e 94 49 0b 	call	0x1692	; 0x1692 <vTaskSuspendAll>
    22fe:	c1 01       	movw	r24, r2
    2300:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <prvSampleTimeNow>
    2304:	6b 87       	std	Y+11, r22	; 0x0b
    2306:	7c 87       	std	Y+12, r23	; 0x0c
    2308:	8d 87       	std	Y+13, r24	; 0x0d
    230a:	9e 87       	std	Y+14, r25	; 0x0e
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	81 11       	cpse	r24, r1
    2310:	62 cf       	rjmp	.-316    	; 0x21d6 <prvTimerTask+0x10a>
    2312:	e0 91 9a 2c 	lds	r30, 0x2C9A	; 0x802c9a <pxOverflowTimerList>
    2316:	f0 91 9b 2c 	lds	r31, 0x2C9B	; 0x802c9b <pxOverflowTimerList+0x1>
    231a:	80 81       	ld	r24, Z
    231c:	21 e0       	ldi	r18, 0x01	; 1
    231e:	81 11       	cpse	r24, r1
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	41 2c       	mov	r4, r1
    2324:	51 2c       	mov	r5, r1
    2326:	32 01       	movw	r6, r4
    2328:	3f cf       	rjmp	.-386    	; 0x21a8 <prvTimerTask+0xdc>

0000232a <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    232a:	0f 93       	push	r16
    232c:	1f 93       	push	r17
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	29 97       	sbiw	r28, 0x09	; 9
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    233c:	ee ef       	ldi	r30, 0xFE	; 254
    233e:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    2340:	8a 83       	std	Y+2, r24	; 0x02
    2342:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    2344:	6c 83       	std	Y+4, r22	; 0x04
    2346:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    2348:	2e 83       	std	Y+6, r18	; 0x06
    234a:	3f 83       	std	Y+7, r19	; 0x07
    234c:	48 87       	std	Y+8, r20	; 0x08
    234e:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	a8 01       	movw	r20, r16
    2354:	be 01       	movw	r22, r28
    2356:	6f 5f       	subi	r22, 0xFF	; 255
    2358:	7f 4f       	sbci	r23, 0xFF	; 255
    235a:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <xTimerQueue>
    235e:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <xTimerQueue+0x1>
    2362:	0e 94 36 08 	call	0x106c	; 0x106c <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    2366:	29 96       	adiw	r28, 0x09	; 9
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	1f 91       	pop	r17
    2372:	0f 91       	pop	r16
    2374:	08 95       	ret

00002376 <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    2376:	e0 e5       	ldi	r30, 0x50	; 80
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	81 60       	ori	r24, 0x01	; 1
    237e:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    2380:	81 81       	ldd	r24, Z+1	; 0x01
    2382:	80 ff       	sbrs	r24, 0
    2384:	fd cf       	rjmp	.-6      	; 0x2380 <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	0e 94 07 02 	call	0x40e	; 0x40e <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    238c:	8e e1       	ldi	r24, 0x1E	; 30
    238e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	0e 94 01 02 	call	0x402	; 0x402 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    239a:	43 e0       	ldi	r20, 0x03	; 3
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	80 e4       	ldi	r24, 0x40	; 64
    23a0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    23a4:	e0 e5       	ldi	r30, 0x50	; 80
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	88 60       	ori	r24, 0x08	; 8
    23ac:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    23ae:	81 81       	ldd	r24, Z+1	; 0x01
    23b0:	83 ff       	sbrs	r24, 3
    23b2:	fd cf       	rjmp	.-6      	; 0x23ae <vInitClock+0x38>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    23b4:	64 e0       	ldi	r22, 0x04	; 4
    23b6:	80 ec       	ldi	r24, 0xC0	; 192
    23b8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    23bc:	e0 e5       	ldi	r30, 0x50	; 80
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	80 61       	ori	r24, 0x10	; 16
    23c4:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	0e 94 01 02 	call	0x402	; 0x402 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    23ce:	e0 e5       	ldi	r30, 0x50	; 80
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	81 81       	ldd	r24, Z+1	; 0x01
    23d4:	84 ff       	sbrs	r24, 4
    23d6:	fd cf       	rjmp	.-6      	; 0x23d2 <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    23d8:	84 e0       	ldi	r24, 0x04	; 4
    23da:	0e 94 07 02 	call	0x40e	; 0x40e <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    23de:	87 e0       	ldi	r24, 0x07	; 7
    23e0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CLKSYS_Disable>
    23e4:	08 95       	ret

000023e6 <vInterface>:
void vInterface(void *pvParameters) {
	for(;;) {	
		initButtons();
		vTaskDelay(500);
		if (CALC_DONE_EVENT) {
			vDisplayWriteStringAtPos(1, 0, "Iterations: %d", i);
    23e6:	01 e1       	ldi	r16, 0x11	; 17
    23e8:	10 e2       	ldi	r17, 0x20	; 32
    23ea:	ee 24       	eor	r14, r14
    23ec:	e3 94       	inc	r14
			vDisplayWriteStringAtPos(2, 0, "Pi Value:");
    23ee:	c0 e2       	ldi	r28, 0x20	; 32
    23f0:	d0 e2       	ldi	r29, 0x20	; 32
    23f2:	68 94       	set
    23f4:	ff 24       	eor	r15, r15
    23f6:	f1 f8       	bld	r15, 1
	return 0;
}
	
void vInterface(void *pvParameters) {
	for(;;) {	
		initButtons();
    23f8:	0e 94 c8 01 	call	0x390	; 0x390 <initButtons>
		vTaskDelay(500);
    23fc:	64 ef       	ldi	r22, 0xF4	; 244
    23fe:	71 e0       	ldi	r23, 0x01	; 1
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	0e 94 b6 0c 	call	0x196c	; 0x196c <vTaskDelay>
		if (CALC_DONE_EVENT) {
			vDisplayWriteStringAtPos(1, 0, "Iterations: %d", i);
    2408:	80 91 bb 2c 	lds	r24, 0x2CBB	; 0x802cbb <i+0x7>
    240c:	8f 93       	push	r24
    240e:	80 91 ba 2c 	lds	r24, 0x2CBA	; 0x802cba <i+0x6>
    2412:	8f 93       	push	r24
    2414:	80 91 b9 2c 	lds	r24, 0x2CB9	; 0x802cb9 <i+0x5>
    2418:	8f 93       	push	r24
    241a:	80 91 b8 2c 	lds	r24, 0x2CB8	; 0x802cb8 <i+0x4>
    241e:	8f 93       	push	r24
    2420:	80 91 b7 2c 	lds	r24, 0x2CB7	; 0x802cb7 <i+0x3>
    2424:	8f 93       	push	r24
    2426:	80 91 b6 2c 	lds	r24, 0x2CB6	; 0x802cb6 <i+0x2>
    242a:	8f 93       	push	r24
    242c:	80 91 b5 2c 	lds	r24, 0x2CB5	; 0x802cb5 <i+0x1>
    2430:	8f 93       	push	r24
    2432:	80 91 b4 2c 	lds	r24, 0x2CB4	; 0x802cb4 <i>
    2436:	8f 93       	push	r24
    2438:	1f 93       	push	r17
    243a:	0f 93       	push	r16
    243c:	1f 92       	push	r1
    243e:	1f 92       	push	r1
    2440:	1f 92       	push	r1
    2442:	ef 92       	push	r14
    2444:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <vDisplayWriteStringAtPos>
			vDisplayWriteStringAtPos(2, 0, "Pi Value:");
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	1f 92       	push	r1
    244e:	1f 92       	push	r1
    2450:	1f 92       	push	r1
    2452:	ff 92       	push	r15
    2454:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <vDisplayWriteStringAtPos>
		}
		xEventGroupClearBits(calcEventGroup, CALC_DONE_EVENT);
    2458:	41 e0       	ldi	r20, 0x01	; 1
    245a:	50 e0       	ldi	r21, 0x00	; 0
    245c:	60 e0       	ldi	r22, 0x00	; 0
    245e:	70 e0       	ldi	r23, 0x00	; 0
    2460:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <calcEventGroup>
    2464:	90 91 e6 2c 	lds	r25, 0x2CE6	; 0x802ce6 <calcEventGroup+0x1>
    2468:	0e 94 12 03 	call	0x624	; 0x624 <xEventGroupClearBits>
    246c:	8d b7       	in	r24, 0x3d	; 61
    246e:	9e b7       	in	r25, 0x3e	; 62
    2470:	44 96       	adiw	r24, 0x14	; 20
    2472:	8d bf       	out	0x3d, r24	; 61
    2474:	9e bf       	out	0x3e, r25	; 62
    2476:	c0 cf       	rjmp	.-128    	; 0x23f8 <vInterface+0x12>

00002478 <vCalculation>:
	}
}

void vCalculation(void *pvParameters) {
	for (;;) {	
		for (i=0; i<=1e6; i++) {
    2478:	10 92 b4 2c 	sts	0x2CB4, r1	; 0x802cb4 <i>
    247c:	10 92 b5 2c 	sts	0x2CB5, r1	; 0x802cb5 <i+0x1>
    2480:	10 92 b6 2c 	sts	0x2CB6, r1	; 0x802cb6 <i+0x2>
    2484:	10 92 b7 2c 	sts	0x2CB7, r1	; 0x802cb7 <i+0x3>
    2488:	10 92 b8 2c 	sts	0x2CB8, r1	; 0x802cb8 <i+0x4>
    248c:	10 92 b9 2c 	sts	0x2CB9, r1	; 0x802cb9 <i+0x5>
    2490:	10 92 ba 2c 	sts	0x2CBA, r1	; 0x802cba <i+0x6>
    2494:	10 92 bb 2c 	sts	0x2CBB, r1	; 0x802cbb <i+0x7>
    2498:	c1 2c       	mov	r12, r1
    249a:	d1 2c       	mov	r13, r1
    249c:	e1 2c       	mov	r14, r1
    249e:	f1 2c       	mov	r15, r1
    24a0:	00 e0       	ldi	r16, 0x00	; 0
    24a2:	10 e0       	ldi	r17, 0x00	; 0
    24a4:	d0 e0       	ldi	r29, 0x00	; 0
    24a6:	c0 e0       	ldi	r28, 0x00	; 0
			dPi4 = dPi4 - 1.0/(3+i*4) + 1.0/(5+i*4);
    24a8:	2c 2d       	mov	r18, r12
    24aa:	3d 2d       	mov	r19, r13
    24ac:	4e 2d       	mov	r20, r14
    24ae:	5f 2d       	mov	r21, r15
    24b0:	60 2f       	mov	r22, r16
    24b2:	71 2f       	mov	r23, r17
    24b4:	8d 2f       	mov	r24, r29
    24b6:	9c 2f       	mov	r25, r28
    24b8:	02 e0       	ldi	r16, 0x02	; 2
    24ba:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__ashldi3>
    24be:	c2 2e       	mov	r12, r18
    24c0:	d3 2e       	mov	r13, r19
    24c2:	e4 2e       	mov	r14, r20
    24c4:	f5 2e       	mov	r15, r21
    24c6:	06 2f       	mov	r16, r22
    24c8:	17 2f       	mov	r17, r23
    24ca:	d8 2f       	mov	r29, r24
    24cc:	c9 2f       	mov	r28, r25
			dPi4 *= 4; //To make Pi out of Pi/4
    24ce:	a3 e0       	ldi	r26, 0x03	; 3
    24d0:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__adddi3_s8>
    24d4:	0e 94 ad 1a 	call	0x355a	; 0x355a <__floatundisf>
    24d8:	9b 01       	movw	r18, r22
    24da:	ac 01       	movw	r20, r24
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	80 e8       	ldi	r24, 0x80	; 128
    24e2:	9f e3       	ldi	r25, 0x3F	; 63
    24e4:	0e 94 c8 19 	call	0x3390	; 0x3390 <__divsf3>
    24e8:	9b 01       	movw	r18, r22
    24ea:	ac 01       	movw	r20, r24
    24ec:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__data_start>
    24f0:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__data_start+0x1>
    24f4:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <__data_start+0x2>
    24f8:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <__data_start+0x3>
    24fc:	0e 94 56 19 	call	0x32ac	; 0x32ac <__subsf3>
    2500:	4b 01       	movw	r8, r22
    2502:	5c 01       	movw	r10, r24
    2504:	2c 2d       	mov	r18, r12
    2506:	3d 2d       	mov	r19, r13
    2508:	4e 2d       	mov	r20, r14
    250a:	5f 2d       	mov	r21, r15
    250c:	60 2f       	mov	r22, r16
    250e:	71 2f       	mov	r23, r17
    2510:	8d 2f       	mov	r24, r29
    2512:	9c 2f       	mov	r25, r28
    2514:	a5 e0       	ldi	r26, 0x05	; 5
    2516:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__adddi3_s8>
    251a:	0e 94 ad 1a 	call	0x355a	; 0x355a <__floatundisf>
    251e:	9b 01       	movw	r18, r22
    2520:	ac 01       	movw	r20, r24
    2522:	60 e0       	ldi	r22, 0x00	; 0
    2524:	70 e0       	ldi	r23, 0x00	; 0
    2526:	80 e8       	ldi	r24, 0x80	; 128
    2528:	9f e3       	ldi	r25, 0x3F	; 63
    252a:	0e 94 c8 19 	call	0x3390	; 0x3390 <__divsf3>
    252e:	9b 01       	movw	r18, r22
    2530:	ac 01       	movw	r20, r24
    2532:	c5 01       	movw	r24, r10
    2534:	b4 01       	movw	r22, r8
    2536:	0e 94 57 19 	call	0x32ae	; 0x32ae <__addsf3>
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e8       	ldi	r20, 0x80	; 128
    2540:	50 e4       	ldi	r21, 0x40	; 64
    2542:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__mulsf3>
    2546:	60 93 00 20 	sts	0x2000, r22	; 0x802000 <__data_start>
    254a:	70 93 01 20 	sts	0x2001, r23	; 0x802001 <__data_start+0x1>
    254e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <__data_start+0x2>
    2552:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <__data_start+0x3>
			xEventGroupSetBits(calcEventGroup, CALC_DONE_EVENT);
    2556:	41 e0       	ldi	r20, 0x01	; 1
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	60 e0       	ldi	r22, 0x00	; 0
    255c:	70 e0       	ldi	r23, 0x00	; 0
    255e:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <calcEventGroup>
    2562:	90 91 e6 2c 	lds	r25, 0x2CE6	; 0x802ce6 <calcEventGroup+0x1>
    2566:	0e 94 33 03 	call	0x666	; 0x666 <xEventGroupSetBits>
	}
}

void vCalculation(void *pvParameters) {
	for (;;) {	
		for (i=0; i<=1e6; i++) {
    256a:	20 91 b4 2c 	lds	r18, 0x2CB4	; 0x802cb4 <i>
    256e:	30 91 b5 2c 	lds	r19, 0x2CB5	; 0x802cb5 <i+0x1>
    2572:	40 91 b6 2c 	lds	r20, 0x2CB6	; 0x802cb6 <i+0x2>
    2576:	50 91 b7 2c 	lds	r21, 0x2CB7	; 0x802cb7 <i+0x3>
    257a:	60 91 b8 2c 	lds	r22, 0x2CB8	; 0x802cb8 <i+0x4>
    257e:	70 91 b9 2c 	lds	r23, 0x2CB9	; 0x802cb9 <i+0x5>
    2582:	80 91 ba 2c 	lds	r24, 0x2CBA	; 0x802cba <i+0x6>
    2586:	90 91 bb 2c 	lds	r25, 0x2CBB	; 0x802cbb <i+0x7>
    258a:	a1 e0       	ldi	r26, 0x01	; 1
    258c:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__adddi3_s8>
    2590:	c2 2e       	mov	r12, r18
    2592:	d3 2e       	mov	r13, r19
    2594:	e4 2e       	mov	r14, r20
    2596:	f5 2e       	mov	r15, r21
    2598:	06 2f       	mov	r16, r22
    259a:	17 2f       	mov	r17, r23
    259c:	d8 2f       	mov	r29, r24
    259e:	c9 2f       	mov	r28, r25
    25a0:	20 93 b4 2c 	sts	0x2CB4, r18	; 0x802cb4 <i>
    25a4:	30 93 b5 2c 	sts	0x2CB5, r19	; 0x802cb5 <i+0x1>
    25a8:	40 93 b6 2c 	sts	0x2CB6, r20	; 0x802cb6 <i+0x2>
    25ac:	50 93 b7 2c 	sts	0x2CB7, r21	; 0x802cb7 <i+0x3>
    25b0:	60 93 b8 2c 	sts	0x2CB8, r22	; 0x802cb8 <i+0x4>
    25b4:	70 93 b9 2c 	sts	0x2CB9, r23	; 0x802cb9 <i+0x5>
    25b8:	80 93 ba 2c 	sts	0x2CBA, r24	; 0x802cba <i+0x6>
    25bc:	90 93 bb 2c 	sts	0x2CBB, r25	; 0x802cbb <i+0x7>
    25c0:	0e 94 ad 1a 	call	0x355a	; 0x355a <__floatundisf>
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	34 e2       	ldi	r19, 0x24	; 36
    25c8:	44 e7       	ldi	r20, 0x74	; 116
    25ca:	59 e4       	ldi	r21, 0x49	; 73
    25cc:	0e 94 c3 19 	call	0x3386	; 0x3386 <__cmpsf2>
    25d0:	18 16       	cp	r1, r24
    25d2:	0c f0       	brlt	.+2      	; 0x25d6 <vCalculation+0x15e>
    25d4:	69 cf       	rjmp	.-302    	; 0x24a8 <vCalculation+0x30>
    25d6:	50 cf       	rjmp	.-352    	; 0x2478 <vCalculation>

000025d8 <vApplicationIdleHook>:
TaskHandle_t CalculationTask;
TaskHandle_t ledTask;

EventGroupHandle_t calcEventGroup;
void vApplicationIdleHook( void )
{	
    25d8:	08 95       	ret

000025da <main>:
	
}

int main(void)
{
    25da:	ef 92       	push	r14
    25dc:	ff 92       	push	r15
    25de:	0f 93       	push	r16
	calcEventGroup = xEventGroupCreate();
    25e0:	0e 94 38 02 	call	0x470	; 0x470 <xEventGroupCreate>
    25e4:	80 93 e5 2c 	sts	0x2CE5, r24	; 0x802ce5 <calcEventGroup>
    25e8:	90 93 e6 2c 	sts	0x2CE6, r25	; 0x802ce6 <calcEventGroup+0x1>
	vInitClock();
    25ec:	0e 94 bb 11 	call	0x2376	; 0x2376 <vInitClock>
	vInitDisplay();
    25f0:	0e 94 2c 14 	call	0x2858	; 0x2858 <vInitDisplay>
	
	xTaskCreate(vInterface, (const char *) "InterfaceTask", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    25f4:	e1 2c       	mov	r14, r1
    25f6:	f1 2c       	mov	r15, r1
    25f8:	01 e0       	ldi	r16, 0x01	; 1
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	48 ec       	ldi	r20, 0xC8	; 200
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	6a e2       	ldi	r22, 0x2A	; 42
    2604:	70 e2       	ldi	r23, 0x20	; 32
    2606:	83 ef       	ldi	r24, 0xF3	; 243
    2608:	91 e1       	ldi	r25, 0x11	; 17
    260a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <xTaskCreate>
	xTaskCreate(vCalculation, (const char *) "CalculationTask", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	48 ec       	ldi	r20, 0xC8	; 200
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	68 e3       	ldi	r22, 0x38	; 56
    2618:	70 e2       	ldi	r23, 0x20	; 32
    261a:	8c e3       	ldi	r24, 0x3C	; 60
    261c:	92 e1       	ldi	r25, 0x12	; 18
    261e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <xTaskCreate>
	
	

	vDisplayClear();
    2622:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <vDisplayClear>
	vDisplayWriteStringAtPos(0, 0, "Calculating Pi v0.1");
    2626:	88 e4       	ldi	r24, 0x48	; 72
    2628:	90 e2       	ldi	r25, 0x20	; 32
    262a:	9f 93       	push	r25
    262c:	8f 93       	push	r24
    262e:	1f 92       	push	r1
    2630:	1f 92       	push	r1
    2632:	1f 92       	push	r1
    2634:	1f 92       	push	r1
    2636:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <vDisplayWriteStringAtPos>
	vTaskStartScheduler();
    263a:	0e 94 0e 0b 	call	0x161c	; 0x161c <vTaskStartScheduler>
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
	return 0;
}
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	0f 91       	pop	r16
    2650:	ff 90       	pop	r15
    2652:	ef 90       	pop	r14
    2654:	08 95       	ret

00002656 <__vector_108>:
 void displayHome() {
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
    2656:	1f 92       	push	r1
    2658:	0f 92       	push	r0
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	0f 92       	push	r0
    265e:	11 24       	eor	r1, r1
    2660:	0b b6       	in	r0, 0x3b	; 59
    2662:	0f 92       	push	r0
    2664:	2f 93       	push	r18
    2666:	3f 93       	push	r19
    2668:	4f 93       	push	r20
    266a:	5f 93       	push	r21
    266c:	6f 93       	push	r22
    266e:	7f 93       	push	r23
    2670:	8f 93       	push	r24
    2672:	9f 93       	push	r25
    2674:	af 93       	push	r26
    2676:	bf 93       	push	r27
    2678:	ef 93       	push	r30
    267a:	ff 93       	push	r31
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
    2680:	1f 92       	push	r1
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	19 82       	std	Y+1, r1	; 0x01
    2688:	9e 01       	movw	r18, r28
    268a:	2f 5f       	subi	r18, 0xFF	; 255
    268c:	3f 4f       	sbci	r19, 0xFF	; 255
    268e:	41 e0       	ldi	r20, 0x01	; 1
    2690:	50 e0       	ldi	r21, 0x00	; 0
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	80 91 3f 2d 	lds	r24, 0x2D3F	; 0x802d3f <egDisplayTiming>
    269a:	90 91 40 2d 	lds	r25, 0x2D40	; 0x802d40 <egDisplayTiming+0x1>
    269e:	0e 94 c8 03 	call	0x790	; 0x790 <xEventGroupSetBitsFromISR>
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	9b e0       	ldi	r25, 0x0B	; 11
    26a8:	0e 94 1c 02 	call	0x438	; 0x438 <TC0_ConfigClockSource>
    26ac:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <__TEXT_REGION_LENGTH__+0x700b06>
    26b0:	0f 90       	pop	r0
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	ff 91       	pop	r31
    26b8:	ef 91       	pop	r30
    26ba:	bf 91       	pop	r27
    26bc:	af 91       	pop	r26
    26be:	9f 91       	pop	r25
    26c0:	8f 91       	pop	r24
    26c2:	7f 91       	pop	r23
    26c4:	6f 91       	pop	r22
    26c6:	5f 91       	pop	r21
    26c8:	4f 91       	pop	r20
    26ca:	3f 91       	pop	r19
    26cc:	2f 91       	pop	r18
    26ce:	0f 90       	pop	r0
    26d0:	0b be       	out	0x3b, r0	; 59
    26d2:	0f 90       	pop	r0
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	0f 90       	pop	r0
    26d8:	1f 90       	pop	r1
    26da:	18 95       	reti

000026dc <delayUS>:
    26dc:	cf 92       	push	r12
    26de:	df 92       	push	r13
    26e0:	ef 92       	push	r14
    26e2:	ff 92       	push	r15
    26e4:	0f 93       	push	r16
    26e6:	6b 01       	movw	r12, r22
    26e8:	7c 01       	movw	r14, r24
    26ea:	82 e0       	ldi	r24, 0x02	; 2
    26ec:	c8 16       	cp	r12, r24
    26ee:	d1 04       	cpc	r13, r1
    26f0:	e1 04       	cpc	r14, r1
    26f2:	f1 04       	cpc	r15, r1
    26f4:	08 f4       	brcc	.+2      	; 0x26f8 <delayUS+0x1c>
    26f6:	4e c0       	rjmp	.+156    	; 0x2794 <delayUS+0xb8>
    26f8:	e0 e0       	ldi	r30, 0x00	; 0
    26fa:	fb e0       	ldi	r31, 0x0B	; 11
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	86 83       	std	Z+6, r24	; 0x06
    2700:	10 a2       	std	Z+32, r1	; 0x20
    2702:	11 a2       	std	Z+33, r1	; 0x21
    2704:	60 e0       	ldi	r22, 0x00	; 0
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	9b e0       	ldi	r25, 0x0B	; 11
    270a:	0e 94 22 02 	call	0x444	; 0x444 <TC0_ConfigWGM>
    270e:	8e ef       	ldi	r24, 0xFE	; 254
    2710:	c8 16       	cp	r12, r24
    2712:	8f ef       	ldi	r24, 0xFF	; 255
    2714:	d8 06       	cpc	r13, r24
    2716:	e1 04       	cpc	r14, r1
    2718:	f1 04       	cpc	r15, r1
    271a:	70 f4       	brcc	.+28     	; 0x2738 <delayUS+0x5c>
    271c:	f6 94       	lsr	r15
    271e:	e7 94       	ror	r14
    2720:	d7 94       	ror	r13
    2722:	c7 94       	ror	r12
    2724:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    2728:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    272c:	65 e0       	ldi	r22, 0x05	; 5
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	9b e0       	ldi	r25, 0x0B	; 11
    2732:	0e 94 1c 02 	call	0x438	; 0x438 <TC0_ConfigClockSource>
    2736:	19 c0       	rjmp	.+50     	; 0x276a <delayUS+0x8e>
    2738:	80 e4       	ldi	r24, 0x40	; 64
    273a:	c8 16       	cp	r12, r24
    273c:	82 e4       	ldi	r24, 0x42	; 66
    273e:	d8 06       	cpc	r13, r24
    2740:	8f e0       	ldi	r24, 0x0F	; 15
    2742:	e8 06       	cpc	r14, r24
    2744:	f1 04       	cpc	r15, r1
    2746:	88 f4       	brcc	.+34     	; 0x276a <delayUS+0x8e>
    2748:	68 94       	set
    274a:	14 f8       	bld	r1, 4
    274c:	f6 94       	lsr	r15
    274e:	e7 94       	ror	r14
    2750:	d7 94       	ror	r13
    2752:	c7 94       	ror	r12
    2754:	16 94       	lsr	r1
    2756:	d1 f7       	brne	.-12     	; 0x274c <delayUS+0x70>
    2758:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    275c:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    2760:	67 e0       	ldi	r22, 0x07	; 7
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	9b e0       	ldi	r25, 0x0B	; 11
    2766:	0e 94 1c 02 	call	0x438	; 0x438 <TC0_ConfigClockSource>
    276a:	0f 2e       	mov	r0, r31
    276c:	f4 ef       	ldi	r31, 0xF4	; 244
    276e:	cf 2e       	mov	r12, r31
    2770:	dd 24       	eor	r13, r13
    2772:	d3 94       	inc	r13
    2774:	e1 2c       	mov	r14, r1
    2776:	f1 2c       	mov	r15, r1
    2778:	f0 2d       	mov	r31, r0
    277a:	00 e0       	ldi	r16, 0x00	; 0
    277c:	21 e0       	ldi	r18, 0x01	; 1
    277e:	41 e0       	ldi	r20, 0x01	; 1
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	80 91 3f 2d 	lds	r24, 0x2D3F	; 0x802d3f <egDisplayTiming>
    278a:	90 91 40 2d 	lds	r25, 0x2D40	; 0x802d40 <egDisplayTiming+0x1>
    278e:	0e 94 4d 02 	call	0x49a	; 0x49a <xEventGroupWaitBits>
    2792:	11 c0       	rjmp	.+34     	; 0x27b6 <delayUS+0xda>
    2794:	e0 e0       	ldi	r30, 0x00	; 0
    2796:	fb e0       	ldi	r31, 0x0B	; 11
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	86 83       	std	Z+6, r24	; 0x06
    279c:	10 a2       	std	Z+32, r1	; 0x20
    279e:	11 a2       	std	Z+33, r1	; 0x21
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	9b e0       	ldi	r25, 0x0B	; 11
    27a6:	0e 94 22 02 	call	0x444	; 0x444 <TC0_ConfigWGM>
    27aa:	c1 2c       	mov	r12, r1
    27ac:	d1 2c       	mov	r13, r1
    27ae:	76 01       	movw	r14, r12
    27b0:	68 94       	set
    27b2:	c1 f8       	bld	r12, 1
    27b4:	b3 cf       	rjmp	.-154    	; 0x271c <delayUS+0x40>
    27b6:	0f 91       	pop	r16
    27b8:	ff 90       	pop	r15
    27ba:	ef 90       	pop	r14
    27bc:	df 90       	pop	r13
    27be:	cf 90       	pop	r12
    27c0:	08 95       	ret

000027c2 <setPort>:
    27c2:	82 95       	swap	r24
    27c4:	80 7f       	andi	r24, 0xF0	; 240
    27c6:	e0 e0       	ldi	r30, 0x00	; 0
    27c8:	f6 e0       	ldi	r31, 0x06	; 6
    27ca:	94 81       	ldd	r25, Z+4	; 0x04
    27cc:	28 2f       	mov	r18, r24
    27ce:	2f 60       	ori	r18, 0x0F	; 15
    27d0:	92 23       	and	r25, r18
    27d2:	94 83       	std	Z+4, r25	; 0x04
    27d4:	94 81       	ldd	r25, Z+4	; 0x04
    27d6:	89 2b       	or	r24, r25
    27d8:	84 83       	std	Z+4, r24	; 0x04
    27da:	08 95       	ret

000027dc <Nybble>:
    27dc:	1f 93       	push	r17
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	c0 e6       	ldi	r28, 0x60	; 96
    27e4:	d6 e0       	ldi	r29, 0x06	; 6
    27e6:	14 e0       	ldi	r17, 0x04	; 4
    27e8:	1d 83       	std	Y+5, r17	; 0x05
    27ea:	61 e0       	ldi	r22, 0x01	; 1
    27ec:	70 e0       	ldi	r23, 0x00	; 0
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 6e 13 	call	0x26dc	; 0x26dc <delayUS>
    27f6:	1e 83       	std	Y+6, r17	; 0x06
    27f8:	df 91       	pop	r29
    27fa:	cf 91       	pop	r28
    27fc:	1f 91       	pop	r17
    27fe:	08 95       	ret

00002800 <command>:
    2800:	cf 93       	push	r28
    2802:	c8 2f       	mov	r28, r24
    2804:	82 95       	swap	r24
    2806:	8f 70       	andi	r24, 0x0F	; 15
    2808:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <setPort>
    280c:	e0 e6       	ldi	r30, 0x60	; 96
    280e:	f6 e0       	ldi	r31, 0x06	; 6
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	86 83       	std	Z+6, r24	; 0x06
    2814:	82 e0       	ldi	r24, 0x02	; 2
    2816:	86 83       	std	Z+6, r24	; 0x06
    2818:	0e 94 ee 13 	call	0x27dc	; 0x27dc <Nybble>
    281c:	8c 2f       	mov	r24, r28
    281e:	8f 70       	andi	r24, 0x0F	; 15
    2820:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <setPort>
    2824:	0e 94 ee 13 	call	0x27dc	; 0x27dc <Nybble>
    2828:	cf 91       	pop	r28
    282a:	08 95       	ret

0000282c <write>:
    282c:	cf 93       	push	r28
    282e:	c8 2f       	mov	r28, r24
    2830:	82 95       	swap	r24
    2832:	8f 70       	andi	r24, 0x0F	; 15
    2834:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <setPort>
    2838:	e0 e6       	ldi	r30, 0x60	; 96
    283a:	f6 e0       	ldi	r31, 0x06	; 6
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	85 83       	std	Z+5, r24	; 0x05
    2840:	82 e0       	ldi	r24, 0x02	; 2
    2842:	86 83       	std	Z+6, r24	; 0x06
    2844:	0e 94 ee 13 	call	0x27dc	; 0x27dc <Nybble>
    2848:	8c 2f       	mov	r24, r28
    284a:	8f 70       	andi	r24, 0x0F	; 15
    284c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <setPort>
    2850:	0e 94 ee 13 	call	0x27dc	; 0x27dc <Nybble>
    2854:	cf 91       	pop	r28
    2856:	08 95       	ret

00002858 <vInitDisplay>:
 }
 
 void vInitDisplay() {
    2858:	ef 92       	push	r14
    285a:	ff 92       	push	r15
    285c:	0f 93       	push	r16
	PORTA.DIRSET = PIN4_bm;
    285e:	e0 e0       	ldi	r30, 0x00	; 0
    2860:	f6 e0       	ldi	r31, 0x06	; 6
    2862:	80 e1       	ldi	r24, 0x10	; 16
    2864:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN5_bm;
    2866:	80 e2       	ldi	r24, 0x20	; 32
    2868:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN6_bm;
    286a:	80 e4       	ldi	r24, 0x40	; 64
    286c:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN7_bm;
    286e:	80 e8       	ldi	r24, 0x80	; 128
    2870:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = PIN0_bm;
    2872:	a0 e6       	ldi	r26, 0x60	; 96
    2874:	b6 e0       	ldi	r27, 0x06	; 6
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	11 96       	adiw	r26, 0x01	; 1
    287a:	8c 93       	st	X, r24
    287c:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN1_bm;
    287e:	82 e0       	ldi	r24, 0x02	; 2
    2880:	11 96       	adiw	r26, 0x01	; 1
    2882:	8c 93       	st	X, r24
    2884:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN2_bm;
    2886:	84 e0       	ldi	r24, 0x04	; 4
    2888:	11 96       	adiw	r26, 0x01	; 1
    288a:	8c 93       	st	X, r24
    288c:	11 97       	sbiw	r26, 0x01	; 1
	PORTA.OUT &= 0x0F;
    288e:	84 81       	ldd	r24, Z+4	; 0x04
    2890:	8f 70       	andi	r24, 0x0F	; 15
    2892:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT &= 0xF8;
    2894:	14 96       	adiw	r26, 0x04	; 4
    2896:	8c 91       	ld	r24, X
    2898:	14 97       	sbiw	r26, 0x04	; 4
    289a:	88 7f       	andi	r24, 0xF8	; 248
    289c:	14 96       	adiw	r26, 0x04	; 4
    289e:	8c 93       	st	X, r24

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	66 e1       	ldi	r22, 0x16	; 22
    28a4:	88 e0       	ldi	r24, 0x08	; 8
    28a6:	0e 94 5f 07 	call	0xebe	; 0xebe <xQueueGenericCreate>
    28aa:	80 93 3d 2d 	sts	0x2D3D, r24	; 0x802d3d <displayLineQueue>
    28ae:	90 93 3e 2d 	sts	0x2D3E, r25	; 0x802d3e <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    28b2:	0e 94 38 02 	call	0x470	; 0x470 <xEventGroupCreate>
    28b6:	80 93 3f 2d 	sts	0x2D3F, r24	; 0x802d3f <egDisplayTiming>
    28ba:	90 93 40 2d 	sts	0x2D40, r25	; 0x802d40 <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 2, NULL);	
    28be:	e1 2c       	mov	r14, r1
    28c0:	f1 2c       	mov	r15, r1
    28c2:	02 e0       	ldi	r16, 0x02	; 2
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	4e e5       	ldi	r20, 0x5E	; 94
    28ca:	51 e0       	ldi	r21, 0x01	; 1
    28cc:	6c e5       	ldi	r22, 0x5C	; 92
    28ce:	70 e2       	ldi	r23, 0x20	; 32
    28d0:	8a ec       	ldi	r24, 0xCA	; 202
    28d2:	94 e1       	ldi	r25, 0x14	; 20
    28d4:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <xTaskCreate>
 }
    28d8:	0f 91       	pop	r16
    28da:	ff 90       	pop	r15
    28dc:	ef 90       	pop	r14
    28de:	08 95       	ret

000028e0 <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
	 switch(line) {
    28e0:	81 30       	cpi	r24, 0x01	; 1
    28e2:	91 05       	cpc	r25, r1
    28e4:	79 f0       	breq	.+30     	; 0x2904 <_displaySetPos+0x24>
    28e6:	1c f4       	brge	.+6      	; 0x28ee <_displaySetPos+0xe>
    28e8:	89 2b       	or	r24, r25
    28ea:	39 f0       	breq	.+14     	; 0x28fa <_displaySetPos+0x1a>
    28ec:	19 c0       	rjmp	.+50     	; 0x2920 <_displaySetPos+0x40>
    28ee:	82 30       	cpi	r24, 0x02	; 2
    28f0:	91 05       	cpc	r25, r1
    28f2:	69 f0       	breq	.+26     	; 0x290e <_displaySetPos+0x2e>
    28f4:	03 97       	sbiw	r24, 0x03	; 3
    28f6:	81 f0       	breq	.+32     	; 0x2918 <_displaySetPos+0x38>
    28f8:	13 c0       	rjmp	.+38     	; 0x2920 <_displaySetPos+0x40>
		 case 0:
		 command(0x80 + 0x00 + pos);
    28fa:	80 e8       	ldi	r24, 0x80	; 128
    28fc:	86 0f       	add	r24, r22
    28fe:	0e 94 00 14 	call	0x2800	; 0x2800 <command>
		 break;
    2902:	0e c0       	rjmp	.+28     	; 0x2920 <_displaySetPos+0x40>
		 case 1:
		 command(0x80 + 0x40 + pos);
    2904:	80 ec       	ldi	r24, 0xC0	; 192
    2906:	86 0f       	add	r24, r22
    2908:	0e 94 00 14 	call	0x2800	; 0x2800 <command>
		 break;
    290c:	09 c0       	rjmp	.+18     	; 0x2920 <_displaySetPos+0x40>
		 case 2:
		 command(0x80 + 0x14 + pos);
    290e:	84 e9       	ldi	r24, 0x94	; 148
    2910:	86 0f       	add	r24, r22
    2912:	0e 94 00 14 	call	0x2800	; 0x2800 <command>
		 break;
    2916:	04 c0       	rjmp	.+8      	; 0x2920 <_displaySetPos+0x40>
		 case 3:
		 command(0x80 + 0x54 + pos);
    2918:	84 ed       	ldi	r24, 0xD4	; 212
    291a:	86 0f       	add	r24, r22
    291c:	0e 94 00 14 	call	0x2800	; 0x2800 <command>
		 break;
	 }
	 delayUS(39);
    2920:	67 e2       	ldi	r22, 0x27	; 39
    2922:	70 e0       	ldi	r23, 0x00	; 0
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	0e 94 6e 13 	call	0x26dc	; 0x26dc <delayUS>
    292c:	08 95       	ret

0000292e <_displayWriteChar>:
 }

 void _displayWriteChar(char c) {
	 write(c);
    292e:	0e 94 16 14 	call	0x282c	; 0x282c <write>
	 delayUS(43);
    2932:	6b e2       	ldi	r22, 0x2B	; 43
    2934:	70 e0       	ldi	r23, 0x00	; 0
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	0e 94 6e 13 	call	0x26dc	; 0x26dc <delayUS>
    293e:	08 95       	ret

00002940 <_displayWriteString>:
 }
 
 void _displayWriteString(char* s) {
    2940:	0f 93       	push	r16
    2942:	1f 93       	push	r17
    2944:	cf 93       	push	r28
    2946:	df 93       	push	r29
    2948:	fc 01       	movw	r30, r24
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
    294a:	80 81       	ld	r24, Z
    294c:	81 11       	cpse	r24, r1
    294e:	0a c0       	rjmp	.+20     	; 0x2964 <_displayWriteString+0x24>
    2950:	11 c0       	rjmp	.+34     	; 0x2974 <_displayWriteString+0x34>
    2952:	89 91       	ld	r24, Y+
    2954:	88 23       	and	r24, r24
    2956:	71 f0       	breq	.+28     	; 0x2974 <_displayWriteString+0x34>
			 break;
		 }
		 _displayWriteChar(s[i]);
    2958:	0e 94 97 14 	call	0x292e	; 0x292e <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    295c:	0c 17       	cp	r16, r28
    295e:	1d 07       	cpc	r17, r29
    2960:	c1 f7       	brne	.-16     	; 0x2952 <_displayWriteString+0x12>
    2962:	08 c0       	rjmp	.+16     	; 0x2974 <_displayWriteString+0x34>
    2964:	8f 01       	movw	r16, r30
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
    2966:	0e 94 97 14 	call	0x292e	; 0x292e <_displayWriteChar>
    296a:	e8 01       	movw	r28, r16
    296c:	21 96       	adiw	r28, 0x01	; 1
    296e:	0c 5e       	subi	r16, 0xEC	; 236
    2970:	1f 4f       	sbci	r17, 0xFF	; 255
    2972:	ef cf       	rjmp	.-34     	; 0x2952 <_displayWriteString+0x12>
	 }
 }
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	08 95       	ret

0000297e <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    297e:	cf 93       	push	r28
    2980:	df 93       	push	r29
    2982:	ea 01       	movw	r28, r20
	 _displaySetPos(line, pos);
    2984:	0e 94 70 14 	call	0x28e0	; 0x28e0 <_displaySetPos>
	 _displayWriteString(s);
    2988:	ce 01       	movw	r24, r28
    298a:	0e 94 a0 14 	call	0x2940	; 0x2940 <_displayWriteString>
 }
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	08 95       	ret

00002994 <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	c6 56       	subi	r28, 0x66	; 102
    299e:	d1 09       	sbc	r29, r1
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	5e 01       	movw	r10, r28
    29a6:	41 e5       	ldi	r20, 0x51	; 81
    29a8:	a4 0e       	add	r10, r20
    29aa:	b1 1c       	adc	r11, r1
    29ac:	fe 01       	movw	r30, r28
    29ae:	31 96       	adiw	r30, 0x01	; 1
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
			displayLines[i][j] = 0x20;
    29b0:	20 e2       	ldi	r18, 0x20	; 32
    29b2:	08 c0       	rjmp	.+16     	; 0x29c4 <vDisplayUpdateTask+0x30>
    29b4:	21 93       	st	Z+, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    29b6:	e8 17       	cp	r30, r24
    29b8:	f9 07       	cpc	r31, r25
    29ba:	e1 f7       	brne	.-8      	; 0x29b4 <vDisplayUpdateTask+0x20>
    29bc:	fc 01       	movw	r30, r24

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    29be:	a8 16       	cp	r10, r24
    29c0:	b9 06       	cpc	r11, r25
    29c2:	19 f0       	breq	.+6      	; 0x29ca <vDisplayUpdateTask+0x36>
    29c4:	cf 01       	movw	r24, r30
    29c6:	44 96       	adiw	r24, 0x14	; 20
    29c8:	f5 cf       	rjmp	.-22     	; 0x29b4 <vDisplayUpdateTask+0x20>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    29ca:	60 e4       	ldi	r22, 0x40	; 64
    29cc:	7c e9       	ldi	r23, 0x9C	; 156
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 6e 13 	call	0x26dc	; 0x26dc <delayUS>
	 setPort(0x03);
    29d6:	83 e0       	ldi	r24, 0x03	; 3
    29d8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <setPort>
	 delayUS(5000);
    29dc:	68 e8       	ldi	r22, 0x88	; 136
    29de:	73 e1       	ldi	r23, 0x13	; 19
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	0e 94 6e 13 	call	0x26dc	; 0x26dc <delayUS>
	 Nybble();
    29e8:	0e 94 ee 13 	call	0x27dc	; 0x27dc <Nybble>
	 delayUS(160);
    29ec:	60 ea       	ldi	r22, 0xA0	; 160
    29ee:	70 e0       	ldi	r23, 0x00	; 0
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	0e 94 6e 13 	call	0x26dc	; 0x26dc <delayUS>
	 Nybble();
    29f8:	0e 94 ee 13 	call	0x27dc	; 0x27dc <Nybble>
	 delayUS(160);
    29fc:	60 ea       	ldi	r22, 0xA0	; 160
    29fe:	70 e0       	ldi	r23, 0x00	; 0
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 6e 13 	call	0x26dc	; 0x26dc <delayUS>
	 Nybble();
    2a08:	0e 94 ee 13 	call	0x27dc	; 0x27dc <Nybble>
	 delayUS(160);
    2a0c:	60 ea       	ldi	r22, 0xA0	; 160
    2a0e:	70 e0       	ldi	r23, 0x00	; 0
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 6e 13 	call	0x26dc	; 0x26dc <delayUS>
	 setPort(0x02);
    2a18:	82 e0       	ldi	r24, 0x02	; 2
    2a1a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <setPort>
	 Nybble();
    2a1e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <Nybble>
	 command(0x28);
    2a22:	88 e2       	ldi	r24, 0x28	; 40
    2a24:	0e 94 00 14 	call	0x2800	; 0x2800 <command>
	 command(0x10);
    2a28:	80 e1       	ldi	r24, 0x10	; 16
    2a2a:	0e 94 00 14 	call	0x2800	; 0x2800 <command>
	 command(0x0C); //Cursor and Blinking off
    2a2e:	8c e0       	ldi	r24, 0x0C	; 12
    2a30:	0e 94 00 14 	call	0x2800	; 0x2800 <command>
	 command(0x06);
    2a34:	86 e0       	ldi	r24, 0x06	; 6
    2a36:	0e 94 00 14 	call	0x2800	; 0x2800 <command>
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
    2a3a:	10 e2       	ldi	r17, 0x20	; 32
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    2a3c:	6e 01       	movw	r12, r28
    2a3e:	51 e5       	ldi	r21, 0x51	; 81
    2a40:	c5 0e       	add	r12, r21
    2a42:	d1 1c       	adc	r13, r1
    2a44:	0f 2e       	mov	r0, r31
    2a46:	f4 e1       	ldi	r31, 0x14	; 20
    2a48:	4f 2e       	mov	r4, r31
    2a4a:	f0 2d       	mov	r31, r0
    2a4c:	0f 2e       	mov	r0, r31
    2a4e:	f6 e1       	ldi	r31, 0x16	; 22
    2a50:	8f 2e       	mov	r8, r31
    2a52:	91 2c       	mov	r9, r1
    2a54:	f0 2d       	mov	r31, r0
    2a56:	5c 2c       	mov	r5, r12
    2a58:	0d 2d       	mov	r16, r13
	 command(0x10);
	 command(0x0C); //Cursor and Blinking off
	 command(0x06);
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    2a5a:	68 ec       	ldi	r22, 0xC8	; 200
    2a5c:	70 e0       	ldi	r23, 0x00	; 0
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	0e 94 b6 0c 	call	0x196c	; 0x196c <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    2a66:	40 e0       	ldi	r20, 0x00	; 0
    2a68:	50 e0       	ldi	r21, 0x00	; 0
    2a6a:	ba 01       	movw	r22, r20
    2a6c:	80 91 3f 2d 	lds	r24, 0x2D3F	; 0x802d3f <egDisplayTiming>
    2a70:	90 91 40 2d 	lds	r25, 0x2D40	; 0x802d40 <egDisplayTiming+0x1>
    2a74:	0e 94 12 03 	call	0x624	; 0x624 <xEventGroupClearBits>
    2a78:	67 2b       	or	r22, r23
    2a7a:	68 2b       	or	r22, r24
    2a7c:	69 2b       	or	r22, r25
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <vDisplayUpdateTask+0xee>
    2a80:	49 c0       	rjmp	.+146    	; 0x2b14 <vDisplayUpdateTask+0x180>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    2a82:	42 e0       	ldi	r20, 0x02	; 2
    2a84:	50 e0       	ldi	r21, 0x00	; 0
    2a86:	60 e0       	ldi	r22, 0x00	; 0
    2a88:	70 e0       	ldi	r23, 0x00	; 0
    2a8a:	80 91 3f 2d 	lds	r24, 0x2D3F	; 0x802d3f <egDisplayTiming>
    2a8e:	90 91 40 2d 	lds	r25, 0x2D40	; 0x802d40 <egDisplayTiming+0x1>
    2a92:	0e 94 12 03 	call	0x624	; 0x624 <xEventGroupClearBits>
    2a96:	fe 01       	movw	r30, r28
    2a98:	31 96       	adiw	r30, 0x01	; 1
    2a9a:	08 c0       	rjmp	.+16     	; 0x2aac <vDisplayUpdateTask+0x118>
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
    2a9c:	11 93       	st	Z+, r17
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    2a9e:	e8 17       	cp	r30, r24
    2aa0:	f9 07       	cpc	r31, r25
    2aa2:	e1 f7       	brne	.-8      	; 0x2a9c <vDisplayUpdateTask+0x108>
    2aa4:	fc 01       	movw	r30, r24
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    2aa6:	8a 15       	cp	r24, r10
    2aa8:	9b 05       	cpc	r25, r11
    2aaa:	a1 f1       	breq	.+104    	; 0x2b14 <vDisplayUpdateTask+0x180>
    2aac:	cf 01       	movw	r24, r30
    2aae:	44 96       	adiw	r24, 0x14	; 20
    2ab0:	f5 cf       	rjmp	.-22     	; 0x2a9c <vDisplayUpdateTask+0x108>
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    2ab2:	2f ef       	ldi	r18, 0xFF	; 255
    2ab4:	3f ef       	ldi	r19, 0xFF	; 255
    2ab6:	a9 01       	movw	r20, r18
    2ab8:	65 2d       	mov	r22, r5
    2aba:	70 2f       	mov	r23, r16
    2abc:	80 91 3d 2d 	lds	r24, 0x2D3D	; 0x802d3d <displayLineQueue>
    2ac0:	90 91 3e 2d 	lds	r25, 0x2D3E	; 0x802d3e <displayLineQueue+0x1>
    2ac4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <xQueueReceive>
    2ac8:	88 23       	and	r24, r24
    2aca:	21 f1       	breq	.+72     	; 0x2b14 <vDisplayUpdateTask+0x180>
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    2acc:	f6 01       	movw	r30, r12
    2ace:	21 81       	ldd	r18, Z+1	; 0x01
    2ad0:	82 2f       	mov	r24, r18
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	44 97       	sbiw	r24, 0x14	; 20
    2ad6:	f4 f4       	brge	.+60     	; 0x2b14 <vDisplayUpdateTask+0x180>
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	88 23       	and	r24, r24
    2adc:	d9 f0       	breq	.+54     	; 0x2b14 <vDisplayUpdateTask+0x180>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    2ade:	90 81       	ld	r25, Z
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	d9 01       	movw	r26, r18
    2ae4:	49 9e       	mul	r4, r25
    2ae6:	a0 0d       	add	r26, r0
    2ae8:	b1 1d       	adc	r27, r1
    2aea:	11 24       	eor	r1, r1
    2aec:	41 e0       	ldi	r20, 0x01	; 1
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	4c 0f       	add	r20, r28
    2af2:	5d 1f       	adc	r21, r29
    2af4:	a4 0f       	add	r26, r20
    2af6:	b5 1f       	adc	r27, r21
    2af8:	33 96       	adiw	r30, 0x03	; 3
    2afa:	a4 01       	movw	r20, r8
    2afc:	42 1b       	sub	r20, r18
    2afe:	53 0b       	sbc	r21, r19
    2b00:	9a 01       	movw	r18, r20
    2b02:	2c 0d       	add	r18, r12
    2b04:	3d 1d       	adc	r19, r13
    2b06:	8d 93       	st	X+, r24
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    2b08:	e2 17       	cp	r30, r18
    2b0a:	f3 07       	cpc	r31, r19
    2b0c:	19 f0       	breq	.+6      	; 0x2b14 <vDisplayUpdateTask+0x180>
    2b0e:	81 91       	ld	r24, Z+
    2b10:	81 11       	cpse	r24, r1
    2b12:	f9 cf       	rjmp	.-14     	; 0x2b06 <vDisplayUpdateTask+0x172>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    2b14:	80 91 3d 2d 	lds	r24, 0x2D3D	; 0x802d3d <displayLineQueue>
    2b18:	90 91 3e 2d 	lds	r25, 0x2D3E	; 0x802d3e <displayLineQueue+0x1>
    2b1c:	0e 94 21 09 	call	0x1242	; 0x1242 <uxQueueMessagesWaiting>
    2b20:	81 11       	cpse	r24, r1
    2b22:	c7 cf       	rjmp	.-114    	; 0x2ab2 <vDisplayUpdateTask+0x11e>
    2b24:	ce 01       	movw	r24, r28
    2b26:	01 96       	adiw	r24, 0x01	; 1
    2b28:	7c 01       	movw	r14, r24
    2b2a:	61 2c       	mov	r6, r1
    2b2c:	71 2c       	mov	r7, r1
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    2b2e:	a7 01       	movw	r20, r14
    2b30:	60 e0       	ldi	r22, 0x00	; 0
    2b32:	70 e0       	ldi	r23, 0x00	; 0
    2b34:	c3 01       	movw	r24, r6
    2b36:	0e 94 bf 14 	call	0x297e	; 0x297e <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    2b3a:	9f ef       	ldi	r25, 0xFF	; 255
    2b3c:	69 1a       	sub	r6, r25
    2b3e:	79 0a       	sbc	r7, r25
    2b40:	e4 e1       	ldi	r30, 0x14	; 20
    2b42:	ee 0e       	add	r14, r30
    2b44:	f1 1c       	adc	r15, r1
    2b46:	f4 e0       	ldi	r31, 0x04	; 4
    2b48:	6f 16       	cp	r6, r31
    2b4a:	71 04       	cpc	r7, r1
    2b4c:	81 f7       	brne	.-32     	; 0x2b2e <vDisplayUpdateTask+0x19a>
    2b4e:	85 cf       	rjmp	.-246    	; 0x2a5a <vDisplayUpdateTask+0xc6>

00002b50 <vDisplayClear>:
	 }
 }
 

void vDisplayClear() {
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    2b50:	42 e0       	ldi	r20, 0x02	; 2
    2b52:	50 e0       	ldi	r21, 0x00	; 0
    2b54:	60 e0       	ldi	r22, 0x00	; 0
    2b56:	70 e0       	ldi	r23, 0x00	; 0
    2b58:	80 91 3f 2d 	lds	r24, 0x2D3F	; 0x802d3f <egDisplayTiming>
    2b5c:	90 91 40 2d 	lds	r25, 0x2D40	; 0x802d40 <egDisplayTiming+0x1>
    2b60:	0e 94 33 03 	call	0x666	; 0x666 <xEventGroupSetBits>
    2b64:	08 95       	ret

00002b66 <vDisplayWriteStringAtPos>:
}

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    2b66:	2f 92       	push	r2
    2b68:	3f 92       	push	r3
    2b6a:	4f 92       	push	r4
    2b6c:	5f 92       	push	r5
    2b6e:	6f 92       	push	r6
    2b70:	7f 92       	push	r7
    2b72:	8f 92       	push	r8
    2b74:	9f 92       	push	r9
    2b76:	af 92       	push	r10
    2b78:	bf 92       	push	r11
    2b7a:	cf 92       	push	r12
    2b7c:	df 92       	push	r13
    2b7e:	ef 92       	push	r14
    2b80:	ff 92       	push	r15
    2b82:	0f 93       	push	r16
    2b84:	1f 93       	push	r17
    2b86:	cf 93       	push	r28
    2b88:	df 93       	push	r29
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	6d 97       	sbiw	r28, 0x1d	; 29
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	de bf       	out	0x3e, r29	; 62
    2b94:	2b a9       	ldd	r18, Y+51	; 0x33
    2b96:	2b 8f       	std	Y+27, r18	; 0x1b
    2b98:	af a9       	ldd	r26, Y+55	; 0x37
    2b9a:	b8 ad       	ldd	r27, Y+56	; 0x38
	va_list arg;	
	va_start(arg, fmt);
    2b9c:	7e 01       	movw	r14, r28
    2b9e:	39 e3       	ldi	r19, 0x39	; 57
    2ba0:	e3 0e       	add	r14, r19
    2ba2:	f1 1c       	adc	r15, r1
    2ba4:	24 ee       	ldi	r18, 0xE4	; 228
    2ba6:	3c e2       	ldi	r19, 0x2C	; 44
	display_vprintf(line, pos, fmt, arg);
    2ba8:	e0 ed       	ldi	r30, 0xD0	; 208
    2baa:	fc e2       	ldi	r31, 0x2C	; 44
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
    2bac:	11 92       	st	Z+, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    2bae:	e2 17       	cp	r30, r18
    2bb0:	f3 07       	cpc	r31, r19
    2bb2:	e1 f7       	brne	.-8      	; 0x2bac <vDisplayWriteStringAtPos+0x46>
    2bb4:	0f 2e       	mov	r0, r31
    2bb6:	fc eb       	ldi	r31, 0xBC	; 188
    2bb8:	af 2e       	mov	r10, r31
    2bba:	fc e2       	ldi	r31, 0x2C	; 44
    2bbc:	bf 2e       	mov	r11, r31
    2bbe:	f0 2d       	mov	r31, r0
    2bc0:	20 ed       	ldi	r18, 0xD0	; 208
    2bc2:	3c e2       	ldi	r19, 0x2C	; 44
    2bc4:	f5 01       	movw	r30, r10
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
    2bc6:	11 92       	st	Z+, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    2bc8:	e2 17       	cp	r30, r18
    2bca:	f3 07       	cpc	r31, r19
    2bcc:	e1 f7       	brne	.-8      	; 0x2bc6 <vDisplayWriteStringAtPos+0x60>
    2bce:	81 2c       	mov	r8, r1
    2bd0:	91 2c       	mov	r9, r1
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    2bd2:	0f 2e       	mov	r0, r31
    2bd4:	f0 ed       	ldi	r31, 0xD0	; 208
    2bd6:	cf 2e       	mov	r12, r31
    2bd8:	fc e2       	ldi	r31, 0x2C	; 44
    2bda:	df 2e       	mov	r13, r31
    2bdc:	f0 2d       	mov	r31, r0
    2bde:	fc c2       	rjmp	.+1528   	; 0x31d8 <vDisplayWriteStringAtPos+0x672>
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
    2be0:	85 32       	cpi	r24, 0x25	; 37
    2be2:	09 f0       	breq	.+2      	; 0x2be6 <vDisplayWriteStringAtPos+0x80>
    2be4:	e8 c2       	rjmp	.+1488   	; 0x31b6 <vDisplayWriteStringAtPos+0x650>
			switch (ch = *fmt++) {
    2be6:	2d 01       	movw	r4, r26
    2be8:	82 e0       	ldi	r24, 0x02	; 2
    2bea:	48 0e       	add	r4, r24
    2bec:	51 1c       	adc	r5, r1
    2bee:	11 96       	adiw	r26, 0x01	; 1
    2bf0:	8c 91       	ld	r24, X
    2bf2:	85 36       	cpi	r24, 0x65	; 101
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <vDisplayWriteStringAtPos+0x92>
    2bf6:	db c1       	rjmp	.+950    	; 0x2fae <vDisplayWriteStringAtPos+0x448>
    2bf8:	38 f4       	brcc	.+14     	; 0x2c08 <vDisplayWriteStringAtPos+0xa2>
    2bfa:	83 36       	cpi	r24, 0x63	; 99
    2bfc:	c1 f0       	breq	.+48     	; 0x2c2e <vDisplayWriteStringAtPos+0xc8>
    2bfe:	08 f0       	brcs	.+2      	; 0x2c02 <vDisplayWriteStringAtPos+0x9c>
    2c00:	48 c0       	rjmp	.+144    	; 0x2c92 <vDisplayWriteStringAtPos+0x12c>
    2c02:	85 32       	cpi	r24, 0x25	; 37
    2c04:	51 f0       	breq	.+20     	; 0x2c1a <vDisplayWriteStringAtPos+0xb4>
    2c06:	e7 c2       	rjmp	.+1486   	; 0x31d6 <vDisplayWriteStringAtPos+0x670>
    2c08:	83 37       	cpi	r24, 0x73	; 115
    2c0a:	f9 f0       	breq	.+62     	; 0x2c4a <vDisplayWriteStringAtPos+0xe4>
    2c0c:	88 37       	cpi	r24, 0x78	; 120
    2c0e:	09 f4       	brne	.+2      	; 0x2c12 <vDisplayWriteStringAtPos+0xac>
    2c10:	68 c0       	rjmp	.+208    	; 0x2ce2 <vDisplayWriteStringAtPos+0x17c>
    2c12:	86 36       	cpi	r24, 0x66	; 102
    2c14:	09 f0       	breq	.+2      	; 0x2c18 <vDisplayWriteStringAtPos+0xb2>
    2c16:	df c2       	rjmp	.+1470   	; 0x31d6 <vDisplayWriteStringAtPos+0x670>
    2c18:	8c c0       	rjmp	.+280    	; 0x2d32 <vDisplayWriteStringAtPos+0x1cc>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    2c1a:	f4 01       	movw	r30, r8
    2c1c:	e4 54       	subi	r30, 0x44	; 68
    2c1e:	f3 4d       	sbci	r31, 0xD3	; 211
    2c20:	95 e2       	ldi	r25, 0x25	; 37
    2c22:	90 83       	st	Z, r25
				length++;
    2c24:	af ef       	ldi	r26, 0xFF	; 255
    2c26:	8a 1a       	sub	r8, r26
    2c28:	9a 0a       	sbc	r9, r26
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2c2a:	d2 01       	movw	r26, r4
    2c2c:	d5 c2       	rjmp	.+1450   	; 0x31d8 <vDisplayWriteStringAtPos+0x672>
				break;

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
				str[length] = char_temp;
    2c2e:	f4 01       	movw	r30, r8
    2c30:	e4 54       	subi	r30, 0x44	; 68
    2c32:	f3 4d       	sbci	r31, 0xD3	; 211
    2c34:	d7 01       	movw	r26, r14
    2c36:	8c 91       	ld	r24, X
    2c38:	80 83       	st	Z, r24
				length++;
    2c3a:	bf ef       	ldi	r27, 0xFF	; 255
    2c3c:	8b 1a       	sub	r8, r27
    2c3e:	9b 0a       	sbc	r9, r27
				length++;
				break;

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    2c40:	f7 01       	movw	r30, r14
    2c42:	32 96       	adiw	r30, 0x02	; 2
    2c44:	7f 01       	movw	r14, r30
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2c46:	d2 01       	movw	r26, r4
    2c48:	c7 c2       	rjmp	.+1422   	; 0x31d8 <vDisplayWriteStringAtPos+0x672>
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    2c4a:	a7 01       	movw	r20, r14
    2c4c:	4e 5f       	subi	r20, 0xFE	; 254
    2c4e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c50:	d7 01       	movw	r26, r14
    2c52:	8d 91       	ld	r24, X+
    2c54:	9c 91       	ld	r25, X
    2c56:	9c 01       	movw	r18, r24
    2c58:	b4 01       	movw	r22, r8
    2c5a:	f4 01       	movw	r30, r8
    2c5c:	e4 54       	subi	r30, 0x44	; 68
    2c5e:	f3 4d       	sbci	r31, 0xD3	; 211
				for(int i = 0; i < strlen(string_temp);i++) {
    2c60:	00 e0       	ldi	r16, 0x00	; 0
    2c62:	10 e0       	ldi	r17, 0x00	; 0
    2c64:	06 c0       	rjmp	.+12     	; 0x2c72 <vDisplayWriteStringAtPos+0x10c>
					str[length+i] = string_temp[i];
    2c66:	d9 01       	movw	r26, r18
    2c68:	fd 90       	ld	r15, X+
    2c6a:	9d 01       	movw	r18, r26
    2c6c:	f1 92       	st	Z+, r15
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    2c6e:	0f 5f       	subi	r16, 0xFF	; 255
    2c70:	1f 4f       	sbci	r17, 0xFF	; 255
    2c72:	dc 01       	movw	r26, r24
    2c74:	0d 90       	ld	r0, X+
    2c76:	00 20       	and	r0, r0
    2c78:	e9 f7       	brne	.-6      	; 0x2c74 <vDisplayWriteStringAtPos+0x10e>
    2c7a:	11 97       	sbiw	r26, 0x01	; 1
    2c7c:	a8 1b       	sub	r26, r24
    2c7e:	b9 0b       	sbc	r27, r25
    2c80:	0a 17       	cp	r16, r26
    2c82:	1b 07       	cpc	r17, r27
    2c84:	80 f3       	brcs	.-32     	; 0x2c66 <vDisplayWriteStringAtPos+0x100>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    2c86:	4d 01       	movw	r8, r26
    2c88:	86 0e       	add	r8, r22
    2c8a:	97 1e       	adc	r9, r23
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    2c8c:	7a 01       	movw	r14, r20
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2c8e:	d2 01       	movw	r26, r4
    2c90:	a3 c2       	rjmp	.+1350   	; 0x31d8 <vDisplayWriteStringAtPos+0x672>
				length += strlen(string_temp);
				break;

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    2c92:	87 01       	movw	r16, r14
    2c94:	0e 5f       	subi	r16, 0xFE	; 254
    2c96:	1f 4f       	sbci	r17, 0xFF	; 255
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2c98:	4a e0       	ldi	r20, 0x0A	; 10
    2c9a:	b6 01       	movw	r22, r12
    2c9c:	f7 01       	movw	r30, r14
    2c9e:	80 81       	ld	r24, Z
    2ca0:	91 81       	ldd	r25, Z+1	; 0x01
    2ca2:	0e 94 9d 20 	call	0x413a	; 0x413a <__itoa_ncheck>
    2ca6:	94 01       	movw	r18, r8
    2ca8:	d4 01       	movw	r26, r8
    2caa:	a4 54       	subi	r26, 0x44	; 68
    2cac:	b3 4d       	sbci	r27, 0xD3	; 211
    2cae:	40 ed       	ldi	r20, 0xD0	; 208
    2cb0:	5c e2       	ldi	r21, 0x2C	; 44
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	05 c0       	rjmp	.+10     	; 0x2cc2 <vDisplayWriteStringAtPos+0x15c>
					str[length+i] = buffer[i];
    2cb8:	fa 01       	movw	r30, r20
    2cba:	61 91       	ld	r22, Z+
    2cbc:	af 01       	movw	r20, r30
    2cbe:	6d 93       	st	X+, r22

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    2cc0:	01 96       	adiw	r24, 0x01	; 1
    2cc2:	f6 01       	movw	r30, r12
    2cc4:	01 90       	ld	r0, Z+
    2cc6:	00 20       	and	r0, r0
    2cc8:	e9 f7       	brne	.-6      	; 0x2cc4 <vDisplayWriteStringAtPos+0x15e>
    2cca:	31 97       	sbiw	r30, 0x01	; 1
    2ccc:	e0 5d       	subi	r30, 0xD0	; 208
    2cce:	fc 42       	sbci	r31, 0x2C	; 44
    2cd0:	8e 17       	cp	r24, r30
    2cd2:	9f 07       	cpc	r25, r31
    2cd4:	88 f3       	brcs	.-30     	; 0x2cb8 <vDisplayWriteStringAtPos+0x152>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2cd6:	4f 01       	movw	r8, r30
    2cd8:	82 0e       	add	r8, r18
    2cda:	93 1e       	adc	r9, r19
				length += strlen(string_temp);
				break;

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    2cdc:	78 01       	movw	r14, r16
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2cde:	d2 01       	movw	r26, r4
    2ce0:	7b c2       	rjmp	.+1270   	; 0x31d8 <vDisplayWriteStringAtPos+0x672>
				length += strlen(buffer);
				break;

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    2ce2:	87 01       	movw	r16, r14
    2ce4:	0e 5f       	subi	r16, 0xFE	; 254
    2ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce8:	40 e1       	ldi	r20, 0x10	; 16
    2cea:	b6 01       	movw	r22, r12
    2cec:	d7 01       	movw	r26, r14
    2cee:	8d 91       	ld	r24, X+
    2cf0:	9c 91       	ld	r25, X
    2cf2:	0e 94 9d 20 	call	0x413a	; 0x413a <__itoa_ncheck>
    2cf6:	94 01       	movw	r18, r8
    2cf8:	f4 01       	movw	r30, r8
    2cfa:	e4 54       	subi	r30, 0x44	; 68
    2cfc:	f3 4d       	sbci	r31, 0xD3	; 211
    2cfe:	40 ed       	ldi	r20, 0xD0	; 208
    2d00:	5c e2       	ldi	r21, 0x2C	; 44
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	05 c0       	rjmp	.+10     	; 0x2d12 <vDisplayWriteStringAtPos+0x1ac>
					str[length+i] = buffer[i];
    2d08:	da 01       	movw	r26, r20
    2d0a:	6d 91       	ld	r22, X+
    2d0c:	ad 01       	movw	r20, r26
    2d0e:	61 93       	st	Z+, r22

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    2d10:	01 96       	adiw	r24, 0x01	; 1
    2d12:	d6 01       	movw	r26, r12
    2d14:	0d 90       	ld	r0, X+
    2d16:	00 20       	and	r0, r0
    2d18:	e9 f7       	brne	.-6      	; 0x2d14 <vDisplayWriteStringAtPos+0x1ae>
    2d1a:	11 97       	sbiw	r26, 0x01	; 1
    2d1c:	a0 5d       	subi	r26, 0xD0	; 208
    2d1e:	bc 42       	sbci	r27, 0x2C	; 44
    2d20:	8a 17       	cp	r24, r26
    2d22:	9b 07       	cpc	r25, r27
    2d24:	88 f3       	brcs	.-30     	; 0x2d08 <vDisplayWriteStringAtPos+0x1a2>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2d26:	4d 01       	movw	r8, r26
    2d28:	82 0e       	add	r8, r18
    2d2a:	93 1e       	adc	r9, r19
				length += strlen(buffer);
				break;

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    2d2c:	78 01       	movw	r14, r16
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2d2e:	d2 01       	movw	r26, r4
    2d30:	53 c2       	rjmp	.+1190   	; 0x31d8 <vDisplayWriteStringAtPos+0x672>
				}
				length += strlen(buffer);
				break;

				case 'f':
				double_temp = va_arg(arg, double);
    2d32:	17 01       	movw	r2, r14
    2d34:	b4 e0       	ldi	r27, 0x04	; 4
    2d36:	2b 0e       	add	r2, r27
    2d38:	31 1c       	adc	r3, r1
    2d3a:	d7 01       	movw	r26, r14
    2d3c:	8d 91       	ld	r24, X+
    2d3e:	9d 91       	ld	r25, X+
    2d40:	0d 90       	ld	r0, X+
    2d42:	bc 91       	ld	r27, X
    2d44:	a0 2d       	mov	r26, r0
    2d46:	8f 8b       	std	Y+23, r24	; 0x17
    2d48:	98 8f       	std	Y+24, r25	; 0x18
    2d4a:	a9 8f       	std	Y+25, r26	; 0x19
    2d4c:	ba 8f       	std	Y+26, r27	; 0x1a

    int exponent = 0;
    int places = 0;
    static const int width = 4;

    if (value == 0.0) {
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	a9 01       	movw	r20, r18
    2d54:	bc 01       	movw	r22, r24
    2d56:	cd 01       	movw	r24, r26
    2d58:	0e 94 c3 19 	call	0x3386	; 0x3386 <__cmpsf2>
    2d5c:	81 11       	cpse	r24, r1
    2d5e:	05 c0       	rjmp	.+10     	; 0x2d6a <vDisplayWriteStringAtPos+0x204>
        buffer[0] = '0';
    2d60:	20 e3       	ldi	r18, 0x30	; 48
    2d62:	f6 01       	movw	r30, r12
    2d64:	20 83       	st	Z, r18
        buffer[1] = '\0';
    2d66:	11 82       	std	Z+1, r1	; 0x01
    2d68:	04 c1       	rjmp	.+520    	; 0x2f72 <vDisplayWriteStringAtPos+0x40c>
        return;
    }         

    if (value < 0.0) {
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	a9 01       	movw	r20, r18
    2d70:	6f 89       	ldd	r22, Y+23	; 0x17
    2d72:	78 8d       	ldd	r23, Y+24	; 0x18
    2d74:	89 8d       	ldd	r24, Y+25	; 0x19
    2d76:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d78:	0e 94 c3 19 	call	0x3386	; 0x3386 <__cmpsf2>
    2d7c:	88 23       	and	r24, r24
    2d7e:	9c f4       	brge	.+38     	; 0x2da6 <vDisplayWriteStringAtPos+0x240>
        *buffer++ = '-';
    2d80:	ed e2       	ldi	r30, 0x2D	; 45
    2d82:	d6 01       	movw	r26, r12
    2d84:	ec 93       	st	X, r30
        value = -value;
    2d86:	8f 89       	ldd	r24, Y+23	; 0x17
    2d88:	98 8d       	ldd	r25, Y+24	; 0x18
    2d8a:	a9 8d       	ldd	r26, Y+25	; 0x19
    2d8c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2d8e:	b0 58       	subi	r27, 0x80	; 128
    2d90:	8f 8b       	std	Y+23, r24	; 0x17
    2d92:	98 8f       	std	Y+24, r25	; 0x18
    2d94:	a9 8f       	std	Y+25, r26	; 0x19
    2d96:	ba 8f       	std	Y+26, r27	; 0x1a
        buffer[1] = '\0';
        return;
    }         

    if (value < 0.0) {
        *buffer++ = '-';
    2d98:	0f 2e       	mov	r0, r31
    2d9a:	f1 ed       	ldi	r31, 0xD1	; 209
    2d9c:	6f 2e       	mov	r6, r31
    2d9e:	fc e2       	ldi	r31, 0x2C	; 44
    2da0:	7f 2e       	mov	r7, r31
    2da2:	f0 2d       	mov	r31, r0
    2da4:	01 c0       	rjmp	.+2      	; 0x2da8 <vDisplayWriteStringAtPos+0x242>
        buffer[0] = '0';
        buffer[1] = '\0';
        return;
    }         

    if (value < 0.0) {
    2da6:	36 01       	movw	r6, r12

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e8       	ldi	r20, 0x80	; 128
    2dae:	5f e3       	ldi	r21, 0x3F	; 63
    2db0:	6f 89       	ldd	r22, Y+23	; 0x17
    2db2:	78 8d       	ldd	r23, Y+24	; 0x18
    2db4:	89 8d       	ldd	r24, Y+25	; 0x19
    2db6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2db8:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__gesf2>
    2dbc:	88 23       	and	r24, r24
    2dbe:	0c f4       	brge	.+2      	; 0x2dc2 <vDisplayWriteStringAtPos+0x25c>
    2dc0:	44 c2       	rjmp	.+1160   	; 0x324a <vDisplayWriteStringAtPos+0x6e4>
    2dc2:	00 e0       	ldi	r16, 0x00	; 0
    2dc4:	10 e0       	ldi	r17, 0x00	; 0
        value /= 10.0;
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e2       	ldi	r20, 0x20	; 32
    2dcc:	51 e4       	ldi	r21, 0x41	; 65
    2dce:	6f 89       	ldd	r22, Y+23	; 0x17
    2dd0:	78 8d       	ldd	r23, Y+24	; 0x18
    2dd2:	89 8d       	ldd	r24, Y+25	; 0x19
    2dd4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2dd6:	0e 94 c8 19 	call	0x3390	; 0x3390 <__divsf3>
    2dda:	6f 8b       	std	Y+23, r22	; 0x17
    2ddc:	78 8f       	std	Y+24, r23	; 0x18
    2dde:	89 8f       	std	Y+25, r24	; 0x19
    2de0:	9a 8f       	std	Y+26, r25	; 0x1a
        ++exponent;
    2de2:	0f 5f       	subi	r16, 0xFF	; 255
    2de4:	1f 4f       	sbci	r17, 0xFF	; 255

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e8       	ldi	r20, 0x80	; 128
    2dec:	5f e3       	ldi	r21, 0x3F	; 63
    2dee:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__gesf2>
    2df2:	88 23       	and	r24, r24
    2df4:	44 f7       	brge	.-48     	; 0x2dc6 <vDisplayWriteStringAtPos+0x260>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2df6:	2d ec       	ldi	r18, 0xCD	; 205
    2df8:	3c ec       	ldi	r19, 0xCC	; 204
    2dfa:	4c ec       	ldi	r20, 0xCC	; 204
    2dfc:	5d e3       	ldi	r21, 0x3D	; 61
    2dfe:	6f 89       	ldd	r22, Y+23	; 0x17
    2e00:	78 8d       	ldd	r23, Y+24	; 0x18
    2e02:	89 8d       	ldd	r24, Y+25	; 0x19
    2e04:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e06:	0e 94 c3 19 	call	0x3386	; 0x3386 <__cmpsf2>
    2e0a:	88 23       	and	r24, r24
    2e0c:	1c f0       	brlt	.+6      	; 0x2e14 <vDisplayWriteStringAtPos+0x2ae>
    2e0e:	1a c0       	rjmp	.+52     	; 0x2e44 <vDisplayWriteStringAtPos+0x2de>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    2e10:	00 e0       	ldi	r16, 0x00	; 0
    2e12:	10 e0       	ldi	r17, 0x00	; 0
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
        value *= 10.0;
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e2       	ldi	r20, 0x20	; 32
    2e1a:	51 e4       	ldi	r21, 0x41	; 65
    2e1c:	6f 89       	ldd	r22, Y+23	; 0x17
    2e1e:	78 8d       	ldd	r23, Y+24	; 0x18
    2e20:	89 8d       	ldd	r24, Y+25	; 0x19
    2e22:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e24:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__mulsf3>
    2e28:	6f 8b       	std	Y+23, r22	; 0x17
    2e2a:	78 8f       	std	Y+24, r23	; 0x18
    2e2c:	89 8f       	std	Y+25, r24	; 0x19
    2e2e:	9a 8f       	std	Y+26, r25	; 0x1a
        --exponent;
    2e30:	01 50       	subi	r16, 0x01	; 1
    2e32:	11 09       	sbc	r17, r1
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2e34:	2d ec       	ldi	r18, 0xCD	; 205
    2e36:	3c ec       	ldi	r19, 0xCC	; 204
    2e38:	4c ec       	ldi	r20, 0xCC	; 204
    2e3a:	5d e3       	ldi	r21, 0x3D	; 61
    2e3c:	0e 94 c3 19 	call	0x3386	; 0x3386 <__cmpsf2>
    2e40:	88 23       	and	r24, r24
    2e42:	44 f3       	brlt	.-48     	; 0x2e14 <vDisplayWriteStringAtPos+0x2ae>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    2e44:	10 16       	cp	r1, r16
    2e46:	11 06       	cpc	r1, r17
    2e48:	ac f5       	brge	.+106    	; 0x2eb4 <vDisplayWriteStringAtPos+0x34e>
    2e4a:	73 01       	movw	r14, r6
    2e4c:	d3 01       	movw	r26, r6
    2e4e:	a0 0f       	add	r26, r16
    2e50:	b1 1f       	adc	r27, r17
    2e52:	ac 8f       	std	Y+28, r26	; 0x1c
    2e54:	bd 8f       	std	Y+29, r27	; 0x1d
    2e56:	3d 01       	movw	r6, r26
    2e58:	6f 89       	ldd	r22, Y+23	; 0x17
    2e5a:	78 8d       	ldd	r23, Y+24	; 0x18
    2e5c:	89 8d       	ldd	r24, Y+25	; 0x19
    2e5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
        int digit = value * 10;
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e2       	ldi	r20, 0x20	; 32
    2e66:	51 e4       	ldi	r21, 0x41	; 65
    2e68:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__mulsf3>
    2e6c:	6f 8b       	std	Y+23, r22	; 0x17
    2e6e:	78 8f       	std	Y+24, r23	; 0x18
    2e70:	89 8f       	std	Y+25, r24	; 0x19
    2e72:	9a 8f       	std	Y+26, r25	; 0x1a
    2e74:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__fixsfsi>
        *buffer++ = digit + '0';
    2e78:	20 e3       	ldi	r18, 0x30	; 48
    2e7a:	26 0f       	add	r18, r22
    2e7c:	f7 01       	movw	r30, r14
    2e7e:	21 93       	st	Z+, r18
    2e80:	7f 01       	movw	r14, r30
        value = value * 10 - digit;
    2e82:	07 2e       	mov	r0, r23
    2e84:	00 0c       	add	r0, r0
    2e86:	88 0b       	sbc	r24, r24
    2e88:	99 0b       	sbc	r25, r25
    2e8a:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__floatsisf>
    2e8e:	9b 01       	movw	r18, r22
    2e90:	ac 01       	movw	r20, r24
    2e92:	6f 89       	ldd	r22, Y+23	; 0x17
    2e94:	78 8d       	ldd	r23, Y+24	; 0x18
    2e96:	89 8d       	ldd	r24, Y+25	; 0x19
    2e98:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e9a:	0e 94 56 19 	call	0x32ac	; 0x32ac <__subsf3>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    2e9e:	e6 14       	cp	r14, r6
    2ea0:	f7 04       	cpc	r15, r7
    2ea2:	f1 f6       	brne	.-68     	; 0x2e60 <vDisplayWriteStringAtPos+0x2fa>
    2ea4:	6f 8b       	std	Y+23, r22	; 0x17
    2ea6:	78 8f       	std	Y+24, r23	; 0x18
    2ea8:	89 8f       	std	Y+25, r24	; 0x19
    2eaa:	9a 8f       	std	Y+26, r25	; 0x1a
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    2eac:	01 15       	cp	r16, r1
    2eae:	11 05       	cpc	r17, r1
    2eb0:	89 f4       	brne	.+34     	; 0x2ed4 <vDisplayWriteStringAtPos+0x36e>
    2eb2:	db c1       	rjmp	.+950    	; 0x326a <vDisplayWriteStringAtPos+0x704>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    2eb4:	c8 01       	movw	r24, r16
        ++places;
        --exponent;
    }

    if (places == 0)
        *buffer++ = '0';
    2eb6:	e0 e3       	ldi	r30, 0x30	; 48
    2eb8:	d3 01       	movw	r26, r6
    2eba:	ec 93       	st	X, r30

    *buffer++ = '.';
    2ebc:	73 01       	movw	r14, r6
    2ebe:	f2 e0       	ldi	r31, 0x02	; 2
    2ec0:	ef 0e       	add	r14, r31
    2ec2:	f1 1c       	adc	r15, r1
    2ec4:	2e e2       	ldi	r18, 0x2E	; 46
    2ec6:	11 96       	adiw	r26, 0x01	; 1
    2ec8:	2c 93       	st	X, r18

    while (exponent < 0 && places < width) {
    2eca:	99 23       	and	r25, r25
    2ecc:	6c f0       	brlt	.+26     	; 0x2ee8 <vDisplayWriteStringAtPos+0x382>
    2ece:	00 e0       	ldi	r16, 0x00	; 0
    2ed0:	10 e0       	ldi	r17, 0x00	; 0
    2ed2:	1f c0       	rjmp	.+62     	; 0x2f12 <vDisplayWriteStringAtPos+0x3ac>
    }

    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';
    2ed4:	ec 8c       	ldd	r14, Y+28	; 0x1c
    2ed6:	fd 8c       	ldd	r15, Y+29	; 0x1d
    2ed8:	3f ef       	ldi	r19, 0xFF	; 255
    2eda:	e3 1a       	sub	r14, r19
    2edc:	f3 0a       	sbc	r15, r19
    2ede:	ee e2       	ldi	r30, 0x2E	; 46
    2ee0:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2ee2:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2ee4:	ec 93       	st	X, r30
    2ee6:	12 c0       	rjmp	.+36     	; 0x2f0c <vDisplayWriteStringAtPos+0x3a6>

    while (exponent < 0 && places < width) {
    2ee8:	00 e0       	ldi	r16, 0x00	; 0
    2eea:	10 e0       	ldi	r17, 0x00	; 0
        *buffer++ = '0';
    2eec:	ff ef       	ldi	r31, 0xFF	; 255
    2eee:	ef 1a       	sub	r14, r31
    2ef0:	ff 0a       	sbc	r15, r31
    2ef2:	f7 01       	movw	r30, r14
    2ef4:	31 97       	sbiw	r30, 0x01	; 1
    2ef6:	20 e3       	ldi	r18, 0x30	; 48
    2ef8:	20 83       	st	Z, r18
        --exponent;
    2efa:	01 97       	sbiw	r24, 0x01	; 1
        ++places;
    2efc:	0f 5f       	subi	r16, 0xFF	; 255
    2efe:	1f 4f       	sbci	r17, 0xFF	; 255
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    2f00:	99 23       	and	r25, r25
    2f02:	24 f4       	brge	.+8      	; 0x2f0c <vDisplayWriteStringAtPos+0x3a6>
    2f04:	04 30       	cpi	r16, 0x04	; 4
    2f06:	11 05       	cpc	r17, r1
    2f08:	8c f3       	brlt	.-30     	; 0x2eec <vDisplayWriteStringAtPos+0x386>
    2f0a:	31 c0       	rjmp	.+98     	; 0x2f6e <vDisplayWriteStringAtPos+0x408>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    2f0c:	04 30       	cpi	r16, 0x04	; 4
    2f0e:	11 05       	cpc	r17, r1
    2f10:	74 f5       	brge	.+92     	; 0x2f6e <vDisplayWriteStringAtPos+0x408>
    2f12:	37 01       	movw	r6, r14
    2f14:	84 e0       	ldi	r24, 0x04	; 4
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	80 1b       	sub	r24, r16
    2f1a:	91 0b       	sbc	r25, r17
    2f1c:	e8 0e       	add	r14, r24
    2f1e:	f9 1e       	adc	r15, r25
    2f20:	87 01       	movw	r16, r14
    2f22:	6f 89       	ldd	r22, Y+23	; 0x17
    2f24:	78 8d       	ldd	r23, Y+24	; 0x18
    2f26:	89 8d       	ldd	r24, Y+25	; 0x19
    2f28:	9a 8d       	ldd	r25, Y+26	; 0x1a
        int digit = value * 10.0;
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	40 e2       	ldi	r20, 0x20	; 32
    2f30:	51 e4       	ldi	r21, 0x41	; 65
    2f32:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__mulsf3>
    2f36:	6f 8b       	std	Y+23, r22	; 0x17
    2f38:	78 8f       	std	Y+24, r23	; 0x18
    2f3a:	89 8f       	std	Y+25, r24	; 0x19
    2f3c:	9a 8f       	std	Y+26, r25	; 0x1a
    2f3e:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__fixsfsi>
        *buffer++ = digit + '0';
    2f42:	20 e3       	ldi	r18, 0x30	; 48
    2f44:	26 0f       	add	r18, r22
    2f46:	d3 01       	movw	r26, r6
    2f48:	2d 93       	st	X+, r18
    2f4a:	3d 01       	movw	r6, r26
        value = value * 10.0 - digit;
    2f4c:	07 2e       	mov	r0, r23
    2f4e:	00 0c       	add	r0, r0
    2f50:	88 0b       	sbc	r24, r24
    2f52:	99 0b       	sbc	r25, r25
    2f54:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__floatsisf>
    2f58:	9b 01       	movw	r18, r22
    2f5a:	ac 01       	movw	r20, r24
    2f5c:	6f 89       	ldd	r22, Y+23	; 0x17
    2f5e:	78 8d       	ldd	r23, Y+24	; 0x18
    2f60:	89 8d       	ldd	r24, Y+25	; 0x19
    2f62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f64:	0e 94 56 19 	call	0x32ac	; 0x32ac <__subsf3>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    2f68:	60 16       	cp	r6, r16
    2f6a:	71 06       	cpc	r7, r17
    2f6c:	f1 f6       	brne	.-68     	; 0x2f2a <vDisplayWriteStringAtPos+0x3c4>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    2f6e:	f7 01       	movw	r30, r14
    2f70:	10 82       	st	Z, r1
    2f72:	94 01       	movw	r18, r8
    2f74:	f4 01       	movw	r30, r8
    2f76:	e4 54       	subi	r30, 0x44	; 68
    2f78:	f3 4d       	sbci	r31, 0xD3	; 211
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    2f7a:	40 ed       	ldi	r20, 0xD0	; 208
    2f7c:	5c e2       	ldi	r21, 0x2C	; 44
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	05 c0       	rjmp	.+10     	; 0x2f8e <vDisplayWriteStringAtPos+0x428>

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
					str[length+i] = buffer[i];
    2f84:	da 01       	movw	r26, r20
    2f86:	6d 91       	ld	r22, X+
    2f88:	ad 01       	movw	r20, r26
    2f8a:	61 93       	st	Z+, r22
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    2f8c:	01 96       	adiw	r24, 0x01	; 1
    2f8e:	d6 01       	movw	r26, r12
    2f90:	0d 90       	ld	r0, X+
    2f92:	00 20       	and	r0, r0
    2f94:	e9 f7       	brne	.-6      	; 0x2f90 <vDisplayWriteStringAtPos+0x42a>
    2f96:	11 97       	sbiw	r26, 0x01	; 1
    2f98:	a0 5d       	subi	r26, 0xD0	; 208
    2f9a:	bc 42       	sbci	r27, 0x2C	; 44
    2f9c:	8a 17       	cp	r24, r26
    2f9e:	9b 07       	cpc	r25, r27
    2fa0:	88 f3       	brcs	.-30     	; 0x2f84 <vDisplayWriteStringAtPos+0x41e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2fa2:	4d 01       	movw	r8, r26
    2fa4:	82 0e       	add	r8, r18
    2fa6:	93 1e       	adc	r9, r19
				}
				length += strlen(buffer);
				break;

				case 'f':
				double_temp = va_arg(arg, double);
    2fa8:	71 01       	movw	r14, r2
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2faa:	d2 01       	movw	r26, r4
    2fac:	15 c1       	rjmp	.+554    	; 0x31d8 <vDisplayWriteStringAtPos+0x672>
				}
				length += strlen(buffer);
				break;

				case 'e':
				double_temp = va_arg(arg, double);
    2fae:	17 01       	movw	r2, r14
    2fb0:	b4 e0       	ldi	r27, 0x04	; 4
    2fb2:	2b 0e       	add	r2, r27
    2fb4:	31 1c       	adc	r3, r1
    2fb6:	d7 01       	movw	r26, r14
    2fb8:	8d 91       	ld	r24, X+
    2fba:	9d 91       	ld	r25, X+
    2fbc:	0d 90       	ld	r0, X+
    2fbe:	bc 91       	ld	r27, X
    2fc0:	a0 2d       	mov	r26, r0
    2fc2:	8f 8b       	std	Y+23, r24	; 0x17
    2fc4:	98 8f       	std	Y+24, r25	; 0x18
    2fc6:	a9 8f       	std	Y+25, r26	; 0x19
    2fc8:	ba 8f       	std	Y+26, r27	; 0x1a

void ftoa_sci(char *buffer, double value) {
    int exponent = 0;    
    static const int width = 4;

    if (value == 0.0) {
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	a9 01       	movw	r20, r18
    2fd0:	bc 01       	movw	r22, r24
    2fd2:	cd 01       	movw	r24, r26
    2fd4:	0e 94 c3 19 	call	0x3386	; 0x3386 <__cmpsf2>
    2fd8:	81 11       	cpse	r24, r1
    2fda:	05 c0       	rjmp	.+10     	; 0x2fe6 <vDisplayWriteStringAtPos+0x480>
        buffer[0] = '0';
    2fdc:	20 e3       	ldi	r18, 0x30	; 48
    2fde:	f6 01       	movw	r30, r12
    2fe0:	20 83       	st	Z, r18
        buffer[1] = '\0';
    2fe2:	11 82       	std	Z+1, r1	; 0x01
    2fe4:	ca c0       	rjmp	.+404    	; 0x317a <vDisplayWriteStringAtPos+0x614>
        return;
    }

    if (value < 0.0) {
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	a9 01       	movw	r20, r18
    2fec:	6f 89       	ldd	r22, Y+23	; 0x17
    2fee:	78 8d       	ldd	r23, Y+24	; 0x18
    2ff0:	89 8d       	ldd	r24, Y+25	; 0x19
    2ff2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ff4:	0e 94 c3 19 	call	0x3386	; 0x3386 <__cmpsf2>
    2ff8:	88 23       	and	r24, r24
    2ffa:	9c f4       	brge	.+38     	; 0x3022 <vDisplayWriteStringAtPos+0x4bc>
        *buffer++ = '-';
    2ffc:	ed e2       	ldi	r30, 0x2D	; 45
    2ffe:	d6 01       	movw	r26, r12
    3000:	ec 93       	st	X, r30
        value = -value;
    3002:	8f 89       	ldd	r24, Y+23	; 0x17
    3004:	98 8d       	ldd	r25, Y+24	; 0x18
    3006:	a9 8d       	ldd	r26, Y+25	; 0x19
    3008:	ba 8d       	ldd	r27, Y+26	; 0x1a
    300a:	b0 58       	subi	r27, 0x80	; 128
    300c:	8f 8b       	std	Y+23, r24	; 0x17
    300e:	98 8f       	std	Y+24, r25	; 0x18
    3010:	a9 8f       	std	Y+25, r26	; 0x19
    3012:	ba 8f       	std	Y+26, r27	; 0x1a
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
        *buffer++ = '-';
    3014:	0f 2e       	mov	r0, r31
    3016:	f1 ed       	ldi	r31, 0xD1	; 209
    3018:	6f 2e       	mov	r6, r31
    301a:	fc e2       	ldi	r31, 0x2C	; 44
    301c:	7f 2e       	mov	r7, r31
    301e:	f0 2d       	mov	r31, r0
    3020:	01 c0       	rjmp	.+2      	; 0x3024 <vDisplayWriteStringAtPos+0x4be>
        buffer[0] = '0';
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
    3022:	36 01       	movw	r6, r12

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	40 e8       	ldi	r20, 0x80	; 128
    302a:	5f e3       	ldi	r21, 0x3F	; 63
    302c:	6f 89       	ldd	r22, Y+23	; 0x17
    302e:	78 8d       	ldd	r23, Y+24	; 0x18
    3030:	89 8d       	ldd	r24, Y+25	; 0x19
    3032:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3034:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__gesf2>
    3038:	88 23       	and	r24, r24
    303a:	dc f0       	brlt	.+54     	; 0x3072 <vDisplayWriteStringAtPos+0x50c>
    303c:	00 e0       	ldi	r16, 0x00	; 0
    303e:	10 e0       	ldi	r17, 0x00	; 0
        value /= 10.0;
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	40 e2       	ldi	r20, 0x20	; 32
    3046:	51 e4       	ldi	r21, 0x41	; 65
    3048:	6f 89       	ldd	r22, Y+23	; 0x17
    304a:	78 8d       	ldd	r23, Y+24	; 0x18
    304c:	89 8d       	ldd	r24, Y+25	; 0x19
    304e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3050:	0e 94 c8 19 	call	0x3390	; 0x3390 <__divsf3>
    3054:	6f 8b       	std	Y+23, r22	; 0x17
    3056:	78 8f       	std	Y+24, r23	; 0x18
    3058:	89 8f       	std	Y+25, r24	; 0x19
    305a:	9a 8f       	std	Y+26, r25	; 0x1a
        ++exponent;
    305c:	0f 5f       	subi	r16, 0xFF	; 255
    305e:	1f 4f       	sbci	r17, 0xFF	; 255

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	40 e8       	ldi	r20, 0x80	; 128
    3066:	5f e3       	ldi	r21, 0x3F	; 63
    3068:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__gesf2>
    306c:	88 23       	and	r24, r24
    306e:	44 f7       	brge	.-48     	; 0x3040 <vDisplayWriteStringAtPos+0x4da>
    3070:	02 c0       	rjmp	.+4      	; 0x3076 <vDisplayWriteStringAtPos+0x510>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    3072:	00 e0       	ldi	r16, 0x00	; 0
    3074:	10 e0       	ldi	r17, 0x00	; 0
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    3076:	2d ec       	ldi	r18, 0xCD	; 205
    3078:	3c ec       	ldi	r19, 0xCC	; 204
    307a:	4c ec       	ldi	r20, 0xCC	; 204
    307c:	5d e3       	ldi	r21, 0x3D	; 61
    307e:	6f 89       	ldd	r22, Y+23	; 0x17
    3080:	78 8d       	ldd	r23, Y+24	; 0x18
    3082:	89 8d       	ldd	r24, Y+25	; 0x19
    3084:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3086:	0e 94 c3 19 	call	0x3386	; 0x3386 <__cmpsf2>
    308a:	88 23       	and	r24, r24
    308c:	c4 f4       	brge	.+48     	; 0x30be <vDisplayWriteStringAtPos+0x558>
        value *= 10.0;
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	40 e2       	ldi	r20, 0x20	; 32
    3094:	51 e4       	ldi	r21, 0x41	; 65
    3096:	6f 89       	ldd	r22, Y+23	; 0x17
    3098:	78 8d       	ldd	r23, Y+24	; 0x18
    309a:	89 8d       	ldd	r24, Y+25	; 0x19
    309c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    309e:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__mulsf3>
    30a2:	6f 8b       	std	Y+23, r22	; 0x17
    30a4:	78 8f       	std	Y+24, r23	; 0x18
    30a6:	89 8f       	std	Y+25, r24	; 0x19
    30a8:	9a 8f       	std	Y+26, r25	; 0x1a
        --exponent;
    30aa:	01 50       	subi	r16, 0x01	; 1
    30ac:	11 09       	sbc	r17, r1
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    30ae:	2d ec       	ldi	r18, 0xCD	; 205
    30b0:	3c ec       	ldi	r19, 0xCC	; 204
    30b2:	4c ec       	ldi	r20, 0xCC	; 204
    30b4:	5d e3       	ldi	r21, 0x3D	; 61
    30b6:	0e 94 c3 19 	call	0x3386	; 0x3386 <__cmpsf2>
    30ba:	88 23       	and	r24, r24
    30bc:	44 f3       	brlt	.-48     	; 0x308e <vDisplayWriteStringAtPos+0x528>
        value = -value;
    }

    exponent = normalize(&value);

    int digit = value * 10.0;
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e2       	ldi	r20, 0x20	; 32
    30c4:	51 e4       	ldi	r21, 0x41	; 65
    30c6:	6f 89       	ldd	r22, Y+23	; 0x17
    30c8:	78 8d       	ldd	r23, Y+24	; 0x18
    30ca:	89 8d       	ldd	r24, Y+25	; 0x19
    30cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30ce:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__mulsf3>
    30d2:	6f 8b       	std	Y+23, r22	; 0x17
    30d4:	78 8f       	std	Y+24, r23	; 0x18
    30d6:	89 8f       	std	Y+25, r24	; 0x19
    30d8:	9a 8f       	std	Y+26, r25	; 0x1a
    30da:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__fixsfsi>
    *buffer++ = digit + '0';
    30de:	20 e3       	ldi	r18, 0x30	; 48
    30e0:	26 0f       	add	r18, r22
    30e2:	d3 01       	movw	r26, r6
    30e4:	2c 93       	st	X, r18
    value = value * 10.0 - digit;
    30e6:	07 2e       	mov	r0, r23
    30e8:	00 0c       	add	r0, r0
    30ea:	88 0b       	sbc	r24, r24
    30ec:	99 0b       	sbc	r25, r25
    30ee:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__floatsisf>
    30f2:	9b 01       	movw	r18, r22
    30f4:	ac 01       	movw	r20, r24
    30f6:	6f 89       	ldd	r22, Y+23	; 0x17
    30f8:	78 8d       	ldd	r23, Y+24	; 0x18
    30fa:	89 8d       	ldd	r24, Y+25	; 0x19
    30fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30fe:	0e 94 56 19 	call	0x32ac	; 0x32ac <__subsf3>
    --exponent;
    3102:	f8 01       	movw	r30, r16
    3104:	31 97       	sbiw	r30, 0x01	; 1
    3106:	ec 8f       	std	Y+28, r30	; 0x1c
    3108:	fd 8f       	std	Y+29, r31	; 0x1d

    *buffer++ = '.';
    310a:	ee e2       	ldi	r30, 0x2E	; 46
    310c:	d3 01       	movw	r26, r6
    310e:	11 96       	adiw	r26, 0x01	; 1
    3110:	ec 93       	st	X, r30
    3112:	83 01       	movw	r16, r6
    3114:	0e 5f       	subi	r16, 0xFE	; 254
    3116:	1f 4f       	sbci	r17, 0xFF	; 255
    3118:	73 01       	movw	r14, r6
    311a:	f6 e0       	ldi	r31, 0x06	; 6
    311c:	ef 0e       	add	r14, r31
    311e:	f1 1c       	adc	r15, r1

    for (int i = 0; i < width; i++) {
        int digit = value * 10.0;
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e2       	ldi	r20, 0x20	; 32
    3126:	51 e4       	ldi	r21, 0x41	; 65
    3128:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__mulsf3>
    312c:	6f 8b       	std	Y+23, r22	; 0x17
    312e:	78 8f       	std	Y+24, r23	; 0x18
    3130:	89 8f       	std	Y+25, r24	; 0x19
    3132:	9a 8f       	std	Y+26, r25	; 0x1a
    3134:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__fixsfsi>
        *buffer++ = digit + '0';
    3138:	20 e3       	ldi	r18, 0x30	; 48
    313a:	26 0f       	add	r18, r22
    313c:	d8 01       	movw	r26, r16
    313e:	2d 93       	st	X+, r18
    3140:	8d 01       	movw	r16, r26
        value = value * 10.0 - digit;
    3142:	07 2e       	mov	r0, r23
    3144:	00 0c       	add	r0, r0
    3146:	88 0b       	sbc	r24, r24
    3148:	99 0b       	sbc	r25, r25
    314a:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__floatsisf>
    314e:	9b 01       	movw	r18, r22
    3150:	ac 01       	movw	r20, r24
    3152:	6f 89       	ldd	r22, Y+23	; 0x17
    3154:	78 8d       	ldd	r23, Y+24	; 0x18
    3156:	89 8d       	ldd	r24, Y+25	; 0x19
    3158:	9a 8d       	ldd	r25, Y+26	; 0x1a
    315a:	0e 94 56 19 	call	0x32ac	; 0x32ac <__subsf3>
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    315e:	0e 15       	cp	r16, r14
    3160:	1f 05       	cpc	r17, r15
    3162:	f1 f6       	brne	.-68     	; 0x3120 <vDisplayWriteStringAtPos+0x5ba>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    3164:	25 e6       	ldi	r18, 0x65	; 101
    3166:	f3 01       	movw	r30, r6
    3168:	26 83       	std	Z+6, r18	; 0x06
    316a:	b3 01       	movw	r22, r6
    316c:	69 5f       	subi	r22, 0xF9	; 249
    316e:	7f 4f       	sbci	r23, 0xFF	; 255
    3170:	4a e0       	ldi	r20, 0x0A	; 10
    3172:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3174:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3176:	0e 94 9d 20 	call	0x413a	; 0x413a <__itoa_ncheck>
    317a:	94 01       	movw	r18, r8
    317c:	f4 01       	movw	r30, r8
    317e:	e4 54       	subi	r30, 0x44	; 68
    3180:	f3 4d       	sbci	r31, 0xD3	; 211
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    3182:	40 ed       	ldi	r20, 0xD0	; 208
    3184:	5c e2       	ldi	r21, 0x2C	; 44
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	05 c0       	rjmp	.+10     	; 0x3196 <vDisplayWriteStringAtPos+0x630>

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
					str[length+i] = buffer[i];
    318c:	da 01       	movw	r26, r20
    318e:	6d 91       	ld	r22, X+
    3190:	ad 01       	movw	r20, r26
    3192:	61 93       	st	Z+, r22
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    3194:	01 96       	adiw	r24, 0x01	; 1
    3196:	d6 01       	movw	r26, r12
    3198:	0d 90       	ld	r0, X+
    319a:	00 20       	and	r0, r0
    319c:	e9 f7       	brne	.-6      	; 0x3198 <vDisplayWriteStringAtPos+0x632>
    319e:	11 97       	sbiw	r26, 0x01	; 1
    31a0:	a0 5d       	subi	r26, 0xD0	; 208
    31a2:	bc 42       	sbci	r27, 0x2C	; 44
    31a4:	8a 17       	cp	r24, r26
    31a6:	9b 07       	cpc	r25, r27
    31a8:	88 f3       	brcs	.-30     	; 0x318c <vDisplayWriteStringAtPos+0x626>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    31aa:	4d 01       	movw	r8, r26
    31ac:	82 0e       	add	r8, r18
    31ae:	93 1e       	adc	r9, r19
				}
				length += strlen(buffer);
				break;

				case 'e':
				double_temp = va_arg(arg, double);
    31b0:	71 01       	movw	r14, r2
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    31b2:	d2 01       	movw	r26, r4
    31b4:	11 c0       	rjmp	.+34     	; 0x31d8 <vDisplayWriteStringAtPos+0x672>
				break;
			}
		}
		else {
			str[length] = ch;
			if(str[length] == '\n') {
    31b6:	8a 30       	cpi	r24, 0x0A	; 10
    31b8:	29 f0       	breq	.+10     	; 0x31c4 <vDisplayWriteStringAtPos+0x65e>
				length += strlen(buffer);
				break;
			}
		}
		else {
			str[length] = ch;
    31ba:	f4 01       	movw	r30, r8
    31bc:	e4 54       	subi	r30, 0x44	; 68
    31be:	f3 4d       	sbci	r31, 0xD3	; 211
    31c0:	80 83       	st	Z, r24
    31c2:	04 c0       	rjmp	.+8      	; 0x31cc <vDisplayWriteStringAtPos+0x666>
			if(str[length] == '\n') {
				str[length] = '\0';				
    31c4:	f4 01       	movw	r30, r8
    31c6:	e4 54       	subi	r30, 0x44	; 68
    31c8:	f3 4d       	sbci	r31, 0xD3	; 211
    31ca:	10 82       	st	Z, r1
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    31cc:	11 96       	adiw	r26, 0x01	; 1
		else {
			str[length] = ch;
			if(str[length] == '\n') {
				str[length] = '\0';				
			}
			length++;
    31ce:	ef ef       	ldi	r30, 0xFF	; 255
    31d0:	8e 1a       	sub	r8, r30
    31d2:	9e 0a       	sbc	r9, r30
    31d4:	01 c0       	rjmp	.+2      	; 0x31d8 <vDisplayWriteStringAtPos+0x672>
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    31d6:	d2 01       	movw	r26, r4
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    31d8:	8c 91       	ld	r24, X
    31da:	81 11       	cpse	r24, r1
    31dc:	01 cd       	rjmp	.-1534   	; 0x2be0 <vDisplayWriteStringAtPos+0x7a>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    31de:	8d a9       	ldd	r24, Y+53	; 0x35
    31e0:	9e a9       	ldd	r25, Y+54	; 0x36
    31e2:	88 0d       	add	r24, r8
    31e4:	99 1d       	adc	r25, r9
    31e6:	44 97       	sbiw	r24, 0x14	; 20
    31e8:	3c f0       	brlt	.+14     	; 0x31f8 <vDisplayWriteStringAtPos+0x692>
		length = 20-pos;
    31ea:	84 e1       	ldi	r24, 0x14	; 20
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	4c 01       	movw	r8, r24
    31f0:	2d a9       	ldd	r18, Y+53	; 0x35
    31f2:	3e a9       	ldd	r19, Y+54	; 0x36
    31f4:	82 1a       	sub	r8, r18
    31f6:	93 0a       	sbc	r9, r19
    31f8:	fe 01       	movw	r30, r28
    31fa:	33 96       	adiw	r30, 0x03	; 3
    31fc:	ce 01       	movw	r24, r28
    31fe:	47 96       	adiw	r24, 0x17	; 23
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    3200:	df 01       	movw	r26, r30
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
    3202:	1d 92       	st	X+, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    3204:	a8 17       	cp	r26, r24
    3206:	b9 07       	cpc	r27, r25
    3208:	e1 f7       	brne	.-8      	; 0x3202 <vDisplayWriteStringAtPos+0x69c>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    320a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    320c:	39 83       	std	Y+1, r19	; 0x01
	newLine.displayPos = pos;
    320e:	8d a9       	ldd	r24, Y+53	; 0x35
    3210:	8a 83       	std	Y+2, r24	; 0x02
	for(int i = 0; i < length;i++) {
    3212:	18 14       	cp	r1, r8
    3214:	19 04       	cpc	r1, r9
    3216:	5c f4       	brge	.+22     	; 0x322e <vDisplayWriteStringAtPos+0x6c8>
    3218:	ce 01       	movw	r24, r28
    321a:	88 0d       	add	r24, r8
    321c:	99 1d       	adc	r25, r9
    321e:	03 96       	adiw	r24, 0x03	; 3
		newLine.displayBuffer[i] = str[i];
    3220:	d5 01       	movw	r26, r10
    3222:	2d 91       	ld	r18, X+
    3224:	5d 01       	movw	r10, r26
    3226:	21 93       	st	Z+, r18
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    3228:	8e 17       	cp	r24, r30
    322a:	9f 07       	cpc	r25, r31
    322c:	c9 f7       	brne	.-14     	; 0x3220 <vDisplayWriteStringAtPos+0x6ba>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    322e:	00 e0       	ldi	r16, 0x00	; 0
    3230:	2f ef       	ldi	r18, 0xFF	; 255
    3232:	3f ef       	ldi	r19, 0xFF	; 255
    3234:	a9 01       	movw	r20, r18
    3236:	be 01       	movw	r22, r28
    3238:	6f 5f       	subi	r22, 0xFF	; 255
    323a:	7f 4f       	sbci	r23, 0xFF	; 255
    323c:	80 91 3d 2d 	lds	r24, 0x2D3D	; 0x802d3d <displayLineQueue>
    3240:	90 91 3e 2d 	lds	r25, 0x2D3E	; 0x802d3e <displayLineQueue+0x1>
    3244:	0e 94 90 07 	call	0xf20	; 0xf20 <xQueueGenericSend>
void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
	va_end(arg);	
}
    3248:	1b c0       	rjmp	.+54     	; 0x3280 <vDisplayWriteStringAtPos+0x71a>
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    324a:	2d ec       	ldi	r18, 0xCD	; 205
    324c:	3c ec       	ldi	r19, 0xCC	; 204
    324e:	4c ec       	ldi	r20, 0xCC	; 204
    3250:	5d e3       	ldi	r21, 0x3D	; 61
    3252:	6f 89       	ldd	r22, Y+23	; 0x17
    3254:	78 8d       	ldd	r23, Y+24	; 0x18
    3256:	89 8d       	ldd	r24, Y+25	; 0x19
    3258:	9a 8d       	ldd	r25, Y+26	; 0x1a
    325a:	0e 94 c3 19 	call	0x3386	; 0x3386 <__cmpsf2>
    325e:	88 23       	and	r24, r24
    3260:	0c f4       	brge	.+2      	; 0x3264 <vDisplayWriteStringAtPos+0x6fe>
    3262:	d6 cd       	rjmp	.-1108   	; 0x2e10 <vDisplayWriteStringAtPos+0x2aa>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	26 ce       	rjmp	.-948    	; 0x2eb6 <vDisplayWriteStringAtPos+0x350>
        ++places;
        --exponent;
    }

    if (places == 0)
        *buffer++ = '0';
    326a:	20 e3       	ldi	r18, 0x30	; 48
    326c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    326e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    3270:	20 83       	st	Z, r18

    *buffer++ = '.';
    3272:	7f 01       	movw	r14, r30
    3274:	32 e0       	ldi	r19, 0x02	; 2
    3276:	e3 0e       	add	r14, r19
    3278:	f1 1c       	adc	r15, r1
    327a:	8e e2       	ldi	r24, 0x2E	; 46
    327c:	81 83       	std	Z+1, r24	; 0x01
    327e:	46 ce       	rjmp	.-884    	; 0x2f0c <vDisplayWriteStringAtPos+0x3a6>
void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
	va_end(arg);	
}
    3280:	6d 96       	adiw	r28, 0x1d	; 29
    3282:	cd bf       	out	0x3d, r28	; 61
    3284:	de bf       	out	0x3e, r29	; 62
    3286:	df 91       	pop	r29
    3288:	cf 91       	pop	r28
    328a:	1f 91       	pop	r17
    328c:	0f 91       	pop	r16
    328e:	ff 90       	pop	r15
    3290:	ef 90       	pop	r14
    3292:	df 90       	pop	r13
    3294:	cf 90       	pop	r12
    3296:	bf 90       	pop	r11
    3298:	af 90       	pop	r10
    329a:	9f 90       	pop	r9
    329c:	8f 90       	pop	r8
    329e:	7f 90       	pop	r7
    32a0:	6f 90       	pop	r6
    32a2:	5f 90       	pop	r5
    32a4:	4f 90       	pop	r4
    32a6:	3f 90       	pop	r3
    32a8:	2f 90       	pop	r2
    32aa:	08 95       	ret

000032ac <__subsf3>:
    32ac:	50 58       	subi	r21, 0x80	; 128

000032ae <__addsf3>:
    32ae:	bb 27       	eor	r27, r27
    32b0:	aa 27       	eor	r26, r26
    32b2:	0e 94 6e 19 	call	0x32dc	; 0x32dc <__addsf3x>
    32b6:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__fp_round>
    32ba:	0e 94 18 1b 	call	0x3630	; 0x3630 <__fp_pscA>
    32be:	38 f0       	brcs	.+14     	; 0x32ce <__addsf3+0x20>
    32c0:	0e 94 1f 1b 	call	0x363e	; 0x363e <__fp_pscB>
    32c4:	20 f0       	brcs	.+8      	; 0x32ce <__addsf3+0x20>
    32c6:	39 f4       	brne	.+14     	; 0x32d6 <__addsf3+0x28>
    32c8:	9f 3f       	cpi	r25, 0xFF	; 255
    32ca:	19 f4       	brne	.+6      	; 0x32d2 <__addsf3+0x24>
    32cc:	26 f4       	brtc	.+8      	; 0x32d6 <__addsf3+0x28>
    32ce:	0c 94 15 1b 	jmp	0x362a	; 0x362a <__fp_nan>
    32d2:	0e f4       	brtc	.+2      	; 0x32d6 <__addsf3+0x28>
    32d4:	e0 95       	com	r30
    32d6:	e7 fb       	bst	r30, 7
    32d8:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <__fp_inf>

000032dc <__addsf3x>:
    32dc:	e9 2f       	mov	r30, r25
    32de:	0e 94 37 1b 	call	0x366e	; 0x366e <__fp_split3>
    32e2:	58 f3       	brcs	.-42     	; 0x32ba <__addsf3+0xc>
    32e4:	ba 17       	cp	r27, r26
    32e6:	62 07       	cpc	r22, r18
    32e8:	73 07       	cpc	r23, r19
    32ea:	84 07       	cpc	r24, r20
    32ec:	95 07       	cpc	r25, r21
    32ee:	20 f0       	brcs	.+8      	; 0x32f8 <__addsf3x+0x1c>
    32f0:	79 f4       	brne	.+30     	; 0x3310 <__addsf3x+0x34>
    32f2:	a6 f5       	brtc	.+104    	; 0x335c <__addsf3x+0x80>
    32f4:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <__fp_zero>
    32f8:	0e f4       	brtc	.+2      	; 0x32fc <__addsf3x+0x20>
    32fa:	e0 95       	com	r30
    32fc:	0b 2e       	mov	r0, r27
    32fe:	ba 2f       	mov	r27, r26
    3300:	a0 2d       	mov	r26, r0
    3302:	0b 01       	movw	r0, r22
    3304:	b9 01       	movw	r22, r18
    3306:	90 01       	movw	r18, r0
    3308:	0c 01       	movw	r0, r24
    330a:	ca 01       	movw	r24, r20
    330c:	a0 01       	movw	r20, r0
    330e:	11 24       	eor	r1, r1
    3310:	ff 27       	eor	r31, r31
    3312:	59 1b       	sub	r21, r25
    3314:	99 f0       	breq	.+38     	; 0x333c <__addsf3x+0x60>
    3316:	59 3f       	cpi	r21, 0xF9	; 249
    3318:	50 f4       	brcc	.+20     	; 0x332e <__addsf3x+0x52>
    331a:	50 3e       	cpi	r21, 0xE0	; 224
    331c:	68 f1       	brcs	.+90     	; 0x3378 <__addsf3x+0x9c>
    331e:	1a 16       	cp	r1, r26
    3320:	f0 40       	sbci	r31, 0x00	; 0
    3322:	a2 2f       	mov	r26, r18
    3324:	23 2f       	mov	r18, r19
    3326:	34 2f       	mov	r19, r20
    3328:	44 27       	eor	r20, r20
    332a:	58 5f       	subi	r21, 0xF8	; 248
    332c:	f3 cf       	rjmp	.-26     	; 0x3314 <__addsf3x+0x38>
    332e:	46 95       	lsr	r20
    3330:	37 95       	ror	r19
    3332:	27 95       	ror	r18
    3334:	a7 95       	ror	r26
    3336:	f0 40       	sbci	r31, 0x00	; 0
    3338:	53 95       	inc	r21
    333a:	c9 f7       	brne	.-14     	; 0x332e <__addsf3x+0x52>
    333c:	7e f4       	brtc	.+30     	; 0x335c <__addsf3x+0x80>
    333e:	1f 16       	cp	r1, r31
    3340:	ba 0b       	sbc	r27, r26
    3342:	62 0b       	sbc	r22, r18
    3344:	73 0b       	sbc	r23, r19
    3346:	84 0b       	sbc	r24, r20
    3348:	ba f0       	brmi	.+46     	; 0x3378 <__addsf3x+0x9c>
    334a:	91 50       	subi	r25, 0x01	; 1
    334c:	a1 f0       	breq	.+40     	; 0x3376 <__addsf3x+0x9a>
    334e:	ff 0f       	add	r31, r31
    3350:	bb 1f       	adc	r27, r27
    3352:	66 1f       	adc	r22, r22
    3354:	77 1f       	adc	r23, r23
    3356:	88 1f       	adc	r24, r24
    3358:	c2 f7       	brpl	.-16     	; 0x334a <__addsf3x+0x6e>
    335a:	0e c0       	rjmp	.+28     	; 0x3378 <__addsf3x+0x9c>
    335c:	ba 0f       	add	r27, r26
    335e:	62 1f       	adc	r22, r18
    3360:	73 1f       	adc	r23, r19
    3362:	84 1f       	adc	r24, r20
    3364:	48 f4       	brcc	.+18     	; 0x3378 <__addsf3x+0x9c>
    3366:	87 95       	ror	r24
    3368:	77 95       	ror	r23
    336a:	67 95       	ror	r22
    336c:	b7 95       	ror	r27
    336e:	f7 95       	ror	r31
    3370:	9e 3f       	cpi	r25, 0xFE	; 254
    3372:	08 f0       	brcs	.+2      	; 0x3376 <__addsf3x+0x9a>
    3374:	b0 cf       	rjmp	.-160    	; 0x32d6 <__addsf3+0x28>
    3376:	93 95       	inc	r25
    3378:	88 0f       	add	r24, r24
    337a:	08 f0       	brcs	.+2      	; 0x337e <__addsf3x+0xa2>
    337c:	99 27       	eor	r25, r25
    337e:	ee 0f       	add	r30, r30
    3380:	97 95       	ror	r25
    3382:	87 95       	ror	r24
    3384:	08 95       	ret

00003386 <__cmpsf2>:
    3386:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__fp_cmp>
    338a:	08 f4       	brcc	.+2      	; 0x338e <__cmpsf2+0x8>
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	08 95       	ret

00003390 <__divsf3>:
    3390:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__divsf3x>
    3394:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__fp_round>
    3398:	0e 94 1f 1b 	call	0x363e	; 0x363e <__fp_pscB>
    339c:	58 f0       	brcs	.+22     	; 0x33b4 <__divsf3+0x24>
    339e:	0e 94 18 1b 	call	0x3630	; 0x3630 <__fp_pscA>
    33a2:	40 f0       	brcs	.+16     	; 0x33b4 <__divsf3+0x24>
    33a4:	29 f4       	brne	.+10     	; 0x33b0 <__divsf3+0x20>
    33a6:	5f 3f       	cpi	r21, 0xFF	; 255
    33a8:	29 f0       	breq	.+10     	; 0x33b4 <__divsf3+0x24>
    33aa:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <__fp_inf>
    33ae:	51 11       	cpse	r21, r1
    33b0:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <__fp_szero>
    33b4:	0c 94 15 1b 	jmp	0x362a	; 0x362a <__fp_nan>

000033b8 <__divsf3x>:
    33b8:	0e 94 37 1b 	call	0x366e	; 0x366e <__fp_split3>
    33bc:	68 f3       	brcs	.-38     	; 0x3398 <__divsf3+0x8>

000033be <__divsf3_pse>:
    33be:	99 23       	and	r25, r25
    33c0:	b1 f3       	breq	.-20     	; 0x33ae <__divsf3+0x1e>
    33c2:	55 23       	and	r21, r21
    33c4:	91 f3       	breq	.-28     	; 0x33aa <__divsf3+0x1a>
    33c6:	95 1b       	sub	r25, r21
    33c8:	55 0b       	sbc	r21, r21
    33ca:	bb 27       	eor	r27, r27
    33cc:	aa 27       	eor	r26, r26
    33ce:	62 17       	cp	r22, r18
    33d0:	73 07       	cpc	r23, r19
    33d2:	84 07       	cpc	r24, r20
    33d4:	38 f0       	brcs	.+14     	; 0x33e4 <__divsf3_pse+0x26>
    33d6:	9f 5f       	subi	r25, 0xFF	; 255
    33d8:	5f 4f       	sbci	r21, 0xFF	; 255
    33da:	22 0f       	add	r18, r18
    33dc:	33 1f       	adc	r19, r19
    33de:	44 1f       	adc	r20, r20
    33e0:	aa 1f       	adc	r26, r26
    33e2:	a9 f3       	breq	.-22     	; 0x33ce <__divsf3_pse+0x10>
    33e4:	35 d0       	rcall	.+106    	; 0x3450 <__divsf3_pse+0x92>
    33e6:	0e 2e       	mov	r0, r30
    33e8:	3a f0       	brmi	.+14     	; 0x33f8 <__divsf3_pse+0x3a>
    33ea:	e0 e8       	ldi	r30, 0x80	; 128
    33ec:	32 d0       	rcall	.+100    	; 0x3452 <__divsf3_pse+0x94>
    33ee:	91 50       	subi	r25, 0x01	; 1
    33f0:	50 40       	sbci	r21, 0x00	; 0
    33f2:	e6 95       	lsr	r30
    33f4:	00 1c       	adc	r0, r0
    33f6:	ca f7       	brpl	.-14     	; 0x33ea <__divsf3_pse+0x2c>
    33f8:	2b d0       	rcall	.+86     	; 0x3450 <__divsf3_pse+0x92>
    33fa:	fe 2f       	mov	r31, r30
    33fc:	29 d0       	rcall	.+82     	; 0x3450 <__divsf3_pse+0x92>
    33fe:	66 0f       	add	r22, r22
    3400:	77 1f       	adc	r23, r23
    3402:	88 1f       	adc	r24, r24
    3404:	bb 1f       	adc	r27, r27
    3406:	26 17       	cp	r18, r22
    3408:	37 07       	cpc	r19, r23
    340a:	48 07       	cpc	r20, r24
    340c:	ab 07       	cpc	r26, r27
    340e:	b0 e8       	ldi	r27, 0x80	; 128
    3410:	09 f0       	breq	.+2      	; 0x3414 <__divsf3_pse+0x56>
    3412:	bb 0b       	sbc	r27, r27
    3414:	80 2d       	mov	r24, r0
    3416:	bf 01       	movw	r22, r30
    3418:	ff 27       	eor	r31, r31
    341a:	93 58       	subi	r25, 0x83	; 131
    341c:	5f 4f       	sbci	r21, 0xFF	; 255
    341e:	3a f0       	brmi	.+14     	; 0x342e <__divsf3_pse+0x70>
    3420:	9e 3f       	cpi	r25, 0xFE	; 254
    3422:	51 05       	cpc	r21, r1
    3424:	78 f0       	brcs	.+30     	; 0x3444 <__divsf3_pse+0x86>
    3426:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <__fp_inf>
    342a:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <__fp_szero>
    342e:	5f 3f       	cpi	r21, 0xFF	; 255
    3430:	e4 f3       	brlt	.-8      	; 0x342a <__divsf3_pse+0x6c>
    3432:	98 3e       	cpi	r25, 0xE8	; 232
    3434:	d4 f3       	brlt	.-12     	; 0x342a <__divsf3_pse+0x6c>
    3436:	86 95       	lsr	r24
    3438:	77 95       	ror	r23
    343a:	67 95       	ror	r22
    343c:	b7 95       	ror	r27
    343e:	f7 95       	ror	r31
    3440:	9f 5f       	subi	r25, 0xFF	; 255
    3442:	c9 f7       	brne	.-14     	; 0x3436 <__divsf3_pse+0x78>
    3444:	88 0f       	add	r24, r24
    3446:	91 1d       	adc	r25, r1
    3448:	96 95       	lsr	r25
    344a:	87 95       	ror	r24
    344c:	97 f9       	bld	r25, 7
    344e:	08 95       	ret
    3450:	e1 e0       	ldi	r30, 0x01	; 1
    3452:	66 0f       	add	r22, r22
    3454:	77 1f       	adc	r23, r23
    3456:	88 1f       	adc	r24, r24
    3458:	bb 1f       	adc	r27, r27
    345a:	62 17       	cp	r22, r18
    345c:	73 07       	cpc	r23, r19
    345e:	84 07       	cpc	r24, r20
    3460:	ba 07       	cpc	r27, r26
    3462:	20 f0       	brcs	.+8      	; 0x346c <__divsf3_pse+0xae>
    3464:	62 1b       	sub	r22, r18
    3466:	73 0b       	sbc	r23, r19
    3468:	84 0b       	sbc	r24, r20
    346a:	ba 0b       	sbc	r27, r26
    346c:	ee 1f       	adc	r30, r30
    346e:	88 f7       	brcc	.-30     	; 0x3452 <__divsf3_pse+0x94>
    3470:	e0 95       	com	r30
    3472:	08 95       	ret

00003474 <__fixsfsi>:
    3474:	0e 94 41 1a 	call	0x3482	; 0x3482 <__fixunssfsi>
    3478:	68 94       	set
    347a:	b1 11       	cpse	r27, r1
    347c:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <__fp_szero>
    3480:	08 95       	ret

00003482 <__fixunssfsi>:
    3482:	0e 94 3f 1b 	call	0x367e	; 0x367e <__fp_splitA>
    3486:	88 f0       	brcs	.+34     	; 0x34aa <__fixunssfsi+0x28>
    3488:	9f 57       	subi	r25, 0x7F	; 127
    348a:	98 f0       	brcs	.+38     	; 0x34b2 <__fixunssfsi+0x30>
    348c:	b9 2f       	mov	r27, r25
    348e:	99 27       	eor	r25, r25
    3490:	b7 51       	subi	r27, 0x17	; 23
    3492:	b0 f0       	brcs	.+44     	; 0x34c0 <__fixunssfsi+0x3e>
    3494:	e1 f0       	breq	.+56     	; 0x34ce <__fixunssfsi+0x4c>
    3496:	66 0f       	add	r22, r22
    3498:	77 1f       	adc	r23, r23
    349a:	88 1f       	adc	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	1a f0       	brmi	.+6      	; 0x34a6 <__fixunssfsi+0x24>
    34a0:	ba 95       	dec	r27
    34a2:	c9 f7       	brne	.-14     	; 0x3496 <__fixunssfsi+0x14>
    34a4:	14 c0       	rjmp	.+40     	; 0x34ce <__fixunssfsi+0x4c>
    34a6:	b1 30       	cpi	r27, 0x01	; 1
    34a8:	91 f0       	breq	.+36     	; 0x34ce <__fixunssfsi+0x4c>
    34aa:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__fp_zero>
    34ae:	b1 e0       	ldi	r27, 0x01	; 1
    34b0:	08 95       	ret
    34b2:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <__fp_zero>
    34b6:	67 2f       	mov	r22, r23
    34b8:	78 2f       	mov	r23, r24
    34ba:	88 27       	eor	r24, r24
    34bc:	b8 5f       	subi	r27, 0xF8	; 248
    34be:	39 f0       	breq	.+14     	; 0x34ce <__fixunssfsi+0x4c>
    34c0:	b9 3f       	cpi	r27, 0xF9	; 249
    34c2:	cc f3       	brlt	.-14     	; 0x34b6 <__fixunssfsi+0x34>
    34c4:	86 95       	lsr	r24
    34c6:	77 95       	ror	r23
    34c8:	67 95       	ror	r22
    34ca:	b3 95       	inc	r27
    34cc:	d9 f7       	brne	.-10     	; 0x34c4 <__fixunssfsi+0x42>
    34ce:	3e f4       	brtc	.+14     	; 0x34de <__fixunssfsi+0x5c>
    34d0:	90 95       	com	r25
    34d2:	80 95       	com	r24
    34d4:	70 95       	com	r23
    34d6:	61 95       	neg	r22
    34d8:	7f 4f       	sbci	r23, 0xFF	; 255
    34da:	8f 4f       	sbci	r24, 0xFF	; 255
    34dc:	9f 4f       	sbci	r25, 0xFF	; 255
    34de:	08 95       	ret

000034e0 <__floatunsisf>:
    34e0:	e8 94       	clt
    34e2:	09 c0       	rjmp	.+18     	; 0x34f6 <__floatsisf+0x12>

000034e4 <__floatsisf>:
    34e4:	97 fb       	bst	r25, 7
    34e6:	3e f4       	brtc	.+14     	; 0x34f6 <__floatsisf+0x12>
    34e8:	90 95       	com	r25
    34ea:	80 95       	com	r24
    34ec:	70 95       	com	r23
    34ee:	61 95       	neg	r22
    34f0:	7f 4f       	sbci	r23, 0xFF	; 255
    34f2:	8f 4f       	sbci	r24, 0xFF	; 255
    34f4:	9f 4f       	sbci	r25, 0xFF	; 255
    34f6:	99 23       	and	r25, r25
    34f8:	a9 f0       	breq	.+42     	; 0x3524 <__floatsisf+0x40>
    34fa:	f9 2f       	mov	r31, r25
    34fc:	96 e9       	ldi	r25, 0x96	; 150
    34fe:	bb 27       	eor	r27, r27
    3500:	93 95       	inc	r25
    3502:	f6 95       	lsr	r31
    3504:	87 95       	ror	r24
    3506:	77 95       	ror	r23
    3508:	67 95       	ror	r22
    350a:	b7 95       	ror	r27
    350c:	f1 11       	cpse	r31, r1
    350e:	f8 cf       	rjmp	.-16     	; 0x3500 <__floatsisf+0x1c>
    3510:	fa f4       	brpl	.+62     	; 0x3550 <__floatsisf+0x6c>
    3512:	bb 0f       	add	r27, r27
    3514:	11 f4       	brne	.+4      	; 0x351a <__floatsisf+0x36>
    3516:	60 ff       	sbrs	r22, 0
    3518:	1b c0       	rjmp	.+54     	; 0x3550 <__floatsisf+0x6c>
    351a:	6f 5f       	subi	r22, 0xFF	; 255
    351c:	7f 4f       	sbci	r23, 0xFF	; 255
    351e:	8f 4f       	sbci	r24, 0xFF	; 255
    3520:	9f 4f       	sbci	r25, 0xFF	; 255
    3522:	16 c0       	rjmp	.+44     	; 0x3550 <__floatsisf+0x6c>
    3524:	88 23       	and	r24, r24
    3526:	11 f0       	breq	.+4      	; 0x352c <__floatsisf+0x48>
    3528:	96 e9       	ldi	r25, 0x96	; 150
    352a:	11 c0       	rjmp	.+34     	; 0x354e <__floatsisf+0x6a>
    352c:	77 23       	and	r23, r23
    352e:	21 f0       	breq	.+8      	; 0x3538 <__floatsisf+0x54>
    3530:	9e e8       	ldi	r25, 0x8E	; 142
    3532:	87 2f       	mov	r24, r23
    3534:	76 2f       	mov	r23, r22
    3536:	05 c0       	rjmp	.+10     	; 0x3542 <__floatsisf+0x5e>
    3538:	66 23       	and	r22, r22
    353a:	71 f0       	breq	.+28     	; 0x3558 <__floatsisf+0x74>
    353c:	96 e8       	ldi	r25, 0x86	; 134
    353e:	86 2f       	mov	r24, r22
    3540:	70 e0       	ldi	r23, 0x00	; 0
    3542:	60 e0       	ldi	r22, 0x00	; 0
    3544:	2a f0       	brmi	.+10     	; 0x3550 <__floatsisf+0x6c>
    3546:	9a 95       	dec	r25
    3548:	66 0f       	add	r22, r22
    354a:	77 1f       	adc	r23, r23
    354c:	88 1f       	adc	r24, r24
    354e:	da f7       	brpl	.-10     	; 0x3546 <__floatsisf+0x62>
    3550:	88 0f       	add	r24, r24
    3552:	96 95       	lsr	r25
    3554:	87 95       	ror	r24
    3556:	97 f9       	bld	r25, 7
    3558:	08 95       	ret

0000355a <__floatundisf>:
    355a:	e8 94       	clt

0000355c <__fp_di2sf>:
    355c:	f9 2f       	mov	r31, r25
    355e:	96 eb       	ldi	r25, 0xB6	; 182
    3560:	ff 23       	and	r31, r31
    3562:	81 f0       	breq	.+32     	; 0x3584 <__fp_di2sf+0x28>
    3564:	12 16       	cp	r1, r18
    3566:	13 06       	cpc	r1, r19
    3568:	14 06       	cpc	r1, r20
    356a:	44 0b       	sbc	r20, r20
    356c:	93 95       	inc	r25
    356e:	f6 95       	lsr	r31
    3570:	87 95       	ror	r24
    3572:	77 95       	ror	r23
    3574:	67 95       	ror	r22
    3576:	57 95       	ror	r21
    3578:	40 40       	sbci	r20, 0x00	; 0
    357a:	ff 23       	and	r31, r31
    357c:	b9 f7       	brne	.-18     	; 0x356c <__fp_di2sf+0x10>
    357e:	1b c0       	rjmp	.+54     	; 0x35b6 <__fp_di2sf+0x5a>
    3580:	99 27       	eor	r25, r25
    3582:	08 95       	ret
    3584:	88 23       	and	r24, r24
    3586:	51 f4       	brne	.+20     	; 0x359c <__fp_di2sf+0x40>
    3588:	98 50       	subi	r25, 0x08	; 8
    358a:	d2 f7       	brpl	.-12     	; 0x3580 <__fp_di2sf+0x24>
    358c:	87 2b       	or	r24, r23
    358e:	76 2f       	mov	r23, r22
    3590:	65 2f       	mov	r22, r21
    3592:	54 2f       	mov	r21, r20
    3594:	43 2f       	mov	r20, r19
    3596:	32 2f       	mov	r19, r18
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	b1 f3       	breq	.-20     	; 0x3588 <__fp_di2sf+0x2c>
    359c:	12 16       	cp	r1, r18
    359e:	13 06       	cpc	r1, r19
    35a0:	14 06       	cpc	r1, r20
    35a2:	44 0b       	sbc	r20, r20
    35a4:	88 23       	and	r24, r24
    35a6:	3a f0       	brmi	.+14     	; 0x35b6 <__fp_di2sf+0x5a>
    35a8:	9a 95       	dec	r25
    35aa:	44 0f       	add	r20, r20
    35ac:	55 1f       	adc	r21, r21
    35ae:	66 1f       	adc	r22, r22
    35b0:	77 1f       	adc	r23, r23
    35b2:	88 1f       	adc	r24, r24
    35b4:	ca f7       	brpl	.-14     	; 0x35a8 <__fp_di2sf+0x4c>
    35b6:	55 23       	and	r21, r21
    35b8:	4a f4       	brpl	.+18     	; 0x35cc <__fp_di2sf+0x70>
    35ba:	44 0f       	add	r20, r20
    35bc:	55 1f       	adc	r21, r21
    35be:	11 f4       	brne	.+4      	; 0x35c4 <__fp_di2sf+0x68>
    35c0:	60 ff       	sbrs	r22, 0
    35c2:	04 c0       	rjmp	.+8      	; 0x35cc <__fp_di2sf+0x70>
    35c4:	6f 5f       	subi	r22, 0xFF	; 255
    35c6:	7f 4f       	sbci	r23, 0xFF	; 255
    35c8:	8f 4f       	sbci	r24, 0xFF	; 255
    35ca:	9f 4f       	sbci	r25, 0xFF	; 255
    35cc:	88 0f       	add	r24, r24
    35ce:	96 95       	lsr	r25
    35d0:	87 95       	ror	r24
    35d2:	97 f9       	bld	r25, 7
    35d4:	08 95       	ret

000035d6 <__fp_cmp>:
    35d6:	99 0f       	add	r25, r25
    35d8:	00 08       	sbc	r0, r0
    35da:	55 0f       	add	r21, r21
    35dc:	aa 0b       	sbc	r26, r26
    35de:	e0 e8       	ldi	r30, 0x80	; 128
    35e0:	fe ef       	ldi	r31, 0xFE	; 254
    35e2:	16 16       	cp	r1, r22
    35e4:	17 06       	cpc	r1, r23
    35e6:	e8 07       	cpc	r30, r24
    35e8:	f9 07       	cpc	r31, r25
    35ea:	c0 f0       	brcs	.+48     	; 0x361c <__fp_cmp+0x46>
    35ec:	12 16       	cp	r1, r18
    35ee:	13 06       	cpc	r1, r19
    35f0:	e4 07       	cpc	r30, r20
    35f2:	f5 07       	cpc	r31, r21
    35f4:	98 f0       	brcs	.+38     	; 0x361c <__fp_cmp+0x46>
    35f6:	62 1b       	sub	r22, r18
    35f8:	73 0b       	sbc	r23, r19
    35fa:	84 0b       	sbc	r24, r20
    35fc:	95 0b       	sbc	r25, r21
    35fe:	39 f4       	brne	.+14     	; 0x360e <__fp_cmp+0x38>
    3600:	0a 26       	eor	r0, r26
    3602:	61 f0       	breq	.+24     	; 0x361c <__fp_cmp+0x46>
    3604:	23 2b       	or	r18, r19
    3606:	24 2b       	or	r18, r20
    3608:	25 2b       	or	r18, r21
    360a:	21 f4       	brne	.+8      	; 0x3614 <__fp_cmp+0x3e>
    360c:	08 95       	ret
    360e:	0a 26       	eor	r0, r26
    3610:	09 f4       	brne	.+2      	; 0x3614 <__fp_cmp+0x3e>
    3612:	a1 40       	sbci	r26, 0x01	; 1
    3614:	a6 95       	lsr	r26
    3616:	8f ef       	ldi	r24, 0xFF	; 255
    3618:	81 1d       	adc	r24, r1
    361a:	81 1d       	adc	r24, r1
    361c:	08 95       	ret

0000361e <__fp_inf>:
    361e:	97 f9       	bld	r25, 7
    3620:	9f 67       	ori	r25, 0x7F	; 127
    3622:	80 e8       	ldi	r24, 0x80	; 128
    3624:	70 e0       	ldi	r23, 0x00	; 0
    3626:	60 e0       	ldi	r22, 0x00	; 0
    3628:	08 95       	ret

0000362a <__fp_nan>:
    362a:	9f ef       	ldi	r25, 0xFF	; 255
    362c:	80 ec       	ldi	r24, 0xC0	; 192
    362e:	08 95       	ret

00003630 <__fp_pscA>:
    3630:	00 24       	eor	r0, r0
    3632:	0a 94       	dec	r0
    3634:	16 16       	cp	r1, r22
    3636:	17 06       	cpc	r1, r23
    3638:	18 06       	cpc	r1, r24
    363a:	09 06       	cpc	r0, r25
    363c:	08 95       	ret

0000363e <__fp_pscB>:
    363e:	00 24       	eor	r0, r0
    3640:	0a 94       	dec	r0
    3642:	12 16       	cp	r1, r18
    3644:	13 06       	cpc	r1, r19
    3646:	14 06       	cpc	r1, r20
    3648:	05 06       	cpc	r0, r21
    364a:	08 95       	ret

0000364c <__fp_round>:
    364c:	09 2e       	mov	r0, r25
    364e:	03 94       	inc	r0
    3650:	00 0c       	add	r0, r0
    3652:	11 f4       	brne	.+4      	; 0x3658 <__fp_round+0xc>
    3654:	88 23       	and	r24, r24
    3656:	52 f0       	brmi	.+20     	; 0x366c <__fp_round+0x20>
    3658:	bb 0f       	add	r27, r27
    365a:	40 f4       	brcc	.+16     	; 0x366c <__fp_round+0x20>
    365c:	bf 2b       	or	r27, r31
    365e:	11 f4       	brne	.+4      	; 0x3664 <__fp_round+0x18>
    3660:	60 ff       	sbrs	r22, 0
    3662:	04 c0       	rjmp	.+8      	; 0x366c <__fp_round+0x20>
    3664:	6f 5f       	subi	r22, 0xFF	; 255
    3666:	7f 4f       	sbci	r23, 0xFF	; 255
    3668:	8f 4f       	sbci	r24, 0xFF	; 255
    366a:	9f 4f       	sbci	r25, 0xFF	; 255
    366c:	08 95       	ret

0000366e <__fp_split3>:
    366e:	57 fd       	sbrc	r21, 7
    3670:	90 58       	subi	r25, 0x80	; 128
    3672:	44 0f       	add	r20, r20
    3674:	55 1f       	adc	r21, r21
    3676:	59 f0       	breq	.+22     	; 0x368e <__fp_splitA+0x10>
    3678:	5f 3f       	cpi	r21, 0xFF	; 255
    367a:	71 f0       	breq	.+28     	; 0x3698 <__fp_splitA+0x1a>
    367c:	47 95       	ror	r20

0000367e <__fp_splitA>:
    367e:	88 0f       	add	r24, r24
    3680:	97 fb       	bst	r25, 7
    3682:	99 1f       	adc	r25, r25
    3684:	61 f0       	breq	.+24     	; 0x369e <__fp_splitA+0x20>
    3686:	9f 3f       	cpi	r25, 0xFF	; 255
    3688:	79 f0       	breq	.+30     	; 0x36a8 <__fp_splitA+0x2a>
    368a:	87 95       	ror	r24
    368c:	08 95       	ret
    368e:	12 16       	cp	r1, r18
    3690:	13 06       	cpc	r1, r19
    3692:	14 06       	cpc	r1, r20
    3694:	55 1f       	adc	r21, r21
    3696:	f2 cf       	rjmp	.-28     	; 0x367c <__fp_split3+0xe>
    3698:	46 95       	lsr	r20
    369a:	f1 df       	rcall	.-30     	; 0x367e <__fp_splitA>
    369c:	08 c0       	rjmp	.+16     	; 0x36ae <__fp_splitA+0x30>
    369e:	16 16       	cp	r1, r22
    36a0:	17 06       	cpc	r1, r23
    36a2:	18 06       	cpc	r1, r24
    36a4:	99 1f       	adc	r25, r25
    36a6:	f1 cf       	rjmp	.-30     	; 0x368a <__fp_splitA+0xc>
    36a8:	86 95       	lsr	r24
    36aa:	71 05       	cpc	r23, r1
    36ac:	61 05       	cpc	r22, r1
    36ae:	08 94       	sec
    36b0:	08 95       	ret

000036b2 <__fp_zero>:
    36b2:	e8 94       	clt

000036b4 <__fp_szero>:
    36b4:	bb 27       	eor	r27, r27
    36b6:	66 27       	eor	r22, r22
    36b8:	77 27       	eor	r23, r23
    36ba:	cb 01       	movw	r24, r22
    36bc:	97 f9       	bld	r25, 7
    36be:	08 95       	ret

000036c0 <__gesf2>:
    36c0:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__fp_cmp>
    36c4:	08 f4       	brcc	.+2      	; 0x36c8 <__gesf2+0x8>
    36c6:	8f ef       	ldi	r24, 0xFF	; 255
    36c8:	08 95       	ret

000036ca <__mulsf3>:
    36ca:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3x>
    36ce:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__fp_round>
    36d2:	0e 94 18 1b 	call	0x3630	; 0x3630 <__fp_pscA>
    36d6:	38 f0       	brcs	.+14     	; 0x36e6 <__mulsf3+0x1c>
    36d8:	0e 94 1f 1b 	call	0x363e	; 0x363e <__fp_pscB>
    36dc:	20 f0       	brcs	.+8      	; 0x36e6 <__mulsf3+0x1c>
    36de:	95 23       	and	r25, r21
    36e0:	11 f0       	breq	.+4      	; 0x36e6 <__mulsf3+0x1c>
    36e2:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <__fp_inf>
    36e6:	0c 94 15 1b 	jmp	0x362a	; 0x362a <__fp_nan>
    36ea:	11 24       	eor	r1, r1
    36ec:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <__fp_szero>

000036f0 <__mulsf3x>:
    36f0:	0e 94 37 1b 	call	0x366e	; 0x366e <__fp_split3>
    36f4:	70 f3       	brcs	.-36     	; 0x36d2 <__mulsf3+0x8>

000036f6 <__mulsf3_pse>:
    36f6:	95 9f       	mul	r25, r21
    36f8:	c1 f3       	breq	.-16     	; 0x36ea <__mulsf3+0x20>
    36fa:	95 0f       	add	r25, r21
    36fc:	50 e0       	ldi	r21, 0x00	; 0
    36fe:	55 1f       	adc	r21, r21
    3700:	62 9f       	mul	r22, r18
    3702:	f0 01       	movw	r30, r0
    3704:	72 9f       	mul	r23, r18
    3706:	bb 27       	eor	r27, r27
    3708:	f0 0d       	add	r31, r0
    370a:	b1 1d       	adc	r27, r1
    370c:	63 9f       	mul	r22, r19
    370e:	aa 27       	eor	r26, r26
    3710:	f0 0d       	add	r31, r0
    3712:	b1 1d       	adc	r27, r1
    3714:	aa 1f       	adc	r26, r26
    3716:	64 9f       	mul	r22, r20
    3718:	66 27       	eor	r22, r22
    371a:	b0 0d       	add	r27, r0
    371c:	a1 1d       	adc	r26, r1
    371e:	66 1f       	adc	r22, r22
    3720:	82 9f       	mul	r24, r18
    3722:	22 27       	eor	r18, r18
    3724:	b0 0d       	add	r27, r0
    3726:	a1 1d       	adc	r26, r1
    3728:	62 1f       	adc	r22, r18
    372a:	73 9f       	mul	r23, r19
    372c:	b0 0d       	add	r27, r0
    372e:	a1 1d       	adc	r26, r1
    3730:	62 1f       	adc	r22, r18
    3732:	83 9f       	mul	r24, r19
    3734:	a0 0d       	add	r26, r0
    3736:	61 1d       	adc	r22, r1
    3738:	22 1f       	adc	r18, r18
    373a:	74 9f       	mul	r23, r20
    373c:	33 27       	eor	r19, r19
    373e:	a0 0d       	add	r26, r0
    3740:	61 1d       	adc	r22, r1
    3742:	23 1f       	adc	r18, r19
    3744:	84 9f       	mul	r24, r20
    3746:	60 0d       	add	r22, r0
    3748:	21 1d       	adc	r18, r1
    374a:	82 2f       	mov	r24, r18
    374c:	76 2f       	mov	r23, r22
    374e:	6a 2f       	mov	r22, r26
    3750:	11 24       	eor	r1, r1
    3752:	9f 57       	subi	r25, 0x7F	; 127
    3754:	50 40       	sbci	r21, 0x00	; 0
    3756:	9a f0       	brmi	.+38     	; 0x377e <__mulsf3_pse+0x88>
    3758:	f1 f0       	breq	.+60     	; 0x3796 <__mulsf3_pse+0xa0>
    375a:	88 23       	and	r24, r24
    375c:	4a f0       	brmi	.+18     	; 0x3770 <__mulsf3_pse+0x7a>
    375e:	ee 0f       	add	r30, r30
    3760:	ff 1f       	adc	r31, r31
    3762:	bb 1f       	adc	r27, r27
    3764:	66 1f       	adc	r22, r22
    3766:	77 1f       	adc	r23, r23
    3768:	88 1f       	adc	r24, r24
    376a:	91 50       	subi	r25, 0x01	; 1
    376c:	50 40       	sbci	r21, 0x00	; 0
    376e:	a9 f7       	brne	.-22     	; 0x375a <__mulsf3_pse+0x64>
    3770:	9e 3f       	cpi	r25, 0xFE	; 254
    3772:	51 05       	cpc	r21, r1
    3774:	80 f0       	brcs	.+32     	; 0x3796 <__mulsf3_pse+0xa0>
    3776:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <__fp_inf>
    377a:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <__fp_szero>
    377e:	5f 3f       	cpi	r21, 0xFF	; 255
    3780:	e4 f3       	brlt	.-8      	; 0x377a <__mulsf3_pse+0x84>
    3782:	98 3e       	cpi	r25, 0xE8	; 232
    3784:	d4 f3       	brlt	.-12     	; 0x377a <__mulsf3_pse+0x84>
    3786:	86 95       	lsr	r24
    3788:	77 95       	ror	r23
    378a:	67 95       	ror	r22
    378c:	b7 95       	ror	r27
    378e:	f7 95       	ror	r31
    3790:	e7 95       	ror	r30
    3792:	9f 5f       	subi	r25, 0xFF	; 255
    3794:	c1 f7       	brne	.-16     	; 0x3786 <__mulsf3_pse+0x90>
    3796:	fe 2b       	or	r31, r30
    3798:	88 0f       	add	r24, r24
    379a:	91 1d       	adc	r25, r1
    379c:	96 95       	lsr	r25
    379e:	87 95       	ror	r24
    37a0:	97 f9       	bld	r25, 7
    37a2:	08 95       	ret

000037a4 <vfprintf>:
    37a4:	2f 92       	push	r2
    37a6:	3f 92       	push	r3
    37a8:	4f 92       	push	r4
    37aa:	5f 92       	push	r5
    37ac:	6f 92       	push	r6
    37ae:	7f 92       	push	r7
    37b0:	8f 92       	push	r8
    37b2:	9f 92       	push	r9
    37b4:	af 92       	push	r10
    37b6:	bf 92       	push	r11
    37b8:	cf 92       	push	r12
    37ba:	df 92       	push	r13
    37bc:	ef 92       	push	r14
    37be:	ff 92       	push	r15
    37c0:	0f 93       	push	r16
    37c2:	1f 93       	push	r17
    37c4:	cf 93       	push	r28
    37c6:	df 93       	push	r29
    37c8:	cd b7       	in	r28, 0x3d	; 61
    37ca:	de b7       	in	r29, 0x3e	; 62
    37cc:	60 97       	sbiw	r28, 0x10	; 16
    37ce:	cd bf       	out	0x3d, r28	; 61
    37d0:	de bf       	out	0x3e, r29	; 62
    37d2:	7c 01       	movw	r14, r24
    37d4:	1b 01       	movw	r2, r22
    37d6:	6a 01       	movw	r12, r20
    37d8:	fc 01       	movw	r30, r24
    37da:	16 82       	std	Z+6, r1	; 0x06
    37dc:	17 82       	std	Z+7, r1	; 0x07
    37de:	83 81       	ldd	r24, Z+3	; 0x03
    37e0:	81 ff       	sbrs	r24, 1
    37e2:	44 c3       	rjmp	.+1672   	; 0x3e6c <vfprintf+0x6c8>
    37e4:	9e 01       	movw	r18, r28
    37e6:	2f 5f       	subi	r18, 0xFF	; 255
    37e8:	3f 4f       	sbci	r19, 0xFF	; 255
    37ea:	39 01       	movw	r6, r18
    37ec:	f7 01       	movw	r30, r14
    37ee:	93 81       	ldd	r25, Z+3	; 0x03
    37f0:	f1 01       	movw	r30, r2
    37f2:	93 fd       	sbrc	r25, 3
    37f4:	85 91       	lpm	r24, Z+
    37f6:	93 ff       	sbrs	r25, 3
    37f8:	81 91       	ld	r24, Z+
    37fa:	1f 01       	movw	r2, r30
    37fc:	88 23       	and	r24, r24
    37fe:	09 f4       	brne	.+2      	; 0x3802 <vfprintf+0x5e>
    3800:	31 c3       	rjmp	.+1634   	; 0x3e64 <vfprintf+0x6c0>
    3802:	85 32       	cpi	r24, 0x25	; 37
    3804:	39 f4       	brne	.+14     	; 0x3814 <vfprintf+0x70>
    3806:	93 fd       	sbrc	r25, 3
    3808:	85 91       	lpm	r24, Z+
    380a:	93 ff       	sbrs	r25, 3
    380c:	81 91       	ld	r24, Z+
    380e:	1f 01       	movw	r2, r30
    3810:	85 32       	cpi	r24, 0x25	; 37
    3812:	39 f4       	brne	.+14     	; 0x3822 <vfprintf+0x7e>
    3814:	b7 01       	movw	r22, r14
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    381c:	56 01       	movw	r10, r12
    381e:	65 01       	movw	r12, r10
    3820:	e5 cf       	rjmp	.-54     	; 0x37ec <vfprintf+0x48>
    3822:	10 e0       	ldi	r17, 0x00	; 0
    3824:	51 2c       	mov	r5, r1
    3826:	91 2c       	mov	r9, r1
    3828:	ff e1       	ldi	r31, 0x1F	; 31
    382a:	f9 15       	cp	r31, r9
    382c:	d8 f0       	brcs	.+54     	; 0x3864 <vfprintf+0xc0>
    382e:	8b 32       	cpi	r24, 0x2B	; 43
    3830:	79 f0       	breq	.+30     	; 0x3850 <vfprintf+0xac>
    3832:	38 f4       	brcc	.+14     	; 0x3842 <vfprintf+0x9e>
    3834:	80 32       	cpi	r24, 0x20	; 32
    3836:	79 f0       	breq	.+30     	; 0x3856 <vfprintf+0xb2>
    3838:	83 32       	cpi	r24, 0x23	; 35
    383a:	a1 f4       	brne	.+40     	; 0x3864 <vfprintf+0xc0>
    383c:	f9 2d       	mov	r31, r9
    383e:	f0 61       	ori	r31, 0x10	; 16
    3840:	2e c0       	rjmp	.+92     	; 0x389e <vfprintf+0xfa>
    3842:	8d 32       	cpi	r24, 0x2D	; 45
    3844:	61 f0       	breq	.+24     	; 0x385e <vfprintf+0xba>
    3846:	80 33       	cpi	r24, 0x30	; 48
    3848:	69 f4       	brne	.+26     	; 0x3864 <vfprintf+0xc0>
    384a:	29 2d       	mov	r18, r9
    384c:	21 60       	ori	r18, 0x01	; 1
    384e:	2d c0       	rjmp	.+90     	; 0x38aa <vfprintf+0x106>
    3850:	39 2d       	mov	r19, r9
    3852:	32 60       	ori	r19, 0x02	; 2
    3854:	93 2e       	mov	r9, r19
    3856:	89 2d       	mov	r24, r9
    3858:	84 60       	ori	r24, 0x04	; 4
    385a:	98 2e       	mov	r9, r24
    385c:	2a c0       	rjmp	.+84     	; 0x38b2 <vfprintf+0x10e>
    385e:	e9 2d       	mov	r30, r9
    3860:	e8 60       	ori	r30, 0x08	; 8
    3862:	15 c0       	rjmp	.+42     	; 0x388e <vfprintf+0xea>
    3864:	97 fc       	sbrc	r9, 7
    3866:	2d c0       	rjmp	.+90     	; 0x38c2 <vfprintf+0x11e>
    3868:	20 ed       	ldi	r18, 0xD0	; 208
    386a:	28 0f       	add	r18, r24
    386c:	2a 30       	cpi	r18, 0x0A	; 10
    386e:	88 f4       	brcc	.+34     	; 0x3892 <vfprintf+0xee>
    3870:	96 fe       	sbrs	r9, 6
    3872:	06 c0       	rjmp	.+12     	; 0x3880 <vfprintf+0xdc>
    3874:	3a e0       	ldi	r19, 0x0A	; 10
    3876:	13 9f       	mul	r17, r19
    3878:	20 0d       	add	r18, r0
    387a:	11 24       	eor	r1, r1
    387c:	12 2f       	mov	r17, r18
    387e:	19 c0       	rjmp	.+50     	; 0x38b2 <vfprintf+0x10e>
    3880:	8a e0       	ldi	r24, 0x0A	; 10
    3882:	58 9e       	mul	r5, r24
    3884:	20 0d       	add	r18, r0
    3886:	11 24       	eor	r1, r1
    3888:	52 2e       	mov	r5, r18
    388a:	e9 2d       	mov	r30, r9
    388c:	e0 62       	ori	r30, 0x20	; 32
    388e:	9e 2e       	mov	r9, r30
    3890:	10 c0       	rjmp	.+32     	; 0x38b2 <vfprintf+0x10e>
    3892:	8e 32       	cpi	r24, 0x2E	; 46
    3894:	31 f4       	brne	.+12     	; 0x38a2 <vfprintf+0xfe>
    3896:	96 fc       	sbrc	r9, 6
    3898:	e5 c2       	rjmp	.+1482   	; 0x3e64 <vfprintf+0x6c0>
    389a:	f9 2d       	mov	r31, r9
    389c:	f0 64       	ori	r31, 0x40	; 64
    389e:	9f 2e       	mov	r9, r31
    38a0:	08 c0       	rjmp	.+16     	; 0x38b2 <vfprintf+0x10e>
    38a2:	8c 36       	cpi	r24, 0x6C	; 108
    38a4:	21 f4       	brne	.+8      	; 0x38ae <vfprintf+0x10a>
    38a6:	29 2d       	mov	r18, r9
    38a8:	20 68       	ori	r18, 0x80	; 128
    38aa:	92 2e       	mov	r9, r18
    38ac:	02 c0       	rjmp	.+4      	; 0x38b2 <vfprintf+0x10e>
    38ae:	88 36       	cpi	r24, 0x68	; 104
    38b0:	41 f4       	brne	.+16     	; 0x38c2 <vfprintf+0x11e>
    38b2:	f1 01       	movw	r30, r2
    38b4:	93 fd       	sbrc	r25, 3
    38b6:	85 91       	lpm	r24, Z+
    38b8:	93 ff       	sbrs	r25, 3
    38ba:	81 91       	ld	r24, Z+
    38bc:	1f 01       	movw	r2, r30
    38be:	81 11       	cpse	r24, r1
    38c0:	b3 cf       	rjmp	.-154    	; 0x3828 <vfprintf+0x84>
    38c2:	9b eb       	ldi	r25, 0xBB	; 187
    38c4:	98 0f       	add	r25, r24
    38c6:	93 30       	cpi	r25, 0x03	; 3
    38c8:	20 f4       	brcc	.+8      	; 0x38d2 <vfprintf+0x12e>
    38ca:	99 2d       	mov	r25, r9
    38cc:	90 61       	ori	r25, 0x10	; 16
    38ce:	80 5e       	subi	r24, 0xE0	; 224
    38d0:	07 c0       	rjmp	.+14     	; 0x38e0 <vfprintf+0x13c>
    38d2:	9b e9       	ldi	r25, 0x9B	; 155
    38d4:	98 0f       	add	r25, r24
    38d6:	93 30       	cpi	r25, 0x03	; 3
    38d8:	08 f0       	brcs	.+2      	; 0x38dc <vfprintf+0x138>
    38da:	66 c1       	rjmp	.+716    	; 0x3ba8 <vfprintf+0x404>
    38dc:	99 2d       	mov	r25, r9
    38de:	9f 7e       	andi	r25, 0xEF	; 239
    38e0:	96 ff       	sbrs	r25, 6
    38e2:	16 e0       	ldi	r17, 0x06	; 6
    38e4:	9f 73       	andi	r25, 0x3F	; 63
    38e6:	99 2e       	mov	r9, r25
    38e8:	85 36       	cpi	r24, 0x65	; 101
    38ea:	19 f4       	brne	.+6      	; 0x38f2 <vfprintf+0x14e>
    38ec:	90 64       	ori	r25, 0x40	; 64
    38ee:	99 2e       	mov	r9, r25
    38f0:	08 c0       	rjmp	.+16     	; 0x3902 <vfprintf+0x15e>
    38f2:	86 36       	cpi	r24, 0x66	; 102
    38f4:	21 f4       	brne	.+8      	; 0x38fe <vfprintf+0x15a>
    38f6:	39 2f       	mov	r19, r25
    38f8:	30 68       	ori	r19, 0x80	; 128
    38fa:	93 2e       	mov	r9, r19
    38fc:	02 c0       	rjmp	.+4      	; 0x3902 <vfprintf+0x15e>
    38fe:	11 11       	cpse	r17, r1
    3900:	11 50       	subi	r17, 0x01	; 1
    3902:	97 fe       	sbrs	r9, 7
    3904:	07 c0       	rjmp	.+14     	; 0x3914 <vfprintf+0x170>
    3906:	1c 33       	cpi	r17, 0x3C	; 60
    3908:	50 f4       	brcc	.+20     	; 0x391e <vfprintf+0x17a>
    390a:	44 24       	eor	r4, r4
    390c:	43 94       	inc	r4
    390e:	41 0e       	add	r4, r17
    3910:	27 e0       	ldi	r18, 0x07	; 7
    3912:	0b c0       	rjmp	.+22     	; 0x392a <vfprintf+0x186>
    3914:	18 30       	cpi	r17, 0x08	; 8
    3916:	38 f0       	brcs	.+14     	; 0x3926 <vfprintf+0x182>
    3918:	27 e0       	ldi	r18, 0x07	; 7
    391a:	17 e0       	ldi	r17, 0x07	; 7
    391c:	05 c0       	rjmp	.+10     	; 0x3928 <vfprintf+0x184>
    391e:	27 e0       	ldi	r18, 0x07	; 7
    3920:	9c e3       	ldi	r25, 0x3C	; 60
    3922:	49 2e       	mov	r4, r25
    3924:	02 c0       	rjmp	.+4      	; 0x392a <vfprintf+0x186>
    3926:	21 2f       	mov	r18, r17
    3928:	41 2c       	mov	r4, r1
    392a:	56 01       	movw	r10, r12
    392c:	84 e0       	ldi	r24, 0x04	; 4
    392e:	a8 0e       	add	r10, r24
    3930:	b1 1c       	adc	r11, r1
    3932:	f6 01       	movw	r30, r12
    3934:	60 81       	ld	r22, Z
    3936:	71 81       	ldd	r23, Z+1	; 0x01
    3938:	82 81       	ldd	r24, Z+2	; 0x02
    393a:	93 81       	ldd	r25, Z+3	; 0x03
    393c:	04 2d       	mov	r16, r4
    393e:	a3 01       	movw	r20, r6
    3940:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__ftoa_engine>
    3944:	6c 01       	movw	r12, r24
    3946:	f9 81       	ldd	r31, Y+1	; 0x01
    3948:	fc 87       	std	Y+12, r31	; 0x0c
    394a:	f0 ff       	sbrs	r31, 0
    394c:	02 c0       	rjmp	.+4      	; 0x3952 <vfprintf+0x1ae>
    394e:	f3 ff       	sbrs	r31, 3
    3950:	06 c0       	rjmp	.+12     	; 0x395e <vfprintf+0x1ba>
    3952:	91 fc       	sbrc	r9, 1
    3954:	06 c0       	rjmp	.+12     	; 0x3962 <vfprintf+0x1be>
    3956:	92 fe       	sbrs	r9, 2
    3958:	06 c0       	rjmp	.+12     	; 0x3966 <vfprintf+0x1c2>
    395a:	00 e2       	ldi	r16, 0x20	; 32
    395c:	05 c0       	rjmp	.+10     	; 0x3968 <vfprintf+0x1c4>
    395e:	0d e2       	ldi	r16, 0x2D	; 45
    3960:	03 c0       	rjmp	.+6      	; 0x3968 <vfprintf+0x1c4>
    3962:	0b e2       	ldi	r16, 0x2B	; 43
    3964:	01 c0       	rjmp	.+2      	; 0x3968 <vfprintf+0x1c4>
    3966:	00 e0       	ldi	r16, 0x00	; 0
    3968:	8c 85       	ldd	r24, Y+12	; 0x0c
    396a:	8c 70       	andi	r24, 0x0C	; 12
    396c:	19 f0       	breq	.+6      	; 0x3974 <vfprintf+0x1d0>
    396e:	01 11       	cpse	r16, r1
    3970:	5a c2       	rjmp	.+1204   	; 0x3e26 <vfprintf+0x682>
    3972:	9b c2       	rjmp	.+1334   	; 0x3eaa <vfprintf+0x706>
    3974:	97 fe       	sbrs	r9, 7
    3976:	10 c0       	rjmp	.+32     	; 0x3998 <vfprintf+0x1f4>
    3978:	4c 0c       	add	r4, r12
    397a:	fc 85       	ldd	r31, Y+12	; 0x0c
    397c:	f4 ff       	sbrs	r31, 4
    397e:	04 c0       	rjmp	.+8      	; 0x3988 <vfprintf+0x1e4>
    3980:	8a 81       	ldd	r24, Y+2	; 0x02
    3982:	81 33       	cpi	r24, 0x31	; 49
    3984:	09 f4       	brne	.+2      	; 0x3988 <vfprintf+0x1e4>
    3986:	4a 94       	dec	r4
    3988:	14 14       	cp	r1, r4
    398a:	74 f5       	brge	.+92     	; 0x39e8 <vfprintf+0x244>
    398c:	28 e0       	ldi	r18, 0x08	; 8
    398e:	24 15       	cp	r18, r4
    3990:	78 f5       	brcc	.+94     	; 0x39f0 <vfprintf+0x24c>
    3992:	88 e0       	ldi	r24, 0x08	; 8
    3994:	48 2e       	mov	r4, r24
    3996:	2c c0       	rjmp	.+88     	; 0x39f0 <vfprintf+0x24c>
    3998:	96 fc       	sbrc	r9, 6
    399a:	2a c0       	rjmp	.+84     	; 0x39f0 <vfprintf+0x24c>
    399c:	81 2f       	mov	r24, r17
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	8c 15       	cp	r24, r12
    39a2:	9d 05       	cpc	r25, r13
    39a4:	9c f0       	brlt	.+38     	; 0x39cc <vfprintf+0x228>
    39a6:	3c ef       	ldi	r19, 0xFC	; 252
    39a8:	c3 16       	cp	r12, r19
    39aa:	3f ef       	ldi	r19, 0xFF	; 255
    39ac:	d3 06       	cpc	r13, r19
    39ae:	74 f0       	brlt	.+28     	; 0x39cc <vfprintf+0x228>
    39b0:	89 2d       	mov	r24, r9
    39b2:	80 68       	ori	r24, 0x80	; 128
    39b4:	98 2e       	mov	r9, r24
    39b6:	0a c0       	rjmp	.+20     	; 0x39cc <vfprintf+0x228>
    39b8:	e2 e0       	ldi	r30, 0x02	; 2
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	ec 0f       	add	r30, r28
    39be:	fd 1f       	adc	r31, r29
    39c0:	e1 0f       	add	r30, r17
    39c2:	f1 1d       	adc	r31, r1
    39c4:	80 81       	ld	r24, Z
    39c6:	80 33       	cpi	r24, 0x30	; 48
    39c8:	19 f4       	brne	.+6      	; 0x39d0 <vfprintf+0x22c>
    39ca:	11 50       	subi	r17, 0x01	; 1
    39cc:	11 11       	cpse	r17, r1
    39ce:	f4 cf       	rjmp	.-24     	; 0x39b8 <vfprintf+0x214>
    39d0:	97 fe       	sbrs	r9, 7
    39d2:	0e c0       	rjmp	.+28     	; 0x39f0 <vfprintf+0x24c>
    39d4:	44 24       	eor	r4, r4
    39d6:	43 94       	inc	r4
    39d8:	41 0e       	add	r4, r17
    39da:	81 2f       	mov	r24, r17
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	c8 16       	cp	r12, r24
    39e0:	d9 06       	cpc	r13, r25
    39e2:	2c f4       	brge	.+10     	; 0x39ee <vfprintf+0x24a>
    39e4:	1c 19       	sub	r17, r12
    39e6:	04 c0       	rjmp	.+8      	; 0x39f0 <vfprintf+0x24c>
    39e8:	44 24       	eor	r4, r4
    39ea:	43 94       	inc	r4
    39ec:	01 c0       	rjmp	.+2      	; 0x39f0 <vfprintf+0x24c>
    39ee:	10 e0       	ldi	r17, 0x00	; 0
    39f0:	97 fe       	sbrs	r9, 7
    39f2:	06 c0       	rjmp	.+12     	; 0x3a00 <vfprintf+0x25c>
    39f4:	1c 14       	cp	r1, r12
    39f6:	1d 04       	cpc	r1, r13
    39f8:	34 f4       	brge	.+12     	; 0x3a06 <vfprintf+0x262>
    39fa:	c6 01       	movw	r24, r12
    39fc:	01 96       	adiw	r24, 0x01	; 1
    39fe:	05 c0       	rjmp	.+10     	; 0x3a0a <vfprintf+0x266>
    3a00:	85 e0       	ldi	r24, 0x05	; 5
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	02 c0       	rjmp	.+4      	; 0x3a0a <vfprintf+0x266>
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	01 11       	cpse	r16, r1
    3a0c:	01 96       	adiw	r24, 0x01	; 1
    3a0e:	11 23       	and	r17, r17
    3a10:	31 f0       	breq	.+12     	; 0x3a1e <vfprintf+0x27a>
    3a12:	21 2f       	mov	r18, r17
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	2f 5f       	subi	r18, 0xFF	; 255
    3a18:	3f 4f       	sbci	r19, 0xFF	; 255
    3a1a:	82 0f       	add	r24, r18
    3a1c:	93 1f       	adc	r25, r19
    3a1e:	25 2d       	mov	r18, r5
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	82 17       	cp	r24, r18
    3a24:	93 07       	cpc	r25, r19
    3a26:	14 f4       	brge	.+4      	; 0x3a2c <vfprintf+0x288>
    3a28:	58 1a       	sub	r5, r24
    3a2a:	01 c0       	rjmp	.+2      	; 0x3a2e <vfprintf+0x28a>
    3a2c:	51 2c       	mov	r5, r1
    3a2e:	89 2d       	mov	r24, r9
    3a30:	89 70       	andi	r24, 0x09	; 9
    3a32:	49 f4       	brne	.+18     	; 0x3a46 <vfprintf+0x2a2>
    3a34:	55 20       	and	r5, r5
    3a36:	39 f0       	breq	.+14     	; 0x3a46 <vfprintf+0x2a2>
    3a38:	b7 01       	movw	r22, r14
    3a3a:	80 e2       	ldi	r24, 0x20	; 32
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3a42:	5a 94       	dec	r5
    3a44:	f7 cf       	rjmp	.-18     	; 0x3a34 <vfprintf+0x290>
    3a46:	00 23       	and	r16, r16
    3a48:	29 f0       	breq	.+10     	; 0x3a54 <vfprintf+0x2b0>
    3a4a:	b7 01       	movw	r22, r14
    3a4c:	80 2f       	mov	r24, r16
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3a54:	93 fc       	sbrc	r9, 3
    3a56:	09 c0       	rjmp	.+18     	; 0x3a6a <vfprintf+0x2c6>
    3a58:	55 20       	and	r5, r5
    3a5a:	39 f0       	breq	.+14     	; 0x3a6a <vfprintf+0x2c6>
    3a5c:	b7 01       	movw	r22, r14
    3a5e:	80 e3       	ldi	r24, 0x30	; 48
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3a66:	5a 94       	dec	r5
    3a68:	f7 cf       	rjmp	.-18     	; 0x3a58 <vfprintf+0x2b4>
    3a6a:	97 fe       	sbrs	r9, 7
    3a6c:	4c c0       	rjmp	.+152    	; 0x3b06 <vfprintf+0x362>
    3a6e:	46 01       	movw	r8, r12
    3a70:	d7 fe       	sbrs	r13, 7
    3a72:	02 c0       	rjmp	.+4      	; 0x3a78 <vfprintf+0x2d4>
    3a74:	81 2c       	mov	r8, r1
    3a76:	91 2c       	mov	r9, r1
    3a78:	c6 01       	movw	r24, r12
    3a7a:	88 19       	sub	r24, r8
    3a7c:	99 09       	sbc	r25, r9
    3a7e:	f3 01       	movw	r30, r6
    3a80:	e8 0f       	add	r30, r24
    3a82:	f9 1f       	adc	r31, r25
    3a84:	ed 87       	std	Y+13, r30	; 0x0d
    3a86:	fe 87       	std	Y+14, r31	; 0x0e
    3a88:	96 01       	movw	r18, r12
    3a8a:	24 19       	sub	r18, r4
    3a8c:	31 09       	sbc	r19, r1
    3a8e:	2f 87       	std	Y+15, r18	; 0x0f
    3a90:	38 8b       	std	Y+16, r19	; 0x10
    3a92:	01 2f       	mov	r16, r17
    3a94:	10 e0       	ldi	r17, 0x00	; 0
    3a96:	11 95       	neg	r17
    3a98:	01 95       	neg	r16
    3a9a:	11 09       	sbc	r17, r1
    3a9c:	3f ef       	ldi	r19, 0xFF	; 255
    3a9e:	83 16       	cp	r8, r19
    3aa0:	93 06       	cpc	r9, r19
    3aa2:	29 f4       	brne	.+10     	; 0x3aae <vfprintf+0x30a>
    3aa4:	b7 01       	movw	r22, r14
    3aa6:	8e e2       	ldi	r24, 0x2E	; 46
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3aae:	c8 14       	cp	r12, r8
    3ab0:	d9 04       	cpc	r13, r9
    3ab2:	4c f0       	brlt	.+18     	; 0x3ac6 <vfprintf+0x322>
    3ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ab6:	98 89       	ldd	r25, Y+16	; 0x10
    3ab8:	88 15       	cp	r24, r8
    3aba:	99 05       	cpc	r25, r9
    3abc:	24 f4       	brge	.+8      	; 0x3ac6 <vfprintf+0x322>
    3abe:	ed 85       	ldd	r30, Y+13	; 0x0d
    3ac0:	fe 85       	ldd	r31, Y+14	; 0x0e
    3ac2:	81 81       	ldd	r24, Z+1	; 0x01
    3ac4:	01 c0       	rjmp	.+2      	; 0x3ac8 <vfprintf+0x324>
    3ac6:	80 e3       	ldi	r24, 0x30	; 48
    3ac8:	f1 e0       	ldi	r31, 0x01	; 1
    3aca:	8f 1a       	sub	r8, r31
    3acc:	91 08       	sbc	r9, r1
    3ace:	2d 85       	ldd	r18, Y+13	; 0x0d
    3ad0:	3e 85       	ldd	r19, Y+14	; 0x0e
    3ad2:	2f 5f       	subi	r18, 0xFF	; 255
    3ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad6:	2d 87       	std	Y+13, r18	; 0x0d
    3ad8:	3e 87       	std	Y+14, r19	; 0x0e
    3ada:	80 16       	cp	r8, r16
    3adc:	91 06       	cpc	r9, r17
    3ade:	2c f0       	brlt	.+10     	; 0x3aea <vfprintf+0x346>
    3ae0:	b7 01       	movw	r22, r14
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3ae8:	d9 cf       	rjmp	.-78     	; 0x3a9c <vfprintf+0x2f8>
    3aea:	c8 14       	cp	r12, r8
    3aec:	d9 04       	cpc	r13, r9
    3aee:	41 f4       	brne	.+16     	; 0x3b00 <vfprintf+0x35c>
    3af0:	9a 81       	ldd	r25, Y+2	; 0x02
    3af2:	96 33       	cpi	r25, 0x36	; 54
    3af4:	20 f4       	brcc	.+8      	; 0x3afe <vfprintf+0x35a>
    3af6:	95 33       	cpi	r25, 0x35	; 53
    3af8:	19 f4       	brne	.+6      	; 0x3b00 <vfprintf+0x35c>
    3afa:	3c 85       	ldd	r19, Y+12	; 0x0c
    3afc:	34 ff       	sbrs	r19, 4
    3afe:	81 e3       	ldi	r24, 0x31	; 49
    3b00:	b7 01       	movw	r22, r14
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	4e c0       	rjmp	.+156    	; 0x3ba2 <vfprintf+0x3fe>
    3b06:	8a 81       	ldd	r24, Y+2	; 0x02
    3b08:	81 33       	cpi	r24, 0x31	; 49
    3b0a:	19 f0       	breq	.+6      	; 0x3b12 <vfprintf+0x36e>
    3b0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b0e:	9f 7e       	andi	r25, 0xEF	; 239
    3b10:	9c 87       	std	Y+12, r25	; 0x0c
    3b12:	b7 01       	movw	r22, r14
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3b1a:	11 11       	cpse	r17, r1
    3b1c:	05 c0       	rjmp	.+10     	; 0x3b28 <vfprintf+0x384>
    3b1e:	94 fc       	sbrc	r9, 4
    3b20:	18 c0       	rjmp	.+48     	; 0x3b52 <vfprintf+0x3ae>
    3b22:	85 e6       	ldi	r24, 0x65	; 101
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	17 c0       	rjmp	.+46     	; 0x3b56 <vfprintf+0x3b2>
    3b28:	b7 01       	movw	r22, r14
    3b2a:	8e e2       	ldi	r24, 0x2E	; 46
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3b32:	1e 5f       	subi	r17, 0xFE	; 254
    3b34:	82 e0       	ldi	r24, 0x02	; 2
    3b36:	01 e0       	ldi	r16, 0x01	; 1
    3b38:	08 0f       	add	r16, r24
    3b3a:	f3 01       	movw	r30, r6
    3b3c:	e8 0f       	add	r30, r24
    3b3e:	f1 1d       	adc	r31, r1
    3b40:	80 81       	ld	r24, Z
    3b42:	b7 01       	movw	r22, r14
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3b4a:	80 2f       	mov	r24, r16
    3b4c:	01 13       	cpse	r16, r17
    3b4e:	f3 cf       	rjmp	.-26     	; 0x3b36 <vfprintf+0x392>
    3b50:	e6 cf       	rjmp	.-52     	; 0x3b1e <vfprintf+0x37a>
    3b52:	85 e4       	ldi	r24, 0x45	; 69
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	b7 01       	movw	r22, r14
    3b58:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3b5c:	d7 fc       	sbrc	r13, 7
    3b5e:	06 c0       	rjmp	.+12     	; 0x3b6c <vfprintf+0x3c8>
    3b60:	c1 14       	cp	r12, r1
    3b62:	d1 04       	cpc	r13, r1
    3b64:	41 f4       	brne	.+16     	; 0x3b76 <vfprintf+0x3d2>
    3b66:	ec 85       	ldd	r30, Y+12	; 0x0c
    3b68:	e4 ff       	sbrs	r30, 4
    3b6a:	05 c0       	rjmp	.+10     	; 0x3b76 <vfprintf+0x3d2>
    3b6c:	d1 94       	neg	r13
    3b6e:	c1 94       	neg	r12
    3b70:	d1 08       	sbc	r13, r1
    3b72:	8d e2       	ldi	r24, 0x2D	; 45
    3b74:	01 c0       	rjmp	.+2      	; 0x3b78 <vfprintf+0x3d4>
    3b76:	8b e2       	ldi	r24, 0x2B	; 43
    3b78:	b7 01       	movw	r22, r14
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3b80:	80 e3       	ldi	r24, 0x30	; 48
    3b82:	2a e0       	ldi	r18, 0x0A	; 10
    3b84:	c2 16       	cp	r12, r18
    3b86:	d1 04       	cpc	r13, r1
    3b88:	2c f0       	brlt	.+10     	; 0x3b94 <vfprintf+0x3f0>
    3b8a:	8f 5f       	subi	r24, 0xFF	; 255
    3b8c:	fa e0       	ldi	r31, 0x0A	; 10
    3b8e:	cf 1a       	sub	r12, r31
    3b90:	d1 08       	sbc	r13, r1
    3b92:	f7 cf       	rjmp	.-18     	; 0x3b82 <vfprintf+0x3de>
    3b94:	b7 01       	movw	r22, r14
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3b9c:	b7 01       	movw	r22, r14
    3b9e:	c6 01       	movw	r24, r12
    3ba0:	c0 96       	adiw	r24, 0x30	; 48
    3ba2:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3ba6:	54 c1       	rjmp	.+680    	; 0x3e50 <vfprintf+0x6ac>
    3ba8:	83 36       	cpi	r24, 0x63	; 99
    3baa:	31 f0       	breq	.+12     	; 0x3bb8 <vfprintf+0x414>
    3bac:	83 37       	cpi	r24, 0x73	; 115
    3bae:	79 f0       	breq	.+30     	; 0x3bce <vfprintf+0x42a>
    3bb0:	83 35       	cpi	r24, 0x53	; 83
    3bb2:	09 f0       	breq	.+2      	; 0x3bb6 <vfprintf+0x412>
    3bb4:	56 c0       	rjmp	.+172    	; 0x3c62 <vfprintf+0x4be>
    3bb6:	20 c0       	rjmp	.+64     	; 0x3bf8 <vfprintf+0x454>
    3bb8:	56 01       	movw	r10, r12
    3bba:	32 e0       	ldi	r19, 0x02	; 2
    3bbc:	a3 0e       	add	r10, r19
    3bbe:	b1 1c       	adc	r11, r1
    3bc0:	f6 01       	movw	r30, r12
    3bc2:	80 81       	ld	r24, Z
    3bc4:	89 83       	std	Y+1, r24	; 0x01
    3bc6:	01 e0       	ldi	r16, 0x01	; 1
    3bc8:	10 e0       	ldi	r17, 0x00	; 0
    3bca:	63 01       	movw	r12, r6
    3bcc:	12 c0       	rjmp	.+36     	; 0x3bf2 <vfprintf+0x44e>
    3bce:	56 01       	movw	r10, r12
    3bd0:	f2 e0       	ldi	r31, 0x02	; 2
    3bd2:	af 0e       	add	r10, r31
    3bd4:	b1 1c       	adc	r11, r1
    3bd6:	f6 01       	movw	r30, r12
    3bd8:	c0 80       	ld	r12, Z
    3bda:	d1 80       	ldd	r13, Z+1	; 0x01
    3bdc:	96 fe       	sbrs	r9, 6
    3bde:	03 c0       	rjmp	.+6      	; 0x3be6 <vfprintf+0x442>
    3be0:	61 2f       	mov	r22, r17
    3be2:	70 e0       	ldi	r23, 0x00	; 0
    3be4:	02 c0       	rjmp	.+4      	; 0x3bea <vfprintf+0x446>
    3be6:	6f ef       	ldi	r22, 0xFF	; 255
    3be8:	7f ef       	ldi	r23, 0xFF	; 255
    3bea:	c6 01       	movw	r24, r12
    3bec:	0e 94 92 20 	call	0x4124	; 0x4124 <strnlen>
    3bf0:	8c 01       	movw	r16, r24
    3bf2:	f9 2d       	mov	r31, r9
    3bf4:	ff 77       	andi	r31, 0x7F	; 127
    3bf6:	14 c0       	rjmp	.+40     	; 0x3c20 <vfprintf+0x47c>
    3bf8:	56 01       	movw	r10, r12
    3bfa:	22 e0       	ldi	r18, 0x02	; 2
    3bfc:	a2 0e       	add	r10, r18
    3bfe:	b1 1c       	adc	r11, r1
    3c00:	f6 01       	movw	r30, r12
    3c02:	c0 80       	ld	r12, Z
    3c04:	d1 80       	ldd	r13, Z+1	; 0x01
    3c06:	96 fe       	sbrs	r9, 6
    3c08:	03 c0       	rjmp	.+6      	; 0x3c10 <vfprintf+0x46c>
    3c0a:	61 2f       	mov	r22, r17
    3c0c:	70 e0       	ldi	r23, 0x00	; 0
    3c0e:	02 c0       	rjmp	.+4      	; 0x3c14 <vfprintf+0x470>
    3c10:	6f ef       	ldi	r22, 0xFF	; 255
    3c12:	7f ef       	ldi	r23, 0xFF	; 255
    3c14:	c6 01       	movw	r24, r12
    3c16:	0e 94 77 20 	call	0x40ee	; 0x40ee <strnlen_P>
    3c1a:	8c 01       	movw	r16, r24
    3c1c:	f9 2d       	mov	r31, r9
    3c1e:	f0 68       	ori	r31, 0x80	; 128
    3c20:	9f 2e       	mov	r9, r31
    3c22:	f3 fd       	sbrc	r31, 3
    3c24:	1a c0       	rjmp	.+52     	; 0x3c5a <vfprintf+0x4b6>
    3c26:	85 2d       	mov	r24, r5
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	08 17       	cp	r16, r24
    3c2c:	19 07       	cpc	r17, r25
    3c2e:	a8 f4       	brcc	.+42     	; 0x3c5a <vfprintf+0x4b6>
    3c30:	b7 01       	movw	r22, r14
    3c32:	80 e2       	ldi	r24, 0x20	; 32
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3c3a:	5a 94       	dec	r5
    3c3c:	f4 cf       	rjmp	.-24     	; 0x3c26 <vfprintf+0x482>
    3c3e:	f6 01       	movw	r30, r12
    3c40:	97 fc       	sbrc	r9, 7
    3c42:	85 91       	lpm	r24, Z+
    3c44:	97 fe       	sbrs	r9, 7
    3c46:	81 91       	ld	r24, Z+
    3c48:	6f 01       	movw	r12, r30
    3c4a:	b7 01       	movw	r22, r14
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3c52:	51 10       	cpse	r5, r1
    3c54:	5a 94       	dec	r5
    3c56:	01 50       	subi	r16, 0x01	; 1
    3c58:	11 09       	sbc	r17, r1
    3c5a:	01 15       	cp	r16, r1
    3c5c:	11 05       	cpc	r17, r1
    3c5e:	79 f7       	brne	.-34     	; 0x3c3e <vfprintf+0x49a>
    3c60:	f7 c0       	rjmp	.+494    	; 0x3e50 <vfprintf+0x6ac>
    3c62:	84 36       	cpi	r24, 0x64	; 100
    3c64:	11 f0       	breq	.+4      	; 0x3c6a <vfprintf+0x4c6>
    3c66:	89 36       	cpi	r24, 0x69	; 105
    3c68:	61 f5       	brne	.+88     	; 0x3cc2 <vfprintf+0x51e>
    3c6a:	56 01       	movw	r10, r12
    3c6c:	97 fe       	sbrs	r9, 7
    3c6e:	09 c0       	rjmp	.+18     	; 0x3c82 <vfprintf+0x4de>
    3c70:	24 e0       	ldi	r18, 0x04	; 4
    3c72:	a2 0e       	add	r10, r18
    3c74:	b1 1c       	adc	r11, r1
    3c76:	f6 01       	movw	r30, r12
    3c78:	60 81       	ld	r22, Z
    3c7a:	71 81       	ldd	r23, Z+1	; 0x01
    3c7c:	82 81       	ldd	r24, Z+2	; 0x02
    3c7e:	93 81       	ldd	r25, Z+3	; 0x03
    3c80:	0a c0       	rjmp	.+20     	; 0x3c96 <vfprintf+0x4f2>
    3c82:	f2 e0       	ldi	r31, 0x02	; 2
    3c84:	af 0e       	add	r10, r31
    3c86:	b1 1c       	adc	r11, r1
    3c88:	f6 01       	movw	r30, r12
    3c8a:	60 81       	ld	r22, Z
    3c8c:	71 81       	ldd	r23, Z+1	; 0x01
    3c8e:	07 2e       	mov	r0, r23
    3c90:	00 0c       	add	r0, r0
    3c92:	88 0b       	sbc	r24, r24
    3c94:	99 0b       	sbc	r25, r25
    3c96:	f9 2d       	mov	r31, r9
    3c98:	ff 76       	andi	r31, 0x6F	; 111
    3c9a:	9f 2e       	mov	r9, r31
    3c9c:	97 ff       	sbrs	r25, 7
    3c9e:	09 c0       	rjmp	.+18     	; 0x3cb2 <vfprintf+0x50e>
    3ca0:	90 95       	com	r25
    3ca2:	80 95       	com	r24
    3ca4:	70 95       	com	r23
    3ca6:	61 95       	neg	r22
    3ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    3caa:	8f 4f       	sbci	r24, 0xFF	; 255
    3cac:	9f 4f       	sbci	r25, 0xFF	; 255
    3cae:	f0 68       	ori	r31, 0x80	; 128
    3cb0:	9f 2e       	mov	r9, r31
    3cb2:	2a e0       	ldi	r18, 0x0A	; 10
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	a3 01       	movw	r20, r6
    3cb8:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__ultoa_invert>
    3cbc:	c8 2e       	mov	r12, r24
    3cbe:	c6 18       	sub	r12, r6
    3cc0:	3f c0       	rjmp	.+126    	; 0x3d40 <vfprintf+0x59c>
    3cc2:	09 2d       	mov	r16, r9
    3cc4:	85 37       	cpi	r24, 0x75	; 117
    3cc6:	21 f4       	brne	.+8      	; 0x3cd0 <vfprintf+0x52c>
    3cc8:	0f 7e       	andi	r16, 0xEF	; 239
    3cca:	2a e0       	ldi	r18, 0x0A	; 10
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	1d c0       	rjmp	.+58     	; 0x3d0a <vfprintf+0x566>
    3cd0:	09 7f       	andi	r16, 0xF9	; 249
    3cd2:	8f 36       	cpi	r24, 0x6F	; 111
    3cd4:	91 f0       	breq	.+36     	; 0x3cfa <vfprintf+0x556>
    3cd6:	18 f4       	brcc	.+6      	; 0x3cde <vfprintf+0x53a>
    3cd8:	88 35       	cpi	r24, 0x58	; 88
    3cda:	59 f0       	breq	.+22     	; 0x3cf2 <vfprintf+0x54e>
    3cdc:	c3 c0       	rjmp	.+390    	; 0x3e64 <vfprintf+0x6c0>
    3cde:	80 37       	cpi	r24, 0x70	; 112
    3ce0:	19 f0       	breq	.+6      	; 0x3ce8 <vfprintf+0x544>
    3ce2:	88 37       	cpi	r24, 0x78	; 120
    3ce4:	11 f0       	breq	.+4      	; 0x3cea <vfprintf+0x546>
    3ce6:	be c0       	rjmp	.+380    	; 0x3e64 <vfprintf+0x6c0>
    3ce8:	00 61       	ori	r16, 0x10	; 16
    3cea:	04 ff       	sbrs	r16, 4
    3cec:	09 c0       	rjmp	.+18     	; 0x3d00 <vfprintf+0x55c>
    3cee:	04 60       	ori	r16, 0x04	; 4
    3cf0:	07 c0       	rjmp	.+14     	; 0x3d00 <vfprintf+0x55c>
    3cf2:	94 fe       	sbrs	r9, 4
    3cf4:	08 c0       	rjmp	.+16     	; 0x3d06 <vfprintf+0x562>
    3cf6:	06 60       	ori	r16, 0x06	; 6
    3cf8:	06 c0       	rjmp	.+12     	; 0x3d06 <vfprintf+0x562>
    3cfa:	28 e0       	ldi	r18, 0x08	; 8
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	05 c0       	rjmp	.+10     	; 0x3d0a <vfprintf+0x566>
    3d00:	20 e1       	ldi	r18, 0x10	; 16
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	02 c0       	rjmp	.+4      	; 0x3d0a <vfprintf+0x566>
    3d06:	20 e1       	ldi	r18, 0x10	; 16
    3d08:	32 e0       	ldi	r19, 0x02	; 2
    3d0a:	56 01       	movw	r10, r12
    3d0c:	07 ff       	sbrs	r16, 7
    3d0e:	09 c0       	rjmp	.+18     	; 0x3d22 <vfprintf+0x57e>
    3d10:	84 e0       	ldi	r24, 0x04	; 4
    3d12:	a8 0e       	add	r10, r24
    3d14:	b1 1c       	adc	r11, r1
    3d16:	f6 01       	movw	r30, r12
    3d18:	60 81       	ld	r22, Z
    3d1a:	71 81       	ldd	r23, Z+1	; 0x01
    3d1c:	82 81       	ldd	r24, Z+2	; 0x02
    3d1e:	93 81       	ldd	r25, Z+3	; 0x03
    3d20:	08 c0       	rjmp	.+16     	; 0x3d32 <vfprintf+0x58e>
    3d22:	f2 e0       	ldi	r31, 0x02	; 2
    3d24:	af 0e       	add	r10, r31
    3d26:	b1 1c       	adc	r11, r1
    3d28:	f6 01       	movw	r30, r12
    3d2a:	60 81       	ld	r22, Z
    3d2c:	71 81       	ldd	r23, Z+1	; 0x01
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	a3 01       	movw	r20, r6
    3d34:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__ultoa_invert>
    3d38:	c8 2e       	mov	r12, r24
    3d3a:	c6 18       	sub	r12, r6
    3d3c:	0f 77       	andi	r16, 0x7F	; 127
    3d3e:	90 2e       	mov	r9, r16
    3d40:	96 fe       	sbrs	r9, 6
    3d42:	0b c0       	rjmp	.+22     	; 0x3d5a <vfprintf+0x5b6>
    3d44:	09 2d       	mov	r16, r9
    3d46:	0e 7f       	andi	r16, 0xFE	; 254
    3d48:	c1 16       	cp	r12, r17
    3d4a:	50 f4       	brcc	.+20     	; 0x3d60 <vfprintf+0x5bc>
    3d4c:	94 fe       	sbrs	r9, 4
    3d4e:	0a c0       	rjmp	.+20     	; 0x3d64 <vfprintf+0x5c0>
    3d50:	92 fc       	sbrc	r9, 2
    3d52:	08 c0       	rjmp	.+16     	; 0x3d64 <vfprintf+0x5c0>
    3d54:	09 2d       	mov	r16, r9
    3d56:	0e 7e       	andi	r16, 0xEE	; 238
    3d58:	05 c0       	rjmp	.+10     	; 0x3d64 <vfprintf+0x5c0>
    3d5a:	dc 2c       	mov	r13, r12
    3d5c:	09 2d       	mov	r16, r9
    3d5e:	03 c0       	rjmp	.+6      	; 0x3d66 <vfprintf+0x5c2>
    3d60:	dc 2c       	mov	r13, r12
    3d62:	01 c0       	rjmp	.+2      	; 0x3d66 <vfprintf+0x5c2>
    3d64:	d1 2e       	mov	r13, r17
    3d66:	04 ff       	sbrs	r16, 4
    3d68:	0d c0       	rjmp	.+26     	; 0x3d84 <vfprintf+0x5e0>
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	ec 0d       	add	r30, r12
    3d6e:	f1 1d       	adc	r31, r1
    3d70:	80 81       	ld	r24, Z
    3d72:	80 33       	cpi	r24, 0x30	; 48
    3d74:	11 f4       	brne	.+4      	; 0x3d7a <vfprintf+0x5d6>
    3d76:	09 7e       	andi	r16, 0xE9	; 233
    3d78:	09 c0       	rjmp	.+18     	; 0x3d8c <vfprintf+0x5e8>
    3d7a:	02 ff       	sbrs	r16, 2
    3d7c:	06 c0       	rjmp	.+12     	; 0x3d8a <vfprintf+0x5e6>
    3d7e:	d3 94       	inc	r13
    3d80:	d3 94       	inc	r13
    3d82:	04 c0       	rjmp	.+8      	; 0x3d8c <vfprintf+0x5e8>
    3d84:	80 2f       	mov	r24, r16
    3d86:	86 78       	andi	r24, 0x86	; 134
    3d88:	09 f0       	breq	.+2      	; 0x3d8c <vfprintf+0x5e8>
    3d8a:	d3 94       	inc	r13
    3d8c:	03 fd       	sbrc	r16, 3
    3d8e:	11 c0       	rjmp	.+34     	; 0x3db2 <vfprintf+0x60e>
    3d90:	00 ff       	sbrs	r16, 0
    3d92:	06 c0       	rjmp	.+12     	; 0x3da0 <vfprintf+0x5fc>
    3d94:	1c 2d       	mov	r17, r12
    3d96:	d5 14       	cp	r13, r5
    3d98:	80 f4       	brcc	.+32     	; 0x3dba <vfprintf+0x616>
    3d9a:	15 0d       	add	r17, r5
    3d9c:	1d 19       	sub	r17, r13
    3d9e:	0d c0       	rjmp	.+26     	; 0x3dba <vfprintf+0x616>
    3da0:	d5 14       	cp	r13, r5
    3da2:	58 f4       	brcc	.+22     	; 0x3dba <vfprintf+0x616>
    3da4:	b7 01       	movw	r22, r14
    3da6:	80 e2       	ldi	r24, 0x20	; 32
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3dae:	d3 94       	inc	r13
    3db0:	f7 cf       	rjmp	.-18     	; 0x3da0 <vfprintf+0x5fc>
    3db2:	d5 14       	cp	r13, r5
    3db4:	10 f4       	brcc	.+4      	; 0x3dba <vfprintf+0x616>
    3db6:	5d 18       	sub	r5, r13
    3db8:	01 c0       	rjmp	.+2      	; 0x3dbc <vfprintf+0x618>
    3dba:	51 2c       	mov	r5, r1
    3dbc:	04 ff       	sbrs	r16, 4
    3dbe:	10 c0       	rjmp	.+32     	; 0x3de0 <vfprintf+0x63c>
    3dc0:	b7 01       	movw	r22, r14
    3dc2:	80 e3       	ldi	r24, 0x30	; 48
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3dca:	02 ff       	sbrs	r16, 2
    3dcc:	17 c0       	rjmp	.+46     	; 0x3dfc <vfprintf+0x658>
    3dce:	01 fd       	sbrc	r16, 1
    3dd0:	03 c0       	rjmp	.+6      	; 0x3dd8 <vfprintf+0x634>
    3dd2:	88 e7       	ldi	r24, 0x78	; 120
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	02 c0       	rjmp	.+4      	; 0x3ddc <vfprintf+0x638>
    3dd8:	88 e5       	ldi	r24, 0x58	; 88
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	b7 01       	movw	r22, r14
    3dde:	0c c0       	rjmp	.+24     	; 0x3df8 <vfprintf+0x654>
    3de0:	80 2f       	mov	r24, r16
    3de2:	86 78       	andi	r24, 0x86	; 134
    3de4:	59 f0       	breq	.+22     	; 0x3dfc <vfprintf+0x658>
    3de6:	01 ff       	sbrs	r16, 1
    3de8:	02 c0       	rjmp	.+4      	; 0x3dee <vfprintf+0x64a>
    3dea:	8b e2       	ldi	r24, 0x2B	; 43
    3dec:	01 c0       	rjmp	.+2      	; 0x3df0 <vfprintf+0x64c>
    3dee:	80 e2       	ldi	r24, 0x20	; 32
    3df0:	07 fd       	sbrc	r16, 7
    3df2:	8d e2       	ldi	r24, 0x2D	; 45
    3df4:	b7 01       	movw	r22, r14
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3dfc:	c1 16       	cp	r12, r17
    3dfe:	38 f4       	brcc	.+14     	; 0x3e0e <vfprintf+0x66a>
    3e00:	b7 01       	movw	r22, r14
    3e02:	80 e3       	ldi	r24, 0x30	; 48
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3e0a:	11 50       	subi	r17, 0x01	; 1
    3e0c:	f7 cf       	rjmp	.-18     	; 0x3dfc <vfprintf+0x658>
    3e0e:	ca 94       	dec	r12
    3e10:	f3 01       	movw	r30, r6
    3e12:	ec 0d       	add	r30, r12
    3e14:	f1 1d       	adc	r31, r1
    3e16:	80 81       	ld	r24, Z
    3e18:	b7 01       	movw	r22, r14
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3e20:	c1 10       	cpse	r12, r1
    3e22:	f5 cf       	rjmp	.-22     	; 0x3e0e <vfprintf+0x66a>
    3e24:	15 c0       	rjmp	.+42     	; 0x3e50 <vfprintf+0x6ac>
    3e26:	f4 e0       	ldi	r31, 0x04	; 4
    3e28:	f5 15       	cp	r31, r5
    3e2a:	60 f5       	brcc	.+88     	; 0x3e84 <vfprintf+0x6e0>
    3e2c:	84 e0       	ldi	r24, 0x04	; 4
    3e2e:	58 1a       	sub	r5, r24
    3e30:	93 fe       	sbrs	r9, 3
    3e32:	1f c0       	rjmp	.+62     	; 0x3e72 <vfprintf+0x6ce>
    3e34:	01 11       	cpse	r16, r1
    3e36:	27 c0       	rjmp	.+78     	; 0x3e86 <vfprintf+0x6e2>
    3e38:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e3a:	23 ff       	sbrs	r18, 3
    3e3c:	2a c0       	rjmp	.+84     	; 0x3e92 <vfprintf+0x6ee>
    3e3e:	08 e3       	ldi	r16, 0x38	; 56
    3e40:	12 e0       	ldi	r17, 0x02	; 2
    3e42:	39 2d       	mov	r19, r9
    3e44:	30 71       	andi	r19, 0x10	; 16
    3e46:	93 2e       	mov	r9, r19
    3e48:	f8 01       	movw	r30, r16
    3e4a:	84 91       	lpm	r24, Z
    3e4c:	81 11       	cpse	r24, r1
    3e4e:	24 c0       	rjmp	.+72     	; 0x3e98 <vfprintf+0x6f4>
    3e50:	55 20       	and	r5, r5
    3e52:	09 f4       	brne	.+2      	; 0x3e56 <vfprintf+0x6b2>
    3e54:	e4 cc       	rjmp	.-1592   	; 0x381e <vfprintf+0x7a>
    3e56:	b7 01       	movw	r22, r14
    3e58:	80 e2       	ldi	r24, 0x20	; 32
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3e60:	5a 94       	dec	r5
    3e62:	f6 cf       	rjmp	.-20     	; 0x3e50 <vfprintf+0x6ac>
    3e64:	f7 01       	movw	r30, r14
    3e66:	86 81       	ldd	r24, Z+6	; 0x06
    3e68:	97 81       	ldd	r25, Z+7	; 0x07
    3e6a:	26 c0       	rjmp	.+76     	; 0x3eb8 <vfprintf+0x714>
    3e6c:	8f ef       	ldi	r24, 0xFF	; 255
    3e6e:	9f ef       	ldi	r25, 0xFF	; 255
    3e70:	23 c0       	rjmp	.+70     	; 0x3eb8 <vfprintf+0x714>
    3e72:	b7 01       	movw	r22, r14
    3e74:	80 e2       	ldi	r24, 0x20	; 32
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3e7c:	5a 94       	dec	r5
    3e7e:	51 10       	cpse	r5, r1
    3e80:	f8 cf       	rjmp	.-16     	; 0x3e72 <vfprintf+0x6ce>
    3e82:	d8 cf       	rjmp	.-80     	; 0x3e34 <vfprintf+0x690>
    3e84:	51 2c       	mov	r5, r1
    3e86:	b7 01       	movw	r22, r14
    3e88:	80 2f       	mov	r24, r16
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3e90:	d3 cf       	rjmp	.-90     	; 0x3e38 <vfprintf+0x694>
    3e92:	0c e3       	ldi	r16, 0x3C	; 60
    3e94:	12 e0       	ldi	r17, 0x02	; 2
    3e96:	d5 cf       	rjmp	.-86     	; 0x3e42 <vfprintf+0x69e>
    3e98:	91 10       	cpse	r9, r1
    3e9a:	80 52       	subi	r24, 0x20	; 32
    3e9c:	b7 01       	movw	r22, r14
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	0e 94 c2 20 	call	0x4184	; 0x4184 <fputc>
    3ea4:	0f 5f       	subi	r16, 0xFF	; 255
    3ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea8:	cf cf       	rjmp	.-98     	; 0x3e48 <vfprintf+0x6a4>
    3eaa:	23 e0       	ldi	r18, 0x03	; 3
    3eac:	25 15       	cp	r18, r5
    3eae:	10 f4       	brcc	.+4      	; 0x3eb4 <vfprintf+0x710>
    3eb0:	83 e0       	ldi	r24, 0x03	; 3
    3eb2:	bd cf       	rjmp	.-134    	; 0x3e2e <vfprintf+0x68a>
    3eb4:	51 2c       	mov	r5, r1
    3eb6:	c0 cf       	rjmp	.-128    	; 0x3e38 <vfprintf+0x694>
    3eb8:	60 96       	adiw	r28, 0x10	; 16
    3eba:	cd bf       	out	0x3d, r28	; 61
    3ebc:	de bf       	out	0x3e, r29	; 62
    3ebe:	df 91       	pop	r29
    3ec0:	cf 91       	pop	r28
    3ec2:	1f 91       	pop	r17
    3ec4:	0f 91       	pop	r16
    3ec6:	ff 90       	pop	r15
    3ec8:	ef 90       	pop	r14
    3eca:	df 90       	pop	r13
    3ecc:	cf 90       	pop	r12
    3ece:	bf 90       	pop	r11
    3ed0:	af 90       	pop	r10
    3ed2:	9f 90       	pop	r9
    3ed4:	8f 90       	pop	r8
    3ed6:	7f 90       	pop	r7
    3ed8:	6f 90       	pop	r6
    3eda:	5f 90       	pop	r5
    3edc:	4f 90       	pop	r4
    3ede:	3f 90       	pop	r3
    3ee0:	2f 90       	pop	r2
    3ee2:	08 95       	ret

00003ee4 <__tablejump2__>:
    3ee4:	ee 0f       	add	r30, r30
    3ee6:	ff 1f       	adc	r31, r31
    3ee8:	88 1f       	adc	r24, r24
    3eea:	8b bf       	out	0x3b, r24	; 59
    3eec:	07 90       	elpm	r0, Z+
    3eee:	f6 91       	elpm	r31, Z
    3ef0:	e0 2d       	mov	r30, r0
    3ef2:	19 94       	eijmp

00003ef4 <__ashldi3>:
    3ef4:	0f 93       	push	r16
    3ef6:	08 30       	cpi	r16, 0x08	; 8
    3ef8:	90 f0       	brcs	.+36     	; 0x3f1e <__ashldi3+0x2a>
    3efa:	98 2f       	mov	r25, r24
    3efc:	87 2f       	mov	r24, r23
    3efe:	76 2f       	mov	r23, r22
    3f00:	65 2f       	mov	r22, r21
    3f02:	54 2f       	mov	r21, r20
    3f04:	43 2f       	mov	r20, r19
    3f06:	32 2f       	mov	r19, r18
    3f08:	22 27       	eor	r18, r18
    3f0a:	08 50       	subi	r16, 0x08	; 8
    3f0c:	f4 cf       	rjmp	.-24     	; 0x3ef6 <__ashldi3+0x2>
    3f0e:	22 0f       	add	r18, r18
    3f10:	33 1f       	adc	r19, r19
    3f12:	44 1f       	adc	r20, r20
    3f14:	55 1f       	adc	r21, r21
    3f16:	66 1f       	adc	r22, r22
    3f18:	77 1f       	adc	r23, r23
    3f1a:	88 1f       	adc	r24, r24
    3f1c:	99 1f       	adc	r25, r25
    3f1e:	0a 95       	dec	r16
    3f20:	b2 f7       	brpl	.-20     	; 0x3f0e <__ashldi3+0x1a>
    3f22:	0f 91       	pop	r16
    3f24:	08 95       	ret

00003f26 <__adddi3_s8>:
    3f26:	00 24       	eor	r0, r0
    3f28:	a7 fd       	sbrc	r26, 7
    3f2a:	00 94       	com	r0
    3f2c:	2a 0f       	add	r18, r26
    3f2e:	30 1d       	adc	r19, r0
    3f30:	40 1d       	adc	r20, r0
    3f32:	50 1d       	adc	r21, r0
    3f34:	60 1d       	adc	r22, r0
    3f36:	70 1d       	adc	r23, r0
    3f38:	80 1d       	adc	r24, r0
    3f3a:	90 1d       	adc	r25, r0
    3f3c:	08 95       	ret

00003f3e <__ftoa_engine>:
    3f3e:	28 30       	cpi	r18, 0x08	; 8
    3f40:	08 f0       	brcs	.+2      	; 0x3f44 <__ftoa_engine+0x6>
    3f42:	27 e0       	ldi	r18, 0x07	; 7
    3f44:	33 27       	eor	r19, r19
    3f46:	da 01       	movw	r26, r20
    3f48:	99 0f       	add	r25, r25
    3f4a:	31 1d       	adc	r19, r1
    3f4c:	87 fd       	sbrc	r24, 7
    3f4e:	91 60       	ori	r25, 0x01	; 1
    3f50:	00 96       	adiw	r24, 0x00	; 0
    3f52:	61 05       	cpc	r22, r1
    3f54:	71 05       	cpc	r23, r1
    3f56:	39 f4       	brne	.+14     	; 0x3f66 <__ftoa_engine+0x28>
    3f58:	32 60       	ori	r19, 0x02	; 2
    3f5a:	2e 5f       	subi	r18, 0xFE	; 254
    3f5c:	3d 93       	st	X+, r19
    3f5e:	30 e3       	ldi	r19, 0x30	; 48
    3f60:	2a 95       	dec	r18
    3f62:	e1 f7       	brne	.-8      	; 0x3f5c <__ftoa_engine+0x1e>
    3f64:	08 95       	ret
    3f66:	9f 3f       	cpi	r25, 0xFF	; 255
    3f68:	30 f0       	brcs	.+12     	; 0x3f76 <__ftoa_engine+0x38>
    3f6a:	80 38       	cpi	r24, 0x80	; 128
    3f6c:	71 05       	cpc	r23, r1
    3f6e:	61 05       	cpc	r22, r1
    3f70:	09 f0       	breq	.+2      	; 0x3f74 <__ftoa_engine+0x36>
    3f72:	3c 5f       	subi	r19, 0xFC	; 252
    3f74:	3c 5f       	subi	r19, 0xFC	; 252
    3f76:	3d 93       	st	X+, r19
    3f78:	91 30       	cpi	r25, 0x01	; 1
    3f7a:	08 f0       	brcs	.+2      	; 0x3f7e <__ftoa_engine+0x40>
    3f7c:	80 68       	ori	r24, 0x80	; 128
    3f7e:	91 1d       	adc	r25, r1
    3f80:	df 93       	push	r29
    3f82:	cf 93       	push	r28
    3f84:	1f 93       	push	r17
    3f86:	0f 93       	push	r16
    3f88:	ff 92       	push	r15
    3f8a:	ef 92       	push	r14
    3f8c:	19 2f       	mov	r17, r25
    3f8e:	98 7f       	andi	r25, 0xF8	; 248
    3f90:	96 95       	lsr	r25
    3f92:	e9 2f       	mov	r30, r25
    3f94:	96 95       	lsr	r25
    3f96:	96 95       	lsr	r25
    3f98:	e9 0f       	add	r30, r25
    3f9a:	ff 27       	eor	r31, r31
    3f9c:	e6 56       	subi	r30, 0x66	; 102
    3f9e:	fd 4f       	sbci	r31, 0xFD	; 253
    3fa0:	99 27       	eor	r25, r25
    3fa2:	33 27       	eor	r19, r19
    3fa4:	ee 24       	eor	r14, r14
    3fa6:	ff 24       	eor	r15, r15
    3fa8:	a7 01       	movw	r20, r14
    3faa:	e7 01       	movw	r28, r14
    3fac:	05 90       	lpm	r0, Z+
    3fae:	08 94       	sec
    3fb0:	07 94       	ror	r0
    3fb2:	28 f4       	brcc	.+10     	; 0x3fbe <__ftoa_engine+0x80>
    3fb4:	36 0f       	add	r19, r22
    3fb6:	e7 1e       	adc	r14, r23
    3fb8:	f8 1e       	adc	r15, r24
    3fba:	49 1f       	adc	r20, r25
    3fbc:	51 1d       	adc	r21, r1
    3fbe:	66 0f       	add	r22, r22
    3fc0:	77 1f       	adc	r23, r23
    3fc2:	88 1f       	adc	r24, r24
    3fc4:	99 1f       	adc	r25, r25
    3fc6:	06 94       	lsr	r0
    3fc8:	a1 f7       	brne	.-24     	; 0x3fb2 <__ftoa_engine+0x74>
    3fca:	05 90       	lpm	r0, Z+
    3fcc:	07 94       	ror	r0
    3fce:	28 f4       	brcc	.+10     	; 0x3fda <__ftoa_engine+0x9c>
    3fd0:	e7 0e       	add	r14, r23
    3fd2:	f8 1e       	adc	r15, r24
    3fd4:	49 1f       	adc	r20, r25
    3fd6:	56 1f       	adc	r21, r22
    3fd8:	c1 1d       	adc	r28, r1
    3fda:	77 0f       	add	r23, r23
    3fdc:	88 1f       	adc	r24, r24
    3fde:	99 1f       	adc	r25, r25
    3fe0:	66 1f       	adc	r22, r22
    3fe2:	06 94       	lsr	r0
    3fe4:	a1 f7       	brne	.-24     	; 0x3fce <__ftoa_engine+0x90>
    3fe6:	05 90       	lpm	r0, Z+
    3fe8:	07 94       	ror	r0
    3fea:	28 f4       	brcc	.+10     	; 0x3ff6 <__ftoa_engine+0xb8>
    3fec:	f8 0e       	add	r15, r24
    3fee:	49 1f       	adc	r20, r25
    3ff0:	56 1f       	adc	r21, r22
    3ff2:	c7 1f       	adc	r28, r23
    3ff4:	d1 1d       	adc	r29, r1
    3ff6:	88 0f       	add	r24, r24
    3ff8:	99 1f       	adc	r25, r25
    3ffa:	66 1f       	adc	r22, r22
    3ffc:	77 1f       	adc	r23, r23
    3ffe:	06 94       	lsr	r0
    4000:	a1 f7       	brne	.-24     	; 0x3fea <__ftoa_engine+0xac>
    4002:	05 90       	lpm	r0, Z+
    4004:	07 94       	ror	r0
    4006:	20 f4       	brcc	.+8      	; 0x4010 <__stack+0x11>
    4008:	49 0f       	add	r20, r25
    400a:	56 1f       	adc	r21, r22
    400c:	c7 1f       	adc	r28, r23
    400e:	d8 1f       	adc	r29, r24
    4010:	99 0f       	add	r25, r25
    4012:	66 1f       	adc	r22, r22
    4014:	77 1f       	adc	r23, r23
    4016:	88 1f       	adc	r24, r24
    4018:	06 94       	lsr	r0
    401a:	a9 f7       	brne	.-22     	; 0x4006 <__stack+0x7>
    401c:	84 91       	lpm	r24, Z
    401e:	10 95       	com	r17
    4020:	17 70       	andi	r17, 0x07	; 7
    4022:	41 f0       	breq	.+16     	; 0x4034 <__stack+0x35>
    4024:	d6 95       	lsr	r29
    4026:	c7 95       	ror	r28
    4028:	57 95       	ror	r21
    402a:	47 95       	ror	r20
    402c:	f7 94       	ror	r15
    402e:	e7 94       	ror	r14
    4030:	1a 95       	dec	r17
    4032:	c1 f7       	brne	.-16     	; 0x4024 <__stack+0x25>
    4034:	e0 e4       	ldi	r30, 0x40	; 64
    4036:	f2 e0       	ldi	r31, 0x02	; 2
    4038:	68 94       	set
    403a:	15 90       	lpm	r1, Z+
    403c:	15 91       	lpm	r17, Z+
    403e:	35 91       	lpm	r19, Z+
    4040:	65 91       	lpm	r22, Z+
    4042:	95 91       	lpm	r25, Z+
    4044:	05 90       	lpm	r0, Z+
    4046:	7f e2       	ldi	r23, 0x2F	; 47
    4048:	73 95       	inc	r23
    404a:	e1 18       	sub	r14, r1
    404c:	f1 0a       	sbc	r15, r17
    404e:	43 0b       	sbc	r20, r19
    4050:	56 0b       	sbc	r21, r22
    4052:	c9 0b       	sbc	r28, r25
    4054:	d0 09       	sbc	r29, r0
    4056:	c0 f7       	brcc	.-16     	; 0x4048 <__stack+0x49>
    4058:	e1 0c       	add	r14, r1
    405a:	f1 1e       	adc	r15, r17
    405c:	43 1f       	adc	r20, r19
    405e:	56 1f       	adc	r21, r22
    4060:	c9 1f       	adc	r28, r25
    4062:	d0 1d       	adc	r29, r0
    4064:	7e f4       	brtc	.+30     	; 0x4084 <__stack+0x85>
    4066:	70 33       	cpi	r23, 0x30	; 48
    4068:	11 f4       	brne	.+4      	; 0x406e <__stack+0x6f>
    406a:	8a 95       	dec	r24
    406c:	e6 cf       	rjmp	.-52     	; 0x403a <__stack+0x3b>
    406e:	e8 94       	clt
    4070:	01 50       	subi	r16, 0x01	; 1
    4072:	30 f0       	brcs	.+12     	; 0x4080 <__stack+0x81>
    4074:	08 0f       	add	r16, r24
    4076:	0a f4       	brpl	.+2      	; 0x407a <__stack+0x7b>
    4078:	00 27       	eor	r16, r16
    407a:	02 17       	cp	r16, r18
    407c:	08 f4       	brcc	.+2      	; 0x4080 <__stack+0x81>
    407e:	20 2f       	mov	r18, r16
    4080:	23 95       	inc	r18
    4082:	02 2f       	mov	r16, r18
    4084:	7a 33       	cpi	r23, 0x3A	; 58
    4086:	28 f0       	brcs	.+10     	; 0x4092 <__stack+0x93>
    4088:	79 e3       	ldi	r23, 0x39	; 57
    408a:	7d 93       	st	X+, r23
    408c:	2a 95       	dec	r18
    408e:	e9 f7       	brne	.-6      	; 0x408a <__stack+0x8b>
    4090:	10 c0       	rjmp	.+32     	; 0x40b2 <__stack+0xb3>
    4092:	7d 93       	st	X+, r23
    4094:	2a 95       	dec	r18
    4096:	89 f6       	brne	.-94     	; 0x403a <__stack+0x3b>
    4098:	06 94       	lsr	r0
    409a:	97 95       	ror	r25
    409c:	67 95       	ror	r22
    409e:	37 95       	ror	r19
    40a0:	17 95       	ror	r17
    40a2:	17 94       	ror	r1
    40a4:	e1 18       	sub	r14, r1
    40a6:	f1 0a       	sbc	r15, r17
    40a8:	43 0b       	sbc	r20, r19
    40aa:	56 0b       	sbc	r21, r22
    40ac:	c9 0b       	sbc	r28, r25
    40ae:	d0 09       	sbc	r29, r0
    40b0:	98 f0       	brcs	.+38     	; 0x40d8 <__stack+0xd9>
    40b2:	23 95       	inc	r18
    40b4:	7e 91       	ld	r23, -X
    40b6:	73 95       	inc	r23
    40b8:	7a 33       	cpi	r23, 0x3A	; 58
    40ba:	08 f0       	brcs	.+2      	; 0x40be <__stack+0xbf>
    40bc:	70 e3       	ldi	r23, 0x30	; 48
    40be:	7c 93       	st	X, r23
    40c0:	20 13       	cpse	r18, r16
    40c2:	b8 f7       	brcc	.-18     	; 0x40b2 <__stack+0xb3>
    40c4:	7e 91       	ld	r23, -X
    40c6:	70 61       	ori	r23, 0x10	; 16
    40c8:	7d 93       	st	X+, r23
    40ca:	30 f0       	brcs	.+12     	; 0x40d8 <__stack+0xd9>
    40cc:	83 95       	inc	r24
    40ce:	71 e3       	ldi	r23, 0x31	; 49
    40d0:	7d 93       	st	X+, r23
    40d2:	70 e3       	ldi	r23, 0x30	; 48
    40d4:	2a 95       	dec	r18
    40d6:	e1 f7       	brne	.-8      	; 0x40d0 <__stack+0xd1>
    40d8:	11 24       	eor	r1, r1
    40da:	ef 90       	pop	r14
    40dc:	ff 90       	pop	r15
    40de:	0f 91       	pop	r16
    40e0:	1f 91       	pop	r17
    40e2:	cf 91       	pop	r28
    40e4:	df 91       	pop	r29
    40e6:	99 27       	eor	r25, r25
    40e8:	87 fd       	sbrc	r24, 7
    40ea:	90 95       	com	r25
    40ec:	08 95       	ret

000040ee <strnlen_P>:
    40ee:	fc 01       	movw	r30, r24
    40f0:	05 90       	lpm	r0, Z+
    40f2:	61 50       	subi	r22, 0x01	; 1
    40f4:	70 40       	sbci	r23, 0x00	; 0
    40f6:	01 10       	cpse	r0, r1
    40f8:	d8 f7       	brcc	.-10     	; 0x40f0 <strnlen_P+0x2>
    40fa:	80 95       	com	r24
    40fc:	90 95       	com	r25
    40fe:	8e 0f       	add	r24, r30
    4100:	9f 1f       	adc	r25, r31
    4102:	08 95       	ret

00004104 <memcpy>:
    4104:	fb 01       	movw	r30, r22
    4106:	dc 01       	movw	r26, r24
    4108:	02 c0       	rjmp	.+4      	; 0x410e <memcpy+0xa>
    410a:	01 90       	ld	r0, Z+
    410c:	0d 92       	st	X+, r0
    410e:	41 50       	subi	r20, 0x01	; 1
    4110:	50 40       	sbci	r21, 0x00	; 0
    4112:	d8 f7       	brcc	.-10     	; 0x410a <memcpy+0x6>
    4114:	08 95       	ret

00004116 <memset>:
    4116:	dc 01       	movw	r26, r24
    4118:	01 c0       	rjmp	.+2      	; 0x411c <memset+0x6>
    411a:	6d 93       	st	X+, r22
    411c:	41 50       	subi	r20, 0x01	; 1
    411e:	50 40       	sbci	r21, 0x00	; 0
    4120:	e0 f7       	brcc	.-8      	; 0x411a <memset+0x4>
    4122:	08 95       	ret

00004124 <strnlen>:
    4124:	fc 01       	movw	r30, r24
    4126:	61 50       	subi	r22, 0x01	; 1
    4128:	70 40       	sbci	r23, 0x00	; 0
    412a:	01 90       	ld	r0, Z+
    412c:	01 10       	cpse	r0, r1
    412e:	d8 f7       	brcc	.-10     	; 0x4126 <strnlen+0x2>
    4130:	80 95       	com	r24
    4132:	90 95       	com	r25
    4134:	8e 0f       	add	r24, r30
    4136:	9f 1f       	adc	r25, r31
    4138:	08 95       	ret

0000413a <__itoa_ncheck>:
    413a:	bb 27       	eor	r27, r27
    413c:	4a 30       	cpi	r20, 0x0A	; 10
    413e:	31 f4       	brne	.+12     	; 0x414c <__itoa_ncheck+0x12>
    4140:	99 23       	and	r25, r25
    4142:	22 f4       	brpl	.+8      	; 0x414c <__itoa_ncheck+0x12>
    4144:	bd e2       	ldi	r27, 0x2D	; 45
    4146:	90 95       	com	r25
    4148:	81 95       	neg	r24
    414a:	9f 4f       	sbci	r25, 0xFF	; 255
    414c:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <__utoa_common>

00004150 <__utoa_ncheck>:
    4150:	bb 27       	eor	r27, r27

00004152 <__utoa_common>:
    4152:	fb 01       	movw	r30, r22
    4154:	55 27       	eor	r21, r21
    4156:	aa 27       	eor	r26, r26
    4158:	88 0f       	add	r24, r24
    415a:	99 1f       	adc	r25, r25
    415c:	aa 1f       	adc	r26, r26
    415e:	a4 17       	cp	r26, r20
    4160:	10 f0       	brcs	.+4      	; 0x4166 <__utoa_common+0x14>
    4162:	a4 1b       	sub	r26, r20
    4164:	83 95       	inc	r24
    4166:	50 51       	subi	r21, 0x10	; 16
    4168:	b9 f7       	brne	.-18     	; 0x4158 <__utoa_common+0x6>
    416a:	a0 5d       	subi	r26, 0xD0	; 208
    416c:	aa 33       	cpi	r26, 0x3A	; 58
    416e:	08 f0       	brcs	.+2      	; 0x4172 <__utoa_common+0x20>
    4170:	a9 5d       	subi	r26, 0xD9	; 217
    4172:	a1 93       	st	Z+, r26
    4174:	00 97       	sbiw	r24, 0x00	; 0
    4176:	79 f7       	brne	.-34     	; 0x4156 <__utoa_common+0x4>
    4178:	b1 11       	cpse	r27, r1
    417a:	b1 93       	st	Z+, r27
    417c:	11 92       	st	Z+, r1
    417e:	cb 01       	movw	r24, r22
    4180:	0c 94 5c 21 	jmp	0x42b8	; 0x42b8 <strrev>

00004184 <fputc>:
    4184:	0f 93       	push	r16
    4186:	1f 93       	push	r17
    4188:	cf 93       	push	r28
    418a:	df 93       	push	r29
    418c:	fb 01       	movw	r30, r22
    418e:	23 81       	ldd	r18, Z+3	; 0x03
    4190:	21 fd       	sbrc	r18, 1
    4192:	03 c0       	rjmp	.+6      	; 0x419a <fputc+0x16>
    4194:	8f ef       	ldi	r24, 0xFF	; 255
    4196:	9f ef       	ldi	r25, 0xFF	; 255
    4198:	2c c0       	rjmp	.+88     	; 0x41f2 <fputc+0x6e>
    419a:	22 ff       	sbrs	r18, 2
    419c:	16 c0       	rjmp	.+44     	; 0x41ca <fputc+0x46>
    419e:	46 81       	ldd	r20, Z+6	; 0x06
    41a0:	57 81       	ldd	r21, Z+7	; 0x07
    41a2:	24 81       	ldd	r18, Z+4	; 0x04
    41a4:	35 81       	ldd	r19, Z+5	; 0x05
    41a6:	42 17       	cp	r20, r18
    41a8:	53 07       	cpc	r21, r19
    41aa:	44 f4       	brge	.+16     	; 0x41bc <fputc+0x38>
    41ac:	a0 81       	ld	r26, Z
    41ae:	b1 81       	ldd	r27, Z+1	; 0x01
    41b0:	9d 01       	movw	r18, r26
    41b2:	2f 5f       	subi	r18, 0xFF	; 255
    41b4:	3f 4f       	sbci	r19, 0xFF	; 255
    41b6:	20 83       	st	Z, r18
    41b8:	31 83       	std	Z+1, r19	; 0x01
    41ba:	8c 93       	st	X, r24
    41bc:	26 81       	ldd	r18, Z+6	; 0x06
    41be:	37 81       	ldd	r19, Z+7	; 0x07
    41c0:	2f 5f       	subi	r18, 0xFF	; 255
    41c2:	3f 4f       	sbci	r19, 0xFF	; 255
    41c4:	26 83       	std	Z+6, r18	; 0x06
    41c6:	37 83       	std	Z+7, r19	; 0x07
    41c8:	14 c0       	rjmp	.+40     	; 0x41f2 <fputc+0x6e>
    41ca:	8b 01       	movw	r16, r22
    41cc:	ec 01       	movw	r28, r24
    41ce:	fb 01       	movw	r30, r22
    41d0:	00 84       	ldd	r0, Z+8	; 0x08
    41d2:	f1 85       	ldd	r31, Z+9	; 0x09
    41d4:	e0 2d       	mov	r30, r0
    41d6:	19 95       	eicall
    41d8:	89 2b       	or	r24, r25
    41da:	e1 f6       	brne	.-72     	; 0x4194 <fputc+0x10>
    41dc:	d8 01       	movw	r26, r16
    41de:	16 96       	adiw	r26, 0x06	; 6
    41e0:	8d 91       	ld	r24, X+
    41e2:	9c 91       	ld	r25, X
    41e4:	17 97       	sbiw	r26, 0x07	; 7
    41e6:	01 96       	adiw	r24, 0x01	; 1
    41e8:	16 96       	adiw	r26, 0x06	; 6
    41ea:	8d 93       	st	X+, r24
    41ec:	9c 93       	st	X, r25
    41ee:	17 97       	sbiw	r26, 0x07	; 7
    41f0:	ce 01       	movw	r24, r28
    41f2:	df 91       	pop	r29
    41f4:	cf 91       	pop	r28
    41f6:	1f 91       	pop	r17
    41f8:	0f 91       	pop	r16
    41fa:	08 95       	ret

000041fc <__ultoa_invert>:
    41fc:	fa 01       	movw	r30, r20
    41fe:	aa 27       	eor	r26, r26
    4200:	28 30       	cpi	r18, 0x08	; 8
    4202:	51 f1       	breq	.+84     	; 0x4258 <__ultoa_invert+0x5c>
    4204:	20 31       	cpi	r18, 0x10	; 16
    4206:	81 f1       	breq	.+96     	; 0x4268 <__ultoa_invert+0x6c>
    4208:	e8 94       	clt
    420a:	6f 93       	push	r22
    420c:	6e 7f       	andi	r22, 0xFE	; 254
    420e:	6e 5f       	subi	r22, 0xFE	; 254
    4210:	7f 4f       	sbci	r23, 0xFF	; 255
    4212:	8f 4f       	sbci	r24, 0xFF	; 255
    4214:	9f 4f       	sbci	r25, 0xFF	; 255
    4216:	af 4f       	sbci	r26, 0xFF	; 255
    4218:	b1 e0       	ldi	r27, 0x01	; 1
    421a:	3e d0       	rcall	.+124    	; 0x4298 <__ultoa_invert+0x9c>
    421c:	b4 e0       	ldi	r27, 0x04	; 4
    421e:	3c d0       	rcall	.+120    	; 0x4298 <__ultoa_invert+0x9c>
    4220:	67 0f       	add	r22, r23
    4222:	78 1f       	adc	r23, r24
    4224:	89 1f       	adc	r24, r25
    4226:	9a 1f       	adc	r25, r26
    4228:	a1 1d       	adc	r26, r1
    422a:	68 0f       	add	r22, r24
    422c:	79 1f       	adc	r23, r25
    422e:	8a 1f       	adc	r24, r26
    4230:	91 1d       	adc	r25, r1
    4232:	a1 1d       	adc	r26, r1
    4234:	6a 0f       	add	r22, r26
    4236:	71 1d       	adc	r23, r1
    4238:	81 1d       	adc	r24, r1
    423a:	91 1d       	adc	r25, r1
    423c:	a1 1d       	adc	r26, r1
    423e:	20 d0       	rcall	.+64     	; 0x4280 <__ultoa_invert+0x84>
    4240:	09 f4       	brne	.+2      	; 0x4244 <__ultoa_invert+0x48>
    4242:	68 94       	set
    4244:	3f 91       	pop	r19
    4246:	2a e0       	ldi	r18, 0x0A	; 10
    4248:	26 9f       	mul	r18, r22
    424a:	11 24       	eor	r1, r1
    424c:	30 19       	sub	r19, r0
    424e:	30 5d       	subi	r19, 0xD0	; 208
    4250:	31 93       	st	Z+, r19
    4252:	de f6       	brtc	.-74     	; 0x420a <__ultoa_invert+0xe>
    4254:	cf 01       	movw	r24, r30
    4256:	08 95       	ret
    4258:	46 2f       	mov	r20, r22
    425a:	47 70       	andi	r20, 0x07	; 7
    425c:	40 5d       	subi	r20, 0xD0	; 208
    425e:	41 93       	st	Z+, r20
    4260:	b3 e0       	ldi	r27, 0x03	; 3
    4262:	0f d0       	rcall	.+30     	; 0x4282 <__ultoa_invert+0x86>
    4264:	c9 f7       	brne	.-14     	; 0x4258 <__ultoa_invert+0x5c>
    4266:	f6 cf       	rjmp	.-20     	; 0x4254 <__ultoa_invert+0x58>
    4268:	46 2f       	mov	r20, r22
    426a:	4f 70       	andi	r20, 0x0F	; 15
    426c:	40 5d       	subi	r20, 0xD0	; 208
    426e:	4a 33       	cpi	r20, 0x3A	; 58
    4270:	18 f0       	brcs	.+6      	; 0x4278 <__ultoa_invert+0x7c>
    4272:	49 5d       	subi	r20, 0xD9	; 217
    4274:	31 fd       	sbrc	r19, 1
    4276:	40 52       	subi	r20, 0x20	; 32
    4278:	41 93       	st	Z+, r20
    427a:	02 d0       	rcall	.+4      	; 0x4280 <__ultoa_invert+0x84>
    427c:	a9 f7       	brne	.-22     	; 0x4268 <__ultoa_invert+0x6c>
    427e:	ea cf       	rjmp	.-44     	; 0x4254 <__ultoa_invert+0x58>
    4280:	b4 e0       	ldi	r27, 0x04	; 4
    4282:	a6 95       	lsr	r26
    4284:	97 95       	ror	r25
    4286:	87 95       	ror	r24
    4288:	77 95       	ror	r23
    428a:	67 95       	ror	r22
    428c:	ba 95       	dec	r27
    428e:	c9 f7       	brne	.-14     	; 0x4282 <__ultoa_invert+0x86>
    4290:	00 97       	sbiw	r24, 0x00	; 0
    4292:	61 05       	cpc	r22, r1
    4294:	71 05       	cpc	r23, r1
    4296:	08 95       	ret
    4298:	9b 01       	movw	r18, r22
    429a:	ac 01       	movw	r20, r24
    429c:	0a 2e       	mov	r0, r26
    429e:	06 94       	lsr	r0
    42a0:	57 95       	ror	r21
    42a2:	47 95       	ror	r20
    42a4:	37 95       	ror	r19
    42a6:	27 95       	ror	r18
    42a8:	ba 95       	dec	r27
    42aa:	c9 f7       	brne	.-14     	; 0x429e <__ultoa_invert+0xa2>
    42ac:	62 0f       	add	r22, r18
    42ae:	73 1f       	adc	r23, r19
    42b0:	84 1f       	adc	r24, r20
    42b2:	95 1f       	adc	r25, r21
    42b4:	a0 1d       	adc	r26, r0
    42b6:	08 95       	ret

000042b8 <strrev>:
    42b8:	dc 01       	movw	r26, r24
    42ba:	fc 01       	movw	r30, r24
    42bc:	67 2f       	mov	r22, r23
    42be:	71 91       	ld	r23, Z+
    42c0:	77 23       	and	r23, r23
    42c2:	e1 f7       	brne	.-8      	; 0x42bc <strrev+0x4>
    42c4:	32 97       	sbiw	r30, 0x02	; 2
    42c6:	04 c0       	rjmp	.+8      	; 0x42d0 <strrev+0x18>
    42c8:	7c 91       	ld	r23, X
    42ca:	6d 93       	st	X+, r22
    42cc:	70 83       	st	Z, r23
    42ce:	62 91       	ld	r22, -Z
    42d0:	ae 17       	cp	r26, r30
    42d2:	bf 07       	cpc	r27, r31
    42d4:	c8 f3       	brcs	.-14     	; 0x42c8 <strrev+0x10>
    42d6:	08 95       	ret

000042d8 <_exit>:
    42d8:	f8 94       	cli

000042da <__stop_program>:
    42da:	ff cf       	rjmp	.-2      	; 0x42da <__stop_program>

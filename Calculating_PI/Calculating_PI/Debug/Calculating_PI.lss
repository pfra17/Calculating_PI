
Calculating_PI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006c0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00802000  00006c0a  00006c9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000cb9  00802082  00802082  00006d20  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006d20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006d7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e8  00000000  00000000  00006dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b2fb  00000000  00000000  000075a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004679  00000000  00000000  0001289f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000563a  00000000  00000000  00016f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ea0  00000000  00000000  0001c554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000055b6  00000000  00000000  0001e3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040e3  00000000  00000000  000239aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000710  00000000  00000000  00027a8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__ctors_end>
       4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
       8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
       c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      10:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      14:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      18:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      1c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      20:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      24:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      28:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      2c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      30:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      34:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      38:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__vector_14>
      3c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      40:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      44:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      48:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      4c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      50:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      54:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      58:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      5c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      60:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      64:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      68:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      6c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      70:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      74:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      78:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      7c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      80:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      84:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      88:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      8c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      90:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      94:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      98:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      9c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      a0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      a4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      a8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      ac:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      b0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      b4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      b8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      bc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      c0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      c4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      c8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      cc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      d0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      d4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      d8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      dc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      e0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      e4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      e8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      ec:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      f0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      f4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      f8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      fc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     100:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     104:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     108:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     10c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     110:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     114:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     118:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     11c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     120:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     124:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     128:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     12c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     130:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     134:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     138:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     13c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     140:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     144:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     148:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     14c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     150:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     154:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     158:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     15c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     160:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     164:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     168:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     16c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     170:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     174:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     178:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     17c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     180:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     184:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     188:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     18c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     190:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     194:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     198:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     19c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1a0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1a4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1a8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1ac:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1b0:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__vector_108>
     1b4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1b8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1bc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1c0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1c4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1c8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1cc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1d0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1d4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1d8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1dc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1e0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1e4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1e8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1ec:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1f0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1f4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1f8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1fc:	ea 1e       	adc	r14, r26
     1fe:	ea 1e       	adc	r14, r26
     200:	ea 1e       	adc	r14, r26
     202:	71 1f       	adc	r23, r17
     204:	3d 1f       	adc	r19, r29
     206:	6b 1f       	adc	r22, r27
     208:	ea 1e       	adc	r14, r26
     20a:	ea 1e       	adc	r14, r26
     20c:	71 1f       	adc	r23, r17
     20e:	3d 1f       	adc	r19, r29

00000210 <__trampolines_start>:
     210:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <vDisplayUpdateTask>
     214:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <prvProcessReceivedCommands+0x1d0>
     218:	0c 94 25 1a 	jmp	0x344a	; 0x344a <prvIdleTask>
     21c:	0c 94 86 22 	jmp	0x450c	; 0x450c <vCalculation>
     220:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <prvProcessReceivedCommands+0x1dc>
     224:	0c 94 80 21 	jmp	0x4300	; 0x4300 <vInterface>
     228:	0c 94 cc 1c 	jmp	0x3998	; 0x3998 <prvTimerTask>
     22c:	0c 94 08 07 	jmp	0xe10	; 0xe10 <vEventGroupSetBitsCallback>
     230:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <prvProcessReceivedCommands+0x174>
     234:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <prvProcessReceivedCommands+0xce>
     238:	0c 94 29 22 	jmp	0x4452	; 0x4452 <vButtonHandler>

0000023c <__trampolines_end>:
     23c:	6e 61       	ori	r22, 0x1E	; 30
     23e:	6e 00       	.word	0x006e	; ????

00000240 <__c.2332>:
     240:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     250:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     260:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     270:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     280:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     290:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2a0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2b0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2c0:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2d0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2e0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2f0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     300:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     310:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     320:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     330:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000033e <__ctors_end>:
     33e:	11 24       	eor	r1, r1
     340:	1f be       	out	0x3f, r1	; 63
     342:	cf ef       	ldi	r28, 0xFF	; 255
     344:	cd bf       	out	0x3d, r28	; 61
     346:	df e3       	ldi	r29, 0x3F	; 63
     348:	de bf       	out	0x3e, r29	; 62
     34a:	00 e0       	ldi	r16, 0x00	; 0
     34c:	0c bf       	out	0x3c, r16	; 60

0000034e <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     34e:	eb e3       	ldi	r30, 0x3B	; 59
     350:	fd e2       	ldi	r31, 0x2D	; 45
     352:	8a ea       	ldi	r24, 0xAA	; 170
     354:	90 e4       	ldi	r25, 0x40	; 64
     356:	81 93       	st	Z+, r24
     358:	e0 30       	cpi	r30, 0x00	; 0
     35a:	f9 07       	cpc	r31, r25
     35c:	e0 f3       	brcs	.-8      	; 0x356 <init_mem+0x8>
	...

00000360 <__do_copy_data>:
     360:	10 e2       	ldi	r17, 0x20	; 32
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	b0 e2       	ldi	r27, 0x20	; 32
     366:	ea e0       	ldi	r30, 0x0A	; 10
     368:	fc e6       	ldi	r31, 0x6C	; 108
     36a:	00 e0       	ldi	r16, 0x00	; 0
     36c:	0b bf       	out	0x3b, r16	; 59
     36e:	02 c0       	rjmp	.+4      	; 0x374 <__do_copy_data+0x14>
     370:	07 90       	elpm	r0, Z+
     372:	0d 92       	st	X+, r0
     374:	a2 38       	cpi	r26, 0x82	; 130
     376:	b1 07       	cpc	r27, r17
     378:	d9 f7       	brne	.-10     	; 0x370 <__do_copy_data+0x10>

0000037a <__do_clear_bss>:
     37a:	2d e2       	ldi	r18, 0x2D	; 45
     37c:	a2 e8       	ldi	r26, 0x82	; 130
     37e:	b0 e2       	ldi	r27, 0x20	; 32
     380:	01 c0       	rjmp	.+2      	; 0x384 <.do_clear_bss_start>

00000382 <.do_clear_bss_loop>:
     382:	1d 92       	st	X+, r1

00000384 <.do_clear_bss_start>:
     384:	ab 33       	cpi	r26, 0x3B	; 59
     386:	b2 07       	cpc	r27, r18
     388:	e1 f7       	brne	.-8      	; 0x382 <.do_clear_bss_loop>
     38a:	0e 94 1c 21 	call	0x4238	; 0x4238 <main>
     38e:	0c 94 03 36 	jmp	0x6c06	; 0x6c06 <_exit>

00000392 <__bad_interrupt>:
     392:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000396 <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
     39e:	80 ea       	ldi	r24, 0xA0	; 160
     3a0:	96 e0       	ldi	r25, 0x06	; 6
     3a2:	20 e1       	ldi	r18, 0x10	; 16
     3a4:	fc 01       	movw	r30, r24
     3a6:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     3a8:	80 ea       	ldi	r24, 0xA0	; 160
     3aa:	96 e0       	ldi	r25, 0x06	; 6
     3ac:	20 e2       	ldi	r18, 0x20	; 32
     3ae:	fc 01       	movw	r30, r24
     3b0:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     3b2:	80 ea       	ldi	r24, 0xA0	; 160
     3b4:	96 e0       	ldi	r25, 0x06	; 6
     3b6:	20 e4       	ldi	r18, 0x40	; 64
     3b8:	fc 01       	movw	r30, r24
     3ba:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     3bc:	80 ea       	ldi	r24, 0xA0	; 160
     3be:	96 e0       	ldi	r25, 0x06	; 6
     3c0:	20 e8       	ldi	r18, 0x80	; 128
     3c2:	fc 01       	movw	r30, r24
     3c4:	22 83       	std	Z+2, r18	; 0x02
 }
     3c6:	00 00       	nop
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     3d6:	80 ea       	ldi	r24, 0xA0	; 160
     3d8:	96 e0       	ldi	r25, 0x06	; 6
     3da:	fc 01       	movw	r30, r24
     3dc:	80 85       	ldd	r24, Z+8	; 0x08
     3de:	88 2f       	mov	r24, r24
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	80 71       	andi	r24, 0x10	; 16
     3e4:	99 27       	eor	r25, r25
     3e6:	95 95       	asr	r25
     3e8:	87 95       	ror	r24
     3ea:	95 95       	asr	r25
     3ec:	87 95       	ror	r24
     3ee:	95 95       	asr	r25
     3f0:	87 95       	ror	r24
     3f2:	95 95       	asr	r25
     3f4:	87 95       	ror	r24
     3f6:	89 2b       	or	r24, r25
     3f8:	89 f4       	brne	.+34     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		if(b1Count < 60000) {
     3fa:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <__data_end>
     3fe:	90 91 83 20 	lds	r25, 0x2083	; 0x802083 <__data_end+0x1>
     402:	80 36       	cpi	r24, 0x60	; 96
     404:	9a 4e       	sbci	r25, 0xEA	; 234
     406:	20 f5       	brcc	.+72     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			b1Count++;
     408:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <__data_end>
     40c:	90 91 83 20 	lds	r25, 0x2083	; 0x802083 <__data_end+0x1>
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	80 93 82 20 	sts	0x2082, r24	; 0x802082 <__data_end>
     416:	90 93 83 20 	sts	0x2083, r25	; 0x802083 <__data_end+0x1>
     41a:	1a c0       	rjmp	.+52     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     41c:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <__data_end>
     420:	90 91 83 20 	lds	r25, 0x2083	; 0x802083 <__data_end+0x1>
     424:	0b 97       	sbiw	r24, 0x0b	; 11
     426:	68 f0       	brcs	.+26     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     428:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <__data_end>
     42c:	90 91 83 20 	lds	r25, 0x2083	; 0x802083 <__data_end+0x1>
     430:	c3 97       	sbiw	r24, 0x33	; 51
     432:	18 f0       	brcs	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     434:	10 92 02 2d 	sts	0x2D02, r1	; 0x802d02 <b1Status>
     438:	07 c0       	rjmp	.+14     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	80 93 02 2d 	sts	0x2D02, r24	; 0x802d02 <b1Status>
     440:	03 c0       	rjmp	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			}
		} else {
			b1Status = NOT_PRESSED;
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	80 93 02 2d 	sts	0x2D02, r24	; 0x802d02 <b1Status>
		}
		b1Count = 0;
     448:	10 92 82 20 	sts	0x2082, r1	; 0x802082 <__data_end>
     44c:	10 92 83 20 	sts	0x2083, r1	; 0x802083 <__data_end+0x1>
	}
	if(Button2_Value == 0) {
     450:	80 ea       	ldi	r24, 0xA0	; 160
     452:	96 e0       	ldi	r25, 0x06	; 6
     454:	fc 01       	movw	r30, r24
     456:	80 85       	ldd	r24, Z+8	; 0x08
     458:	88 2f       	mov	r24, r24
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	80 72       	andi	r24, 0x20	; 32
     45e:	99 27       	eor	r25, r25
     460:	95 95       	asr	r25
     462:	87 95       	ror	r24
     464:	95 95       	asr	r25
     466:	87 95       	ror	r24
     468:	95 95       	asr	r25
     46a:	87 95       	ror	r24
     46c:	95 95       	asr	r25
     46e:	87 95       	ror	r24
     470:	95 95       	asr	r25
     472:	87 95       	ror	r24
     474:	89 2b       	or	r24, r25
     476:	89 f4       	brne	.+34     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
		if(b2Count < 60000) {
     478:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <b2Count.3830>
     47c:	90 91 85 20 	lds	r25, 0x2085	; 0x802085 <b2Count.3830+0x1>
     480:	80 36       	cpi	r24, 0x60	; 96
     482:	9a 4e       	sbci	r25, 0xEA	; 234
     484:	20 f5       	brcc	.+72     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
			b2Count++;
     486:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <b2Count.3830>
     48a:	90 91 85 20 	lds	r25, 0x2085	; 0x802085 <b2Count.3830+0x1>
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	80 93 84 20 	sts	0x2084, r24	; 0x802084 <b2Count.3830>
     494:	90 93 85 20 	sts	0x2085, r25	; 0x802085 <b2Count.3830+0x1>
     498:	1a c0       	rjmp	.+52     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     49a:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <b2Count.3830>
     49e:	90 91 85 20 	lds	r25, 0x2085	; 0x802085 <b2Count.3830+0x1>
     4a2:	0b 97       	sbiw	r24, 0x0b	; 11
     4a4:	68 f0       	brcs	.+26     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4a6:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <b2Count.3830>
     4aa:	90 91 85 20 	lds	r25, 0x2085	; 0x802085 <b2Count.3830+0x1>
     4ae:	c3 97       	sbiw	r24, 0x33	; 51
     4b0:	18 f0       	brcs	.+6      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     4b2:	10 92 03 2d 	sts	0x2D03, r1	; 0x802d03 <b2Status>
     4b6:	07 c0       	rjmp	.+14     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	80 93 03 2d 	sts	0x2D03, r24	; 0x802d03 <b2Status>
     4be:	03 c0       	rjmp	.+6      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
			}
		} else {
			b2Status = NOT_PRESSED;			
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	80 93 03 2d 	sts	0x2D03, r24	; 0x802d03 <b2Status>
		}
		b2Count = 0;
     4c6:	10 92 84 20 	sts	0x2084, r1	; 0x802084 <b2Count.3830>
     4ca:	10 92 85 20 	sts	0x2085, r1	; 0x802085 <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     4ce:	80 ea       	ldi	r24, 0xA0	; 160
     4d0:	96 e0       	ldi	r25, 0x06	; 6
     4d2:	fc 01       	movw	r30, r24
     4d4:	80 85       	ldd	r24, Z+8	; 0x08
     4d6:	88 2f       	mov	r24, r24
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	80 74       	andi	r24, 0x40	; 64
     4dc:	99 27       	eor	r25, r25
     4de:	08 2e       	mov	r0, r24
     4e0:	89 2f       	mov	r24, r25
     4e2:	00 0c       	add	r0, r0
     4e4:	88 1f       	adc	r24, r24
     4e6:	99 0b       	sbc	r25, r25
     4e8:	00 0c       	add	r0, r0
     4ea:	88 1f       	adc	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	89 2b       	or	r24, r25
     4f0:	89 f4       	brne	.+34     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
		if(b3Count < 60000) {
     4f2:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <b3Count.3831>
     4f6:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <b3Count.3831+0x1>
     4fa:	80 36       	cpi	r24, 0x60	; 96
     4fc:	9a 4e       	sbci	r25, 0xEA	; 234
     4fe:	20 f5       	brcc	.+72     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
			b3Count++;
     500:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <b3Count.3831>
     504:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <b3Count.3831+0x1>
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <b3Count.3831>
     50e:	90 93 87 20 	sts	0x2087, r25	; 0x802087 <b3Count.3831+0x1>
     512:	1a c0       	rjmp	.+52     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     514:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <b3Count.3831>
     518:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <b3Count.3831+0x1>
     51c:	0b 97       	sbiw	r24, 0x0b	; 11
     51e:	68 f0       	brcs	.+26     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     520:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <b3Count.3831>
     524:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <b3Count.3831+0x1>
     528:	c3 97       	sbiw	r24, 0x33	; 51
     52a:	18 f0       	brcs	.+6      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     52c:	10 92 04 2d 	sts	0x2D04, r1	; 0x802d04 <b3Status>
     530:	07 c0       	rjmp	.+14     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	80 93 04 2d 	sts	0x2D04, r24	; 0x802d04 <b3Status>
     538:	03 c0       	rjmp	.+6      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
			}
		} else {
			b3Status = NOT_PRESSED;
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	80 93 04 2d 	sts	0x2D04, r24	; 0x802d04 <b3Status>
		}
		b3Count = 0;
     540:	10 92 86 20 	sts	0x2086, r1	; 0x802086 <b3Count.3831>
     544:	10 92 87 20 	sts	0x2087, r1	; 0x802087 <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     548:	80 ea       	ldi	r24, 0xA0	; 160
     54a:	96 e0       	ldi	r25, 0x06	; 6
     54c:	fc 01       	movw	r30, r24
     54e:	80 85       	ldd	r24, Z+8	; 0x08
     550:	88 23       	and	r24, r24
     552:	8c f0       	brlt	.+34     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
		if(b4Count < 60000) {
     554:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <b4Count.3832>
     558:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <b4Count.3832+0x1>
     55c:	80 36       	cpi	r24, 0x60	; 96
     55e:	9a 4e       	sbci	r25, 0xEA	; 234
     560:	20 f5       	brcc	.+72     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
			b4Count++;
     562:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <b4Count.3832>
     566:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <b4Count.3832+0x1>
     56a:	01 96       	adiw	r24, 0x01	; 1
     56c:	80 93 88 20 	sts	0x2088, r24	; 0x802088 <b4Count.3832>
     570:	90 93 89 20 	sts	0x2089, r25	; 0x802089 <b4Count.3832+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
     574:	1a c0       	rjmp	.+52     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     576:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <b4Count.3832>
     57a:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <b4Count.3832+0x1>
     57e:	0b 97       	sbiw	r24, 0x0b	; 11
     580:	68 f0       	brcs	.+26     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     582:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <b4Count.3832>
     586:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <b4Count.3832+0x1>
     58a:	c3 97       	sbiw	r24, 0x33	; 51
     58c:	18 f0       	brcs	.+6      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     58e:	10 92 05 2d 	sts	0x2D05, r1	; 0x802d05 <b4Status>
     592:	07 c0       	rjmp	.+14     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 05 2d 	sts	0x2D05, r24	; 0x802d05 <b4Status>
     59a:	03 c0       	rjmp	.+6      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
			}
		} else {
			b4Status = NOT_PRESSED;
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	80 93 05 2d 	sts	0x2D05, r24	; 0x802d05 <b4Status>
		}
		b4Count = 0;
     5a2:	10 92 88 20 	sts	0x2088, r1	; 0x802088 <b4Count.3832>
     5a6:	10 92 89 20 	sts	0x2089, r1	; 0x802089 <b4Count.3832+0x1>
	}
 }
     5aa:	00 00       	nop
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <getButtonPress>:

 button_press_t getButtonPress(button_t button) {
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	1f 92       	push	r1
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	89 83       	std	Y+1, r24	; 0x01
	switch(button) {
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	88 2f       	mov	r24, r24
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	91 05       	cpc	r25, r1
     5c8:	79 f0       	breq	.+30     	; 0x5e8 <getButtonPress+0x36>
     5ca:	82 30       	cpi	r24, 0x02	; 2
     5cc:	91 05       	cpc	r25, r1
     5ce:	1c f4       	brge	.+6      	; 0x5d6 <getButtonPress+0x24>
     5d0:	89 2b       	or	r24, r25
     5d2:	39 f0       	breq	.+14     	; 0x5e2 <getButtonPress+0x30>
     5d4:	12 c0       	rjmp	.+36     	; 0x5fa <getButtonPress+0x48>
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	91 05       	cpc	r25, r1
     5da:	49 f0       	breq	.+18     	; 0x5ee <getButtonPress+0x3c>
     5dc:	03 97       	sbiw	r24, 0x03	; 3
     5de:	51 f0       	breq	.+20     	; 0x5f4 <getButtonPress+0x42>
     5e0:	0c c0       	rjmp	.+24     	; 0x5fa <getButtonPress+0x48>
		case BUTTON1:
			return b1Status;
     5e2:	80 91 02 2d 	lds	r24, 0x2D02	; 0x802d02 <b1Status>
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <getButtonPress+0x4a>
		break;
		case BUTTON2:
			return b2Status;
     5e8:	80 91 03 2d 	lds	r24, 0x2D03	; 0x802d03 <b2Status>
     5ec:	07 c0       	rjmp	.+14     	; 0x5fc <getButtonPress+0x4a>
		break;
		case BUTTON3:
			return b3Status;
     5ee:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <b3Status>
     5f2:	04 c0       	rjmp	.+8      	; 0x5fc <getButtonPress+0x4a>
		break;
		case BUTTON4:
			return b4Status;
     5f4:	80 91 05 2d 	lds	r24, 0x2D05	; 0x802d05 <b4Status>
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <getButtonPress+0x4a>
		break;
	}
	return NOT_PRESSED;
     5fa:	82 e0       	ldi	r24, 0x02	; 2
     5fc:	0f 90       	pop	r0
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     604:	0f 93       	push	r16
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	00 d0       	rcall	.+0      	; 0x60c <CCPWrite+0x8>
     60c:	00 d0       	rcall	.+0      	; 0x60e <CCPWrite+0xa>
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	8c 83       	std	Y+4, r24	; 0x04
     614:	9d 83       	std	Y+5, r25	; 0x05
     616:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     618:	8f e3       	ldi	r24, 0x3F	; 63
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	fc 01       	movw	r30, r24
     61e:	80 81       	ld	r24, Z
     620:	8b 83       	std	Y+3, r24	; 0x03
     622:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
     624:	8c 81       	ldd	r24, Y+4	; 0x04
     626:	9d 81       	ldd	r25, Y+5	; 0x05
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
     62c:	8b e3       	ldi	r24, 0x3B	; 59
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	fc 01       	movw	r30, r24
     632:	10 82       	st	Z, r1
#endif
	asm volatile(
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	2e 81       	ldd	r18, Y+6	; 0x06
     63a:	fc 01       	movw	r30, r24
     63c:	08 ed       	ldi	r16, 0xD8	; 216
     63e:	04 bf       	out	0x34, r16	; 52
     640:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     642:	8f e3       	ldi	r24, 0x3F	; 63
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	2b 81       	ldd	r18, Y+3	; 0x03
     648:	fc 01       	movw	r30, r24
     64a:	20 83       	st	Z, r18
#endif
}
     64c:	00 00       	nop
     64e:	26 96       	adiw	r28, 0x06	; 6
     650:	cd bf       	out	0x3d, r28	; 61
     652:	de bf       	out	0x3e, r29	; 62
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	0f 91       	pop	r16
     65a:	08 95       	ret

0000065c <CLKSYS_XOSC_Config>:
 *                             external clock) and startup times.
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	00 d0       	rcall	.+0      	; 0x662 <CLKSYS_XOSC_Config+0x6>
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	89 83       	std	Y+1, r24	; 0x01
     668:	6a 83       	std	Y+2, r22	; 0x02
     66a:	4b 83       	std	Y+3, r20	; 0x03
	OSC.XOSCCTRL = (uint8_t) freqRange |
     66c:	80 e5       	ldi	r24, 0x50	; 80
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	2a 81       	ldd	r18, Y+2	; 0x02
     672:	22 23       	and	r18, r18
     674:	11 f0       	breq	.+4      	; 0x67a <CLKSYS_XOSC_Config+0x1e>
     676:	20 e2       	ldi	r18, 0x20	; 32
     678:	01 c0       	rjmp	.+2      	; 0x67c <CLKSYS_XOSC_Config+0x20>
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	39 81       	ldd	r19, Y+1	; 0x01
     67e:	32 2b       	or	r19, r18
     680:	2b 81       	ldd	r18, Y+3	; 0x03
     682:	23 2b       	or	r18, r19
     684:	fc 01       	movw	r30, r24
     686:	22 83       	std	Z+2, r18	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     688:	00 00       	nop
     68a:	23 96       	adiw	r28, 0x03	; 3
     68c:	cd bf       	out	0x3d, r28	; 61
     68e:	de bf       	out	0x3e, r29	; 62
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <CLKSYS_PLL_Config>:
 *                      must be above 0.4MHz.
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	1f 92       	push	r1
     69c:	1f 92       	push	r1
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	89 83       	std	Y+1, r24	; 0x01
     6a4:	6a 83       	std	Y+2, r22	; 0x02
	factor &= OSC_PLLFAC_gm;
     6a6:	8a 81       	ldd	r24, Y+2	; 0x02
     6a8:	8f 71       	andi	r24, 0x1F	; 31
     6aa:	8a 83       	std	Y+2, r24	; 0x02
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     6ac:	80 e5       	ldi	r24, 0x50	; 80
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	39 81       	ldd	r19, Y+1	; 0x01
     6b2:	2a 81       	ldd	r18, Y+2	; 0x02
     6b4:	23 2b       	or	r18, r19
     6b6:	fc 01       	movw	r30, r24
     6b8:	25 83       	std	Z+5, r18	; 0x05
}
     6ba:	00 00       	nop
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <CLKSYS_Disable>:
 *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	1f 92       	push	r1
     6cc:	1f 92       	push	r1
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	8a 83       	std	Y+2, r24	; 0x02
	OSC.CTRL &= ~oscSel;
     6d4:	80 e5       	ldi	r24, 0x50	; 80
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	20 e5       	ldi	r18, 0x50	; 80
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	32 2f       	mov	r19, r18
     6e2:	2a 81       	ldd	r18, Y+2	; 0x02
     6e4:	20 95       	com	r18
     6e6:	23 23       	and	r18, r19
     6e8:	fc 01       	movw	r30, r24
     6ea:	20 83       	st	Z, r18
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     6ec:	80 e5       	ldi	r24, 0x50	; 80
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	fc 01       	movw	r30, r24
     6f2:	90 81       	ld	r25, Z
     6f4:	8a 81       	ldd	r24, Y+2	; 0x02
     6f6:	89 23       	and	r24, r25
     6f8:	89 83       	std	Y+1, r24	; 0x01
	return clkEnabled;
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	00 d0       	rcall	.+0      	; 0x70c <CLKSYS_Prescalers_Config+0x6>
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	8a 83       	std	Y+2, r24	; 0x02
     712:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     714:	9a 81       	ldd	r25, Y+2	; 0x02
     716:	8b 81       	ldd	r24, Y+3	; 0x03
     718:	89 2b       	or	r24, r25
     71a:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
     71c:	69 81       	ldd	r22, Y+1	; 0x01
     71e:	81 e4       	ldi	r24, 0x41	; 65
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 02 03 	call	0x604	; 0x604 <CCPWrite>
}
     726:	00 00       	nop
     728:	23 96       	adiw	r28, 0x03	; 3
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	1f 92       	push	r1
     73a:	1f 92       	push	r1
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     742:	80 e4       	ldi	r24, 0x40	; 64
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	fc 01       	movw	r30, r24
     748:	80 81       	ld	r24, Z
     74a:	98 2f       	mov	r25, r24
     74c:	98 7f       	andi	r25, 0xF8	; 248
     74e:	8a 81       	ldd	r24, Y+2	; 0x02
     750:	89 2b       	or	r24, r25
     752:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
     754:	69 81       	ldd	r22, Y+1	; 0x01
     756:	80 e4       	ldi	r24, 0x40	; 64
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 02 03 	call	0x604	; 0x604 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     75e:	80 e4       	ldi	r24, 0x40	; 64
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	fc 01       	movw	r30, r24
     764:	90 81       	ld	r25, Z
     766:	8a 81       	ldd	r24, Y+2	; 0x02
     768:	89 23       	and	r24, r25
     76a:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
     76c:	89 81       	ldd	r24, Y+1	; 0x01
}
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <TC0_ConfigClockSource>:
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
}
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	00 d0       	rcall	.+0      	; 0x77e <TC0_ConfigClockSource+0x6>
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	89 83       	std	Y+1, r24	; 0x01
     784:	9a 83       	std	Y+2, r25	; 0x02
     786:	6b 83       	std	Y+3, r22	; 0x03
     788:	89 81       	ldd	r24, Y+1	; 0x01
     78a:	9a 81       	ldd	r25, Y+2	; 0x02
     78c:	fc 01       	movw	r30, r24
     78e:	80 81       	ld	r24, Z
     790:	98 2f       	mov	r25, r24
     792:	90 7f       	andi	r25, 0xF0	; 240
     794:	8b 81       	ldd	r24, Y+3	; 0x03
     796:	89 2b       	or	r24, r25
     798:	28 2f       	mov	r18, r24
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
     7a2:	00 00       	nop
     7a4:	23 96       	adiw	r28, 0x03	; 3
     7a6:	cd bf       	out	0x3d, r28	; 61
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <TC0_ConfigWGM>:
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <TC0_ConfigWGM+0x6>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	9a 83       	std	Y+2, r25	; 0x02
     7be:	6b 83       	std	Y+3, r22	; 0x03
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	9a 81       	ldd	r25, Y+2	; 0x02
     7c4:	fc 01       	movw	r30, r24
     7c6:	81 81       	ldd	r24, Z+1	; 0x01
     7c8:	98 2f       	mov	r25, r24
     7ca:	98 7f       	andi	r25, 0xF8	; 248
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	89 2b       	or	r24, r25
     7d0:	28 2f       	mov	r18, r24
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	9a 81       	ldd	r25, Y+2	; 0x02
     7d6:	fc 01       	movw	r30, r24
     7d8:	21 83       	std	Z+1, r18	; 0x01
     7da:	00 00       	nop
     7dc:	23 96       	adiw	r28, 0x03	; 3
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <TC0_SetOverflowIntLevel+0x6>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	89 83       	std	Y+1, r24	; 0x01
     7f4:	9a 83       	std	Y+2, r25	; 0x02
     7f6:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
     7fc:	fc 01       	movw	r30, r24
     7fe:	86 81       	ldd	r24, Z+6	; 0x06
     800:	98 2f       	mov	r25, r24
     802:	9c 7f       	andi	r25, 0xFC	; 252
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	89 2b       	or	r24, r25
     808:	28 2f       	mov	r18, r24
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	fc 01       	movw	r30, r24
     810:	26 83       	std	Z+6, r18	; 0x06
}
     812:	00 00       	nop
     814:	23 96       	adiw	r28, 0x03	; 3
     816:	cd bf       	out	0x3d, r28	; 61
     818:	de bf       	out	0x3e, r29	; 62
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <vApplicationStackOverflowHook>:
 {
	 (void)errCode;

	 uint8_t a=42; (void)a;

 }
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	00 d0       	rcall	.+0      	; 0x826 <vApplicationStackOverflowHook+0x6>
     826:	1f 92       	push	r1
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	89 83       	std	Y+1, r24	; 0x01
     82e:	9a 83       	std	Y+2, r25	; 0x02
     830:	6b 83       	std	Y+3, r22	; 0x03
     832:	7c 83       	std	Y+4, r23	; 0x04
     834:	8b e2       	ldi	r24, 0x2B	; 43
     836:	0e 94 24 04 	call	0x848	; 0x848 <error>
     83a:	00 00       	nop
     83c:	24 96       	adiw	r28, 0x04	; 4
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	de bf       	out	0x3e, r29	; 62
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	08 95       	ret

00000848 <error>:

 //----------------------------------------------
 //
 void error(uint8_t errCode)
 {
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	1f 92       	push	r1
     84e:	1f 92       	push	r1
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	8a 83       	std	Y+2, r24	; 0x02
	 uint8_t a;

	 if(errCode==ERR_STACK_OVERFLOW)
     856:	8a 81       	ldd	r24, Y+2	; 0x02
     858:	8b 32       	cpi	r24, 0x2B	; 43
     85a:	19 f4       	brne	.+6      	; 0x862 <error+0x1a>
	 a = 1;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	89 83       	std	Y+1, r24	; 0x01
     860:	0e c0       	rjmp	.+28     	; 0x87e <error+0x36>
	 else if(errCode==ERR_QUEUE_SEND_FAILED)
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	8c 32       	cpi	r24, 0x2C	; 44
     866:	19 f4       	brne	.+6      	; 0x86e <error+0x26>
	 a = 2;
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	89 83       	std	Y+1, r24	; 0x01
     86c:	08 c0       	rjmp	.+16     	; 0x87e <error+0x36>
	 else if(errCode==ERR_BYTES_SHOULD_BE_AVAILABLE)
     86e:	8a 81       	ldd	r24, Y+2	; 0x02
     870:	8f 32       	cpi	r24, 0x2F	; 47
     872:	19 f4       	brne	.+6      	; 0x87a <error+0x32>
	 a = 3;
     874:	83 e0       	ldi	r24, 0x03	; 3
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	02 c0       	rjmp	.+4      	; 0x87e <error+0x36>
	 else
	 a = 4;
     87a:	84 e0       	ldi	r24, 0x04	; 4
     87c:	89 83       	std	Y+1, r24	; 0x01
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     87e:	0e 94 47 04 	call	0x88e	; 0x88e <software_reset>
 }
     882:	00 00       	nop
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <software_reset>:

 //----------------------------------------------
 //
 void software_reset(void)
 {	 
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
	 asm("nop");
     896:	00 00       	nop
	 CPU_CCP  = CCP_IOREG_gc;
     898:	84 e3       	ldi	r24, 0x34	; 52
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	28 ed       	ldi	r18, 0xD8	; 216
     89e:	fc 01       	movw	r30, r24
     8a0:	20 83       	st	Z, r18
	 RST.CTRL = RST_SWRST_bm ;	 
     8a2:	88 e7       	ldi	r24, 0x78	; 120
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	21 e0       	ldi	r18, 0x01	; 1
     8a8:	fc 01       	movw	r30, r24
     8aa:	21 83       	std	Z+1, r18	; 0x01
     8ac:	00 00       	nop
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	1f 92       	push	r1
     8ba:	1f 92       	push	r1
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	80 e1       	ldi	r24, 0x10	; 16
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 97 07 	call	0xf2e	; 0xf2e <pvPortMalloc>
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	9a 83       	std	Y+2, r25	; 0x02
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	9a 81       	ldd	r25, Y+2	; 0x02
     8d0:	89 2b       	or	r24, r25
     8d2:	61 f0       	breq	.+24     	; 0x8ec <xEventGroupCreate+0x38>
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	9a 81       	ldd	r25, Y+2	; 0x02
     8d8:	fc 01       	movw	r30, r24
     8da:	10 82       	st	Z, r1
     8dc:	11 82       	std	Z+1, r1	; 0x01
     8de:	12 82       	std	Z+2, r1	; 0x02
     8e0:	13 82       	std	Z+3, r1	; 0x03
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	9a 81       	ldd	r25, Y+2	; 0x02
     8e6:	04 96       	adiw	r24, 0x04	; 4
     8e8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <xEventGroupWaitBits>:
     8fa:	cf 92       	push	r12
     8fc:	df 92       	push	r13
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
     90e:	6d 97       	sbiw	r28, 0x1d	; 29
     910:	cd bf       	out	0x3d, r28	; 61
     912:	de bf       	out	0x3e, r29	; 62
     914:	8a 8b       	std	Y+18, r24	; 0x12
     916:	9b 8b       	std	Y+19, r25	; 0x13
     918:	4c 8b       	std	Y+20, r20	; 0x14
     91a:	5d 8b       	std	Y+21, r21	; 0x15
     91c:	6e 8b       	std	Y+22, r22	; 0x16
     91e:	7f 8b       	std	Y+23, r23	; 0x17
     920:	28 8f       	std	Y+24, r18	; 0x18
     922:	09 8f       	std	Y+25, r16	; 0x19
     924:	ca 8e       	std	Y+26, r12	; 0x1a
     926:	db 8e       	std	Y+27, r13	; 0x1b
     928:	ec 8e       	std	Y+28, r14	; 0x1c
     92a:	fd 8e       	std	Y+29, r15	; 0x1d
     92c:	8a 89       	ldd	r24, Y+18	; 0x12
     92e:	9b 89       	ldd	r25, Y+19	; 0x13
     930:	89 87       	std	Y+9, r24	; 0x09
     932:	9a 87       	std	Y+10, r25	; 0x0a
     934:	1d 82       	std	Y+5, r1	; 0x05
     936:	1e 82       	std	Y+6, r1	; 0x06
     938:	1f 82       	std	Y+7, r1	; 0x07
     93a:	18 86       	std	Y+8, r1	; 0x08
     93c:	1b 86       	std	Y+11, r1	; 0x0b
     93e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <vTaskSuspendAll>
     942:	89 85       	ldd	r24, Y+9	; 0x09
     944:	9a 85       	ldd	r25, Y+10	; 0x0a
     946:	fc 01       	movw	r30, r24
     948:	80 81       	ld	r24, Z
     94a:	91 81       	ldd	r25, Z+1	; 0x01
     94c:	a2 81       	ldd	r26, Z+2	; 0x02
     94e:	b3 81       	ldd	r27, Z+3	; 0x03
     950:	8c 87       	std	Y+12, r24	; 0x0c
     952:	9d 87       	std	Y+13, r25	; 0x0d
     954:	ae 87       	std	Y+14, r26	; 0x0e
     956:	bf 87       	std	Y+15, r27	; 0x0f
     958:	2c 89       	ldd	r18, Y+20	; 0x14
     95a:	3d 89       	ldd	r19, Y+21	; 0x15
     95c:	4e 89       	ldd	r20, Y+22	; 0x16
     95e:	5f 89       	ldd	r21, Y+23	; 0x17
     960:	8c 85       	ldd	r24, Y+12	; 0x0c
     962:	9d 85       	ldd	r25, Y+13	; 0x0d
     964:	ae 85       	ldd	r26, Y+14	; 0x0e
     966:	bf 85       	ldd	r27, Y+15	; 0x0f
     968:	09 8d       	ldd	r16, Y+25	; 0x19
     96a:	bc 01       	movw	r22, r24
     96c:	cd 01       	movw	r24, r26
     96e:	0e 94 26 07 	call	0xe4c	; 0xe4c <prvTestWaitCondition>
     972:	88 8b       	std	Y+16, r24	; 0x10
     974:	88 89       	ldd	r24, Y+16	; 0x10
     976:	88 23       	and	r24, r24
     978:	59 f1       	breq	.+86     	; 0x9d0 <xEventGroupWaitBits+0xd6>
     97a:	8c 85       	ldd	r24, Y+12	; 0x0c
     97c:	9d 85       	ldd	r25, Y+13	; 0x0d
     97e:	ae 85       	ldd	r26, Y+14	; 0x0e
     980:	bf 85       	ldd	r27, Y+15	; 0x0f
     982:	89 83       	std	Y+1, r24	; 0x01
     984:	9a 83       	std	Y+2, r25	; 0x02
     986:	ab 83       	std	Y+3, r26	; 0x03
     988:	bc 83       	std	Y+4, r27	; 0x04
     98a:	1a 8e       	std	Y+26, r1	; 0x1a
     98c:	1b 8e       	std	Y+27, r1	; 0x1b
     98e:	1c 8e       	std	Y+28, r1	; 0x1c
     990:	1d 8e       	std	Y+29, r1	; 0x1d
     992:	88 8d       	ldd	r24, Y+24	; 0x18
     994:	88 23       	and	r24, r24
     996:	09 f4       	brne	.+2      	; 0x99a <xEventGroupWaitBits+0xa0>
     998:	65 c0       	rjmp	.+202    	; 0xa64 <xEventGroupWaitBits+0x16a>
     99a:	89 85       	ldd	r24, Y+9	; 0x09
     99c:	9a 85       	ldd	r25, Y+10	; 0x0a
     99e:	fc 01       	movw	r30, r24
     9a0:	20 81       	ld	r18, Z
     9a2:	31 81       	ldd	r19, Z+1	; 0x01
     9a4:	42 81       	ldd	r20, Z+2	; 0x02
     9a6:	53 81       	ldd	r21, Z+3	; 0x03
     9a8:	8c 89       	ldd	r24, Y+20	; 0x14
     9aa:	9d 89       	ldd	r25, Y+21	; 0x15
     9ac:	ae 89       	ldd	r26, Y+22	; 0x16
     9ae:	bf 89       	ldd	r27, Y+23	; 0x17
     9b0:	80 95       	com	r24
     9b2:	90 95       	com	r25
     9b4:	a0 95       	com	r26
     9b6:	b0 95       	com	r27
     9b8:	82 23       	and	r24, r18
     9ba:	93 23       	and	r25, r19
     9bc:	a4 23       	and	r26, r20
     9be:	b5 23       	and	r27, r21
     9c0:	29 85       	ldd	r18, Y+9	; 0x09
     9c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c4:	f9 01       	movw	r30, r18
     9c6:	80 83       	st	Z, r24
     9c8:	91 83       	std	Z+1, r25	; 0x01
     9ca:	a2 83       	std	Z+2, r26	; 0x02
     9cc:	b3 83       	std	Z+3, r27	; 0x03
     9ce:	4a c0       	rjmp	.+148    	; 0xa64 <xEventGroupWaitBits+0x16a>
     9d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9d4:	ac 8d       	ldd	r26, Y+28	; 0x1c
     9d6:	bd 8d       	ldd	r27, Y+29	; 0x1d
     9d8:	89 2b       	or	r24, r25
     9da:	8a 2b       	or	r24, r26
     9dc:	8b 2b       	or	r24, r27
     9de:	59 f4       	brne	.+22     	; 0x9f6 <xEventGroupWaitBits+0xfc>
     9e0:	8c 85       	ldd	r24, Y+12	; 0x0c
     9e2:	9d 85       	ldd	r25, Y+13	; 0x0d
     9e4:	ae 85       	ldd	r26, Y+14	; 0x0e
     9e6:	bf 85       	ldd	r27, Y+15	; 0x0f
     9e8:	89 83       	std	Y+1, r24	; 0x01
     9ea:	9a 83       	std	Y+2, r25	; 0x02
     9ec:	ab 83       	std	Y+3, r26	; 0x03
     9ee:	bc 83       	std	Y+4, r27	; 0x04
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	8b 87       	std	Y+11, r24	; 0x0b
     9f4:	37 c0       	rjmp	.+110    	; 0xa64 <xEventGroupWaitBits+0x16a>
     9f6:	88 8d       	ldd	r24, Y+24	; 0x18
     9f8:	88 23       	and	r24, r24
     9fa:	49 f0       	breq	.+18     	; 0xa0e <xEventGroupWaitBits+0x114>
     9fc:	8d 81       	ldd	r24, Y+5	; 0x05
     9fe:	9e 81       	ldd	r25, Y+6	; 0x06
     a00:	af 81       	ldd	r26, Y+7	; 0x07
     a02:	b8 85       	ldd	r27, Y+8	; 0x08
     a04:	b1 60       	ori	r27, 0x01	; 1
     a06:	8d 83       	std	Y+5, r24	; 0x05
     a08:	9e 83       	std	Y+6, r25	; 0x06
     a0a:	af 83       	std	Y+7, r26	; 0x07
     a0c:	b8 87       	std	Y+8, r27	; 0x08
     a0e:	89 8d       	ldd	r24, Y+25	; 0x19
     a10:	88 23       	and	r24, r24
     a12:	49 f0       	breq	.+18     	; 0xa26 <xEventGroupWaitBits+0x12c>
     a14:	8d 81       	ldd	r24, Y+5	; 0x05
     a16:	9e 81       	ldd	r25, Y+6	; 0x06
     a18:	af 81       	ldd	r26, Y+7	; 0x07
     a1a:	b8 85       	ldd	r27, Y+8	; 0x08
     a1c:	b4 60       	ori	r27, 0x04	; 4
     a1e:	8d 83       	std	Y+5, r24	; 0x05
     a20:	9e 83       	std	Y+6, r25	; 0x06
     a22:	af 83       	std	Y+7, r26	; 0x07
     a24:	b8 87       	std	Y+8, r27	; 0x08
     a26:	2c 89       	ldd	r18, Y+20	; 0x14
     a28:	3d 89       	ldd	r19, Y+21	; 0x15
     a2a:	4e 89       	ldd	r20, Y+22	; 0x16
     a2c:	5f 89       	ldd	r21, Y+23	; 0x17
     a2e:	8d 81       	ldd	r24, Y+5	; 0x05
     a30:	9e 81       	ldd	r25, Y+6	; 0x06
     a32:	af 81       	ldd	r26, Y+7	; 0x07
     a34:	b8 85       	ldd	r27, Y+8	; 0x08
     a36:	82 2b       	or	r24, r18
     a38:	93 2b       	or	r25, r19
     a3a:	a4 2b       	or	r26, r20
     a3c:	b5 2b       	or	r27, r21
     a3e:	29 85       	ldd	r18, Y+9	; 0x09
     a40:	3a 85       	ldd	r19, Y+10	; 0x0a
     a42:	f9 01       	movw	r30, r18
     a44:	34 96       	adiw	r30, 0x04	; 4
     a46:	2a 8d       	ldd	r18, Y+26	; 0x1a
     a48:	3b 8d       	ldd	r19, Y+27	; 0x1b
     a4a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     a4c:	5d 8d       	ldd	r21, Y+29	; 0x1d
     a4e:	89 01       	movw	r16, r18
     a50:	9a 01       	movw	r18, r20
     a52:	ac 01       	movw	r20, r24
     a54:	bd 01       	movw	r22, r26
     a56:	cf 01       	movw	r24, r30
     a58:	0e 94 11 18 	call	0x3022	; 0x3022 <vTaskPlaceOnUnorderedEventList>
     a5c:	19 82       	std	Y+1, r1	; 0x01
     a5e:	1a 82       	std	Y+2, r1	; 0x02
     a60:	1b 82       	std	Y+3, r1	; 0x03
     a62:	1c 82       	std	Y+4, r1	; 0x04
     a64:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskResumeAll>
     a68:	89 8b       	std	Y+17, r24	; 0x11
     a6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a6e:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a70:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a72:	89 2b       	or	r24, r25
     a74:	8a 2b       	or	r24, r26
     a76:	8b 2b       	or	r24, r27
     a78:	09 f4       	brne	.+2      	; 0xa7c <xEventGroupWaitBits+0x182>
     a7a:	65 c0       	rjmp	.+202    	; 0xb46 <xEventGroupWaitBits+0x24c>
     a7c:	89 89       	ldd	r24, Y+17	; 0x11
     a7e:	88 23       	and	r24, r24
     a80:	11 f4       	brne	.+4      	; 0xa86 <xEventGroupWaitBits+0x18c>
     a82:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
     a86:	0e 94 cf 1a 	call	0x359e	; 0x359e <uxTaskResetEventItemValue>
     a8a:	dc 01       	movw	r26, r24
     a8c:	cb 01       	movw	r24, r22
     a8e:	89 83       	std	Y+1, r24	; 0x01
     a90:	9a 83       	std	Y+2, r25	; 0x02
     a92:	ab 83       	std	Y+3, r26	; 0x03
     a94:	bc 83       	std	Y+4, r27	; 0x04
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	9a 81       	ldd	r25, Y+2	; 0x02
     a9a:	ab 81       	ldd	r26, Y+3	; 0x03
     a9c:	bc 81       	ldd	r27, Y+4	; 0x04
     a9e:	88 27       	eor	r24, r24
     aa0:	99 27       	eor	r25, r25
     aa2:	aa 27       	eor	r26, r26
     aa4:	b2 70       	andi	r27, 0x02	; 2
     aa6:	89 2b       	or	r24, r25
     aa8:	8a 2b       	or	r24, r26
     aaa:	8b 2b       	or	r24, r27
     aac:	09 f0       	breq	.+2      	; 0xab0 <xEventGroupWaitBits+0x1b6>
     aae:	42 c0       	rjmp	.+132    	; 0xb34 <xEventGroupWaitBits+0x23a>
     ab0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ab4:	ff 93       	push	r31
     ab6:	f8 7f       	andi	r31, 0xF8	; 248
     ab8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     abc:	89 85       	ldd	r24, Y+9	; 0x09
     abe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ac0:	fc 01       	movw	r30, r24
     ac2:	80 81       	ld	r24, Z
     ac4:	91 81       	ldd	r25, Z+1	; 0x01
     ac6:	a2 81       	ldd	r26, Z+2	; 0x02
     ac8:	b3 81       	ldd	r27, Z+3	; 0x03
     aca:	89 83       	std	Y+1, r24	; 0x01
     acc:	9a 83       	std	Y+2, r25	; 0x02
     ace:	ab 83       	std	Y+3, r26	; 0x03
     ad0:	bc 83       	std	Y+4, r27	; 0x04
     ad2:	2c 89       	ldd	r18, Y+20	; 0x14
     ad4:	3d 89       	ldd	r19, Y+21	; 0x15
     ad6:	4e 89       	ldd	r20, Y+22	; 0x16
     ad8:	5f 89       	ldd	r21, Y+23	; 0x17
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	9a 81       	ldd	r25, Y+2	; 0x02
     ade:	ab 81       	ldd	r26, Y+3	; 0x03
     ae0:	bc 81       	ldd	r27, Y+4	; 0x04
     ae2:	09 8d       	ldd	r16, Y+25	; 0x19
     ae4:	bc 01       	movw	r22, r24
     ae6:	cd 01       	movw	r24, r26
     ae8:	0e 94 26 07 	call	0xe4c	; 0xe4c <prvTestWaitCondition>
     aec:	88 23       	and	r24, r24
     aee:	e9 f0       	breq	.+58     	; 0xb2a <xEventGroupWaitBits+0x230>
     af0:	88 8d       	ldd	r24, Y+24	; 0x18
     af2:	88 23       	and	r24, r24
     af4:	d1 f0       	breq	.+52     	; 0xb2a <xEventGroupWaitBits+0x230>
     af6:	89 85       	ldd	r24, Y+9	; 0x09
     af8:	9a 85       	ldd	r25, Y+10	; 0x0a
     afa:	fc 01       	movw	r30, r24
     afc:	20 81       	ld	r18, Z
     afe:	31 81       	ldd	r19, Z+1	; 0x01
     b00:	42 81       	ldd	r20, Z+2	; 0x02
     b02:	53 81       	ldd	r21, Z+3	; 0x03
     b04:	8c 89       	ldd	r24, Y+20	; 0x14
     b06:	9d 89       	ldd	r25, Y+21	; 0x15
     b08:	ae 89       	ldd	r26, Y+22	; 0x16
     b0a:	bf 89       	ldd	r27, Y+23	; 0x17
     b0c:	80 95       	com	r24
     b0e:	90 95       	com	r25
     b10:	a0 95       	com	r26
     b12:	b0 95       	com	r27
     b14:	82 23       	and	r24, r18
     b16:	93 23       	and	r25, r19
     b18:	a4 23       	and	r26, r20
     b1a:	b5 23       	and	r27, r21
     b1c:	29 85       	ldd	r18, Y+9	; 0x09
     b1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     b20:	f9 01       	movw	r30, r18
     b22:	80 83       	st	Z, r24
     b24:	91 83       	std	Z+1, r25	; 0x01
     b26:	a2 83       	std	Z+2, r26	; 0x02
     b28:	b3 83       	std	Z+3, r27	; 0x03
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	8b 87       	std	Y+11, r24	; 0x0b
     b2e:	ff 91       	pop	r31
     b30:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	9a 81       	ldd	r25, Y+2	; 0x02
     b38:	ab 81       	ldd	r26, Y+3	; 0x03
     b3a:	bc 81       	ldd	r27, Y+4	; 0x04
     b3c:	bb 27       	eor	r27, r27
     b3e:	89 83       	std	Y+1, r24	; 0x01
     b40:	9a 83       	std	Y+2, r25	; 0x02
     b42:	ab 83       	std	Y+3, r26	; 0x03
     b44:	bc 83       	std	Y+4, r27	; 0x04
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	ab 81       	ldd	r26, Y+3	; 0x03
     b4c:	bc 81       	ldd	r27, Y+4	; 0x04
     b4e:	bc 01       	movw	r22, r24
     b50:	cd 01       	movw	r24, r26
     b52:	6d 96       	adiw	r28, 0x1d	; 29
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	df 90       	pop	r13
     b66:	cf 90       	pop	r12
     b68:	08 95       	ret

00000b6a <xEventGroupClearBits>:
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	2c 97       	sbiw	r28, 0x0c	; 12
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	8f 83       	std	Y+7, r24	; 0x07
     b7a:	98 87       	std	Y+8, r25	; 0x08
     b7c:	49 87       	std	Y+9, r20	; 0x09
     b7e:	5a 87       	std	Y+10, r21	; 0x0a
     b80:	6b 87       	std	Y+11, r22	; 0x0b
     b82:	7c 87       	std	Y+12, r23	; 0x0c
     b84:	8f 81       	ldd	r24, Y+7	; 0x07
     b86:	98 85       	ldd	r25, Y+8	; 0x08
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	9a 83       	std	Y+2, r25	; 0x02
     b8c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b90:	ff 93       	push	r31
     b92:	f8 7f       	andi	r31, 0xF8	; 248
     b94:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	9a 81       	ldd	r25, Y+2	; 0x02
     b9c:	fc 01       	movw	r30, r24
     b9e:	80 81       	ld	r24, Z
     ba0:	91 81       	ldd	r25, Z+1	; 0x01
     ba2:	a2 81       	ldd	r26, Z+2	; 0x02
     ba4:	b3 81       	ldd	r27, Z+3	; 0x03
     ba6:	8b 83       	std	Y+3, r24	; 0x03
     ba8:	9c 83       	std	Y+4, r25	; 0x04
     baa:	ad 83       	std	Y+5, r26	; 0x05
     bac:	be 83       	std	Y+6, r27	; 0x06
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	9a 81       	ldd	r25, Y+2	; 0x02
     bb2:	fc 01       	movw	r30, r24
     bb4:	20 81       	ld	r18, Z
     bb6:	31 81       	ldd	r19, Z+1	; 0x01
     bb8:	42 81       	ldd	r20, Z+2	; 0x02
     bba:	53 81       	ldd	r21, Z+3	; 0x03
     bbc:	89 85       	ldd	r24, Y+9	; 0x09
     bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc0:	ab 85       	ldd	r26, Y+11	; 0x0b
     bc2:	bc 85       	ldd	r27, Y+12	; 0x0c
     bc4:	80 95       	com	r24
     bc6:	90 95       	com	r25
     bc8:	a0 95       	com	r26
     bca:	b0 95       	com	r27
     bcc:	82 23       	and	r24, r18
     bce:	93 23       	and	r25, r19
     bd0:	a4 23       	and	r26, r20
     bd2:	b5 23       	and	r27, r21
     bd4:	29 81       	ldd	r18, Y+1	; 0x01
     bd6:	3a 81       	ldd	r19, Y+2	; 0x02
     bd8:	f9 01       	movw	r30, r18
     bda:	80 83       	st	Z, r24
     bdc:	91 83       	std	Z+1, r25	; 0x01
     bde:	a2 83       	std	Z+2, r26	; 0x02
     be0:	b3 83       	std	Z+3, r27	; 0x03
     be2:	ff 91       	pop	r31
     be4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	ad 81       	ldd	r26, Y+5	; 0x05
     bee:	be 81       	ldd	r27, Y+6	; 0x06
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	2c 96       	adiw	r28, 0x0c	; 12
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <xEventGroupSetBits>:
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	6d 97       	sbiw	r28, 0x1d	; 29
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	88 8f       	std	Y+24, r24	; 0x18
     c10:	99 8f       	std	Y+25, r25	; 0x19
     c12:	4a 8f       	std	Y+26, r20	; 0x1a
     c14:	5b 8f       	std	Y+27, r21	; 0x1b
     c16:	6c 8f       	std	Y+28, r22	; 0x1c
     c18:	7d 8f       	std	Y+29, r23	; 0x1d
     c1a:	1b 82       	std	Y+3, r1	; 0x03
     c1c:	1c 82       	std	Y+4, r1	; 0x04
     c1e:	1d 82       	std	Y+5, r1	; 0x05
     c20:	1e 82       	std	Y+6, r1	; 0x06
     c22:	88 8d       	ldd	r24, Y+24	; 0x18
     c24:	99 8d       	ldd	r25, Y+25	; 0x19
     c26:	88 87       	std	Y+8, r24	; 0x08
     c28:	99 87       	std	Y+9, r25	; 0x09
     c2a:	1f 82       	std	Y+7, r1	; 0x07
     c2c:	88 85       	ldd	r24, Y+8	; 0x08
     c2e:	99 85       	ldd	r25, Y+9	; 0x09
     c30:	04 96       	adiw	r24, 0x04	; 4
     c32:	8a 87       	std	Y+10, r24	; 0x0a
     c34:	9b 87       	std	Y+11, r25	; 0x0b
     c36:	8a 85       	ldd	r24, Y+10	; 0x0a
     c38:	9b 85       	ldd	r25, Y+11	; 0x0b
     c3a:	03 96       	adiw	r24, 0x03	; 3
     c3c:	8c 87       	std	Y+12, r24	; 0x0c
     c3e:	9d 87       	std	Y+13, r25	; 0x0d
     c40:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <vTaskSuspendAll>
     c44:	8a 85       	ldd	r24, Y+10	; 0x0a
     c46:	9b 85       	ldd	r25, Y+11	; 0x0b
     c48:	fc 01       	movw	r30, r24
     c4a:	87 81       	ldd	r24, Z+7	; 0x07
     c4c:	90 85       	ldd	r25, Z+8	; 0x08
     c4e:	89 83       	std	Y+1, r24	; 0x01
     c50:	9a 83       	std	Y+2, r25	; 0x02
     c52:	88 85       	ldd	r24, Y+8	; 0x08
     c54:	99 85       	ldd	r25, Y+9	; 0x09
     c56:	fc 01       	movw	r30, r24
     c58:	20 81       	ld	r18, Z
     c5a:	31 81       	ldd	r19, Z+1	; 0x01
     c5c:	42 81       	ldd	r20, Z+2	; 0x02
     c5e:	53 81       	ldd	r21, Z+3	; 0x03
     c60:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c62:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c64:	ac 8d       	ldd	r26, Y+28	; 0x1c
     c66:	bd 8d       	ldd	r27, Y+29	; 0x1d
     c68:	82 2b       	or	r24, r18
     c6a:	93 2b       	or	r25, r19
     c6c:	a4 2b       	or	r26, r20
     c6e:	b5 2b       	or	r27, r21
     c70:	28 85       	ldd	r18, Y+8	; 0x08
     c72:	39 85       	ldd	r19, Y+9	; 0x09
     c74:	f9 01       	movw	r30, r18
     c76:	80 83       	st	Z, r24
     c78:	91 83       	std	Z+1, r25	; 0x01
     c7a:	a2 83       	std	Z+2, r26	; 0x02
     c7c:	b3 83       	std	Z+3, r27	; 0x03
     c7e:	95 c0       	rjmp	.+298    	; 0xdaa <xEventGroupSetBits+0x1aa>
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	fc 01       	movw	r30, r24
     c86:	84 81       	ldd	r24, Z+4	; 0x04
     c88:	95 81       	ldd	r25, Z+5	; 0x05
     c8a:	8e 87       	std	Y+14, r24	; 0x0e
     c8c:	9f 87       	std	Y+15, r25	; 0x0f
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	fc 01       	movw	r30, r24
     c94:	80 81       	ld	r24, Z
     c96:	91 81       	ldd	r25, Z+1	; 0x01
     c98:	a2 81       	ldd	r26, Z+2	; 0x02
     c9a:	b3 81       	ldd	r27, Z+3	; 0x03
     c9c:	88 8b       	std	Y+16, r24	; 0x10
     c9e:	99 8b       	std	Y+17, r25	; 0x11
     ca0:	aa 8b       	std	Y+18, r26	; 0x12
     ca2:	bb 8b       	std	Y+19, r27	; 0x13
     ca4:	1f 82       	std	Y+7, r1	; 0x07
     ca6:	88 89       	ldd	r24, Y+16	; 0x10
     ca8:	99 89       	ldd	r25, Y+17	; 0x11
     caa:	aa 89       	ldd	r26, Y+18	; 0x12
     cac:	bb 89       	ldd	r27, Y+19	; 0x13
     cae:	88 27       	eor	r24, r24
     cb0:	99 27       	eor	r25, r25
     cb2:	aa 27       	eor	r26, r26
     cb4:	8c 8b       	std	Y+20, r24	; 0x14
     cb6:	9d 8b       	std	Y+21, r25	; 0x15
     cb8:	ae 8b       	std	Y+22, r26	; 0x16
     cba:	bf 8b       	std	Y+23, r27	; 0x17
     cbc:	88 89       	ldd	r24, Y+16	; 0x10
     cbe:	99 89       	ldd	r25, Y+17	; 0x11
     cc0:	aa 89       	ldd	r26, Y+18	; 0x12
     cc2:	bb 89       	ldd	r27, Y+19	; 0x13
     cc4:	bb 27       	eor	r27, r27
     cc6:	88 8b       	std	Y+16, r24	; 0x10
     cc8:	99 8b       	std	Y+17, r25	; 0x11
     cca:	aa 8b       	std	Y+18, r26	; 0x12
     ccc:	bb 8b       	std	Y+19, r27	; 0x13
     cce:	8c 89       	ldd	r24, Y+20	; 0x14
     cd0:	9d 89       	ldd	r25, Y+21	; 0x15
     cd2:	ae 89       	ldd	r26, Y+22	; 0x16
     cd4:	bf 89       	ldd	r27, Y+23	; 0x17
     cd6:	88 27       	eor	r24, r24
     cd8:	99 27       	eor	r25, r25
     cda:	aa 27       	eor	r26, r26
     cdc:	b4 70       	andi	r27, 0x04	; 4
     cde:	89 2b       	or	r24, r25
     ce0:	8a 2b       	or	r24, r26
     ce2:	8b 2b       	or	r24, r27
     ce4:	b1 f4       	brne	.+44     	; 0xd12 <xEventGroupSetBits+0x112>
     ce6:	88 85       	ldd	r24, Y+8	; 0x08
     ce8:	99 85       	ldd	r25, Y+9	; 0x09
     cea:	fc 01       	movw	r30, r24
     cec:	20 81       	ld	r18, Z
     cee:	31 81       	ldd	r19, Z+1	; 0x01
     cf0:	42 81       	ldd	r20, Z+2	; 0x02
     cf2:	53 81       	ldd	r21, Z+3	; 0x03
     cf4:	88 89       	ldd	r24, Y+16	; 0x10
     cf6:	99 89       	ldd	r25, Y+17	; 0x11
     cf8:	aa 89       	ldd	r26, Y+18	; 0x12
     cfa:	bb 89       	ldd	r27, Y+19	; 0x13
     cfc:	82 23       	and	r24, r18
     cfe:	93 23       	and	r25, r19
     d00:	a4 23       	and	r26, r20
     d02:	b5 23       	and	r27, r21
     d04:	89 2b       	or	r24, r25
     d06:	8a 2b       	or	r24, r26
     d08:	8b 2b       	or	r24, r27
     d0a:	e9 f0       	breq	.+58     	; 0xd46 <xEventGroupSetBits+0x146>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	8f 83       	std	Y+7, r24	; 0x07
     d10:	1a c0       	rjmp	.+52     	; 0xd46 <xEventGroupSetBits+0x146>
     d12:	88 85       	ldd	r24, Y+8	; 0x08
     d14:	99 85       	ldd	r25, Y+9	; 0x09
     d16:	fc 01       	movw	r30, r24
     d18:	20 81       	ld	r18, Z
     d1a:	31 81       	ldd	r19, Z+1	; 0x01
     d1c:	42 81       	ldd	r20, Z+2	; 0x02
     d1e:	53 81       	ldd	r21, Z+3	; 0x03
     d20:	88 89       	ldd	r24, Y+16	; 0x10
     d22:	99 89       	ldd	r25, Y+17	; 0x11
     d24:	aa 89       	ldd	r26, Y+18	; 0x12
     d26:	bb 89       	ldd	r27, Y+19	; 0x13
     d28:	28 23       	and	r18, r24
     d2a:	39 23       	and	r19, r25
     d2c:	4a 23       	and	r20, r26
     d2e:	5b 23       	and	r21, r27
     d30:	88 89       	ldd	r24, Y+16	; 0x10
     d32:	99 89       	ldd	r25, Y+17	; 0x11
     d34:	aa 89       	ldd	r26, Y+18	; 0x12
     d36:	bb 89       	ldd	r27, Y+19	; 0x13
     d38:	28 17       	cp	r18, r24
     d3a:	39 07       	cpc	r19, r25
     d3c:	4a 07       	cpc	r20, r26
     d3e:	5b 07       	cpc	r21, r27
     d40:	11 f4       	brne	.+4      	; 0xd46 <xEventGroupSetBits+0x146>
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	8f 83       	std	Y+7, r24	; 0x07
     d46:	8f 81       	ldd	r24, Y+7	; 0x07
     d48:	88 23       	and	r24, r24
     d4a:	59 f1       	breq	.+86     	; 0xda2 <xEventGroupSetBits+0x1a2>
     d4c:	8c 89       	ldd	r24, Y+20	; 0x14
     d4e:	9d 89       	ldd	r25, Y+21	; 0x15
     d50:	ae 89       	ldd	r26, Y+22	; 0x16
     d52:	bf 89       	ldd	r27, Y+23	; 0x17
     d54:	88 27       	eor	r24, r24
     d56:	99 27       	eor	r25, r25
     d58:	aa 27       	eor	r26, r26
     d5a:	b1 70       	andi	r27, 0x01	; 1
     d5c:	89 2b       	or	r24, r25
     d5e:	8a 2b       	or	r24, r26
     d60:	8b 2b       	or	r24, r27
     d62:	81 f0       	breq	.+32     	; 0xd84 <xEventGroupSetBits+0x184>
     d64:	2b 81       	ldd	r18, Y+3	; 0x03
     d66:	3c 81       	ldd	r19, Y+4	; 0x04
     d68:	4d 81       	ldd	r20, Y+5	; 0x05
     d6a:	5e 81       	ldd	r21, Y+6	; 0x06
     d6c:	88 89       	ldd	r24, Y+16	; 0x10
     d6e:	99 89       	ldd	r25, Y+17	; 0x11
     d70:	aa 89       	ldd	r26, Y+18	; 0x12
     d72:	bb 89       	ldd	r27, Y+19	; 0x13
     d74:	82 2b       	or	r24, r18
     d76:	93 2b       	or	r25, r19
     d78:	a4 2b       	or	r26, r20
     d7a:	b5 2b       	or	r27, r21
     d7c:	8b 83       	std	Y+3, r24	; 0x03
     d7e:	9c 83       	std	Y+4, r25	; 0x04
     d80:	ad 83       	std	Y+5, r26	; 0x05
     d82:	be 83       	std	Y+6, r27	; 0x06
     d84:	88 85       	ldd	r24, Y+8	; 0x08
     d86:	99 85       	ldd	r25, Y+9	; 0x09
     d88:	fc 01       	movw	r30, r24
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	a2 81       	ldd	r26, Z+2	; 0x02
     d90:	b3 81       	ldd	r27, Z+3	; 0x03
     d92:	b2 60       	ori	r27, 0x02	; 2
     d94:	29 81       	ldd	r18, Y+1	; 0x01
     d96:	3a 81       	ldd	r19, Y+2	; 0x02
     d98:	ac 01       	movw	r20, r24
     d9a:	bd 01       	movw	r22, r26
     d9c:	c9 01       	movw	r24, r18
     d9e:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <vTaskRemoveFromUnorderedEventList>
     da2:	8e 85       	ldd	r24, Y+14	; 0x0e
     da4:	9f 85       	ldd	r25, Y+15	; 0x0f
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	9a 83       	std	Y+2, r25	; 0x02
     daa:	29 81       	ldd	r18, Y+1	; 0x01
     dac:	3a 81       	ldd	r19, Y+2	; 0x02
     dae:	8c 85       	ldd	r24, Y+12	; 0x0c
     db0:	9d 85       	ldd	r25, Y+13	; 0x0d
     db2:	28 17       	cp	r18, r24
     db4:	39 07       	cpc	r19, r25
     db6:	09 f0       	breq	.+2      	; 0xdba <xEventGroupSetBits+0x1ba>
     db8:	63 cf       	rjmp	.-314    	; 0xc80 <xEventGroupSetBits+0x80>
     dba:	88 85       	ldd	r24, Y+8	; 0x08
     dbc:	99 85       	ldd	r25, Y+9	; 0x09
     dbe:	fc 01       	movw	r30, r24
     dc0:	20 81       	ld	r18, Z
     dc2:	31 81       	ldd	r19, Z+1	; 0x01
     dc4:	42 81       	ldd	r20, Z+2	; 0x02
     dc6:	53 81       	ldd	r21, Z+3	; 0x03
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	9c 81       	ldd	r25, Y+4	; 0x04
     dcc:	ad 81       	ldd	r26, Y+5	; 0x05
     dce:	be 81       	ldd	r27, Y+6	; 0x06
     dd0:	80 95       	com	r24
     dd2:	90 95       	com	r25
     dd4:	a0 95       	com	r26
     dd6:	b0 95       	com	r27
     dd8:	82 23       	and	r24, r18
     dda:	93 23       	and	r25, r19
     ddc:	a4 23       	and	r26, r20
     dde:	b5 23       	and	r27, r21
     de0:	28 85       	ldd	r18, Y+8	; 0x08
     de2:	39 85       	ldd	r19, Y+9	; 0x09
     de4:	f9 01       	movw	r30, r18
     de6:	80 83       	st	Z, r24
     de8:	91 83       	std	Z+1, r25	; 0x01
     dea:	a2 83       	std	Z+2, r26	; 0x02
     dec:	b3 83       	std	Z+3, r27	; 0x03
     dee:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskResumeAll>
     df2:	88 85       	ldd	r24, Y+8	; 0x08
     df4:	99 85       	ldd	r25, Y+9	; 0x09
     df6:	fc 01       	movw	r30, r24
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	a2 81       	ldd	r26, Z+2	; 0x02
     dfe:	b3 81       	ldd	r27, Z+3	; 0x03
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	6d 96       	adiw	r28, 0x1d	; 29
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <vEventGroupSetBitsCallback>:
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	00 d0       	rcall	.+0      	; 0xe16 <vEventGroupSetBitsCallback+0x6>
     e16:	00 d0       	rcall	.+0      	; 0xe18 <vEventGroupSetBitsCallback+0x8>
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	4b 83       	std	Y+3, r20	; 0x03
     e22:	5c 83       	std	Y+4, r21	; 0x04
     e24:	6d 83       	std	Y+5, r22	; 0x05
     e26:	7e 83       	std	Y+6, r23	; 0x06
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	ad 81       	ldd	r26, Y+5	; 0x05
     e2e:	be 81       	ldd	r27, Y+6	; 0x06
     e30:	29 81       	ldd	r18, Y+1	; 0x01
     e32:	3a 81       	ldd	r19, Y+2	; 0x02
     e34:	ac 01       	movw	r20, r24
     e36:	bd 01       	movw	r22, r26
     e38:	c9 01       	movw	r24, r18
     e3a:	0e 94 00 06 	call	0xc00	; 0xc00 <xEventGroupSetBits>
     e3e:	00 00       	nop
     e40:	26 96       	adiw	r28, 0x06	; 6
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	08 95       	ret

00000e4c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     e4c:	0f 93       	push	r16
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	2a 97       	sbiw	r28, 0x0a	; 10
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	6a 83       	std	Y+2, r22	; 0x02
     e5e:	7b 83       	std	Y+3, r23	; 0x03
     e60:	8c 83       	std	Y+4, r24	; 0x04
     e62:	9d 83       	std	Y+5, r25	; 0x05
     e64:	2e 83       	std	Y+6, r18	; 0x06
     e66:	3f 83       	std	Y+7, r19	; 0x07
     e68:	48 87       	std	Y+8, r20	; 0x08
     e6a:	59 87       	std	Y+9, r21	; 0x09
     e6c:	0a 87       	std	Y+10, r16	; 0x0a
BaseType_t xWaitConditionMet = pdFALSE;
     e6e:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     e70:	8a 85       	ldd	r24, Y+10	; 0x0a
     e72:	88 23       	and	r24, r24
     e74:	99 f4       	brne	.+38     	; 0xe9c <prvTestWaitCondition+0x50>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     e76:	2a 81       	ldd	r18, Y+2	; 0x02
     e78:	3b 81       	ldd	r19, Y+3	; 0x03
     e7a:	4c 81       	ldd	r20, Y+4	; 0x04
     e7c:	5d 81       	ldd	r21, Y+5	; 0x05
     e7e:	8e 81       	ldd	r24, Y+6	; 0x06
     e80:	9f 81       	ldd	r25, Y+7	; 0x07
     e82:	a8 85       	ldd	r26, Y+8	; 0x08
     e84:	b9 85       	ldd	r27, Y+9	; 0x09
     e86:	82 23       	and	r24, r18
     e88:	93 23       	and	r25, r19
     e8a:	a4 23       	and	r26, r20
     e8c:	b5 23       	and	r27, r21
     e8e:	89 2b       	or	r24, r25
     e90:	8a 2b       	or	r24, r26
     e92:	8b 2b       	or	r24, r27
     e94:	d1 f0       	breq	.+52     	; 0xeca <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	17 c0       	rjmp	.+46     	; 0xeca <prvTestWaitCondition+0x7e>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     e9c:	2a 81       	ldd	r18, Y+2	; 0x02
     e9e:	3b 81       	ldd	r19, Y+3	; 0x03
     ea0:	4c 81       	ldd	r20, Y+4	; 0x04
     ea2:	5d 81       	ldd	r21, Y+5	; 0x05
     ea4:	8e 81       	ldd	r24, Y+6	; 0x06
     ea6:	9f 81       	ldd	r25, Y+7	; 0x07
     ea8:	a8 85       	ldd	r26, Y+8	; 0x08
     eaa:	b9 85       	ldd	r27, Y+9	; 0x09
     eac:	28 23       	and	r18, r24
     eae:	39 23       	and	r19, r25
     eb0:	4a 23       	and	r20, r26
     eb2:	5b 23       	and	r21, r27
     eb4:	8e 81       	ldd	r24, Y+6	; 0x06
     eb6:	9f 81       	ldd	r25, Y+7	; 0x07
     eb8:	a8 85       	ldd	r26, Y+8	; 0x08
     eba:	b9 85       	ldd	r27, Y+9	; 0x09
     ebc:	28 17       	cp	r18, r24
     ebe:	39 07       	cpc	r19, r25
     ec0:	4a 07       	cpc	r20, r26
     ec2:	5b 07       	cpc	r21, r27
     ec4:	11 f4       	brne	.+4      	; 0xeca <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
}
     ecc:	2a 96       	adiw	r28, 0x0a	; 10
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	0f 91       	pop	r16
     ed8:	08 95       	ret

00000eda <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	29 97       	sbiw	r28, 0x09	; 9
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	8a 83       	std	Y+2, r24	; 0x02
     eee:	9b 83       	std	Y+3, r25	; 0x03
     ef0:	4c 83       	std	Y+4, r20	; 0x04
     ef2:	5d 83       	std	Y+5, r21	; 0x05
     ef4:	6e 83       	std	Y+6, r22	; 0x06
     ef6:	7f 83       	std	Y+7, r23	; 0x07
     ef8:	28 87       	std	Y+8, r18	; 0x08
     efa:	39 87       	std	Y+9, r19	; 0x09
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     efc:	28 85       	ldd	r18, Y+8	; 0x08
     efe:	39 85       	ldd	r19, Y+9	; 0x09
     f00:	8c 81       	ldd	r24, Y+4	; 0x04
     f02:	9d 81       	ldd	r25, Y+5	; 0x05
     f04:	ae 81       	ldd	r26, Y+6	; 0x06
     f06:	bf 81       	ldd	r27, Y+7	; 0x07
     f08:	6a 81       	ldd	r22, Y+2	; 0x02
     f0a:	7b 81       	ldd	r23, Y+3	; 0x03
     f0c:	89 01       	movw	r16, r18
     f0e:	9c 01       	movw	r18, r24
     f10:	ad 01       	movw	r20, r26
     f12:	88 e0       	ldi	r24, 0x08	; 8
     f14:	97 e0       	ldi	r25, 0x07	; 7
     f16:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <xTimerPendFunctionCallFromISR>
     f1a:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
	}
     f1e:	29 96       	adiw	r28, 0x09	; 9
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	08 95       	ret

00000f2e <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	00 d0       	rcall	.+0      	; 0xf34 <pvPortMalloc+0x6>
     f34:	1f 92       	push	r1
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	8b 83       	std	Y+3, r24	; 0x03
     f3c:	9c 83       	std	Y+4, r25	; 0x04
void *pvReturn = NULL; 
     f3e:	19 82       	std	Y+1, r1	; 0x01
     f40:	1a 82       	std	Y+2, r1	; 0x02
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     f42:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     f46:	20 91 42 2c 	lds	r18, 0x2C42	; 0x802c42 <xNextFreeByte>
     f4a:	30 91 43 2c 	lds	r19, 0x2C43	; 0x802c43 <xNextFreeByte+0x1>
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	88 3b       	cpi	r24, 0xB8	; 184
     f58:	9b 40       	sbci	r25, 0x0B	; 11
     f5a:	18 f5       	brcc	.+70     	; 0xfa2 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     f5c:	20 91 42 2c 	lds	r18, 0x2C42	; 0x802c42 <xNextFreeByte>
     f60:	30 91 43 2c 	lds	r19, 0x2C43	; 0x802c43 <xNextFreeByte+0x1>
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	9c 81       	ldd	r25, Y+4	; 0x04
     f68:	28 0f       	add	r18, r24
     f6a:	39 1f       	adc	r19, r25
     f6c:	80 91 42 2c 	lds	r24, 0x2C42	; 0x802c42 <xNextFreeByte>
     f70:	90 91 43 2c 	lds	r25, 0x2C43	; 0x802c43 <xNextFreeByte+0x1>
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     f74:	82 17       	cp	r24, r18
     f76:	93 07       	cpc	r25, r19
     f78:	a0 f4       	brcc	.+40     	; 0xfa2 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     f7a:	80 91 42 2c 	lds	r24, 0x2C42	; 0x802c42 <xNextFreeByte>
     f7e:	90 91 43 2c 	lds	r25, 0x2C43	; 0x802c43 <xNextFreeByte+0x1>
     f82:	86 57       	subi	r24, 0x76	; 118
     f84:	9f 4d       	sbci	r25, 0xDF	; 223
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	9a 83       	std	Y+2, r25	; 0x02
			xNextFreeByte += xWantedSize;			
     f8a:	20 91 42 2c 	lds	r18, 0x2C42	; 0x802c42 <xNextFreeByte>
     f8e:	30 91 43 2c 	lds	r19, 0x2C43	; 0x802c43 <xNextFreeByte+0x1>
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	82 0f       	add	r24, r18
     f98:	93 1f       	adc	r25, r19
     f9a:	80 93 42 2c 	sts	0x2C42, r24	; 0x802c42 <xNextFreeByte>
     f9e:	90 93 43 2c 	sts	0x2C43, r25	; 0x802c43 <xNextFreeByte+0x1>
		}	
	}
	xTaskResumeAll();
     fa2:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     faa:	24 96       	adiw	r28, 0x04	; 4
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	1f 92       	push	r1
     fbc:	1f 92       	push	r1
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	9a 83       	std	Y+2, r25	; 0x02
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
	
	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     fc6:	00 00       	nop
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	1f 92       	push	r1
     fd8:	1f 92       	push	r1
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	9a 83       	std	Y+2, r25	; 0x02
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	9c 01       	movw	r18, r24
     fe8:	2d 5f       	subi	r18, 0xFD	; 253
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	fc 01       	movw	r30, r24
     ff2:	21 83       	std	Z+1, r18	; 0x01
     ff4:	32 83       	std	Z+2, r19	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     ff6:	29 81       	ldd	r18, Y+1	; 0x01
     ff8:	3a 81       	ldd	r19, Y+2	; 0x02
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	9f ef       	ldi	r25, 0xFF	; 255
     ffe:	dc 01       	movw	r26, r24
    1000:	f9 01       	movw	r30, r18
    1002:	83 83       	std	Z+3, r24	; 0x03
    1004:	94 83       	std	Z+4, r25	; 0x04
    1006:	a5 83       	std	Z+5, r26	; 0x05
    1008:	b6 83       	std	Z+6, r27	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
    100e:	9c 01       	movw	r18, r24
    1010:	2d 5f       	subi	r18, 0xFD	; 253
    1012:	3f 4f       	sbci	r19, 0xFF	; 255
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	9a 81       	ldd	r25, Y+2	; 0x02
    1018:	fc 01       	movw	r30, r24
    101a:	27 83       	std	Z+7, r18	; 0x07
    101c:	30 87       	std	Z+8, r19	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
    1022:	9c 01       	movw	r18, r24
    1024:	2d 5f       	subi	r18, 0xFD	; 253
    1026:	3f 4f       	sbci	r19, 0xFF	; 255
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	9a 81       	ldd	r25, Y+2	; 0x02
    102c:	fc 01       	movw	r30, r24
    102e:	21 87       	std	Z+9, r18	; 0x09
    1030:	32 87       	std	Z+10, r19	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	9a 81       	ldd	r25, Y+2	; 0x02
    1036:	fc 01       	movw	r30, r24
    1038:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    103a:	00 00       	nop
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	1f 92       	push	r1
    104c:	1f 92       	push	r1
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	9a 83       	std	Y+2, r25	; 0x02
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	fc 01       	movw	r30, r24
    105c:	12 86       	std	Z+10, r1	; 0x0a
    105e:	13 86       	std	Z+11, r1	; 0x0b

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1060:	00 00       	nop
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	00 d0       	rcall	.+0      	; 0x1072 <vListInsertEnd+0x6>
    1072:	00 d0       	rcall	.+0      	; 0x1074 <vListInsertEnd+0x8>
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	8b 83       	std	Y+3, r24	; 0x03
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	6d 83       	std	Y+5, r22	; 0x05
    107e:	7e 83       	std	Y+6, r23	; 0x06
ListItem_t * const pxIndex = pxList->pxIndex;
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	fc 01       	movw	r30, r24
    1086:	81 81       	ldd	r24, Z+1	; 0x01
    1088:	92 81       	ldd	r25, Z+2	; 0x02
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	9a 83       	std	Y+2, r25	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	9e 81       	ldd	r25, Y+6	; 0x06
    1092:	29 81       	ldd	r18, Y+1	; 0x01
    1094:	3a 81       	ldd	r19, Y+2	; 0x02
    1096:	fc 01       	movw	r30, r24
    1098:	24 83       	std	Z+4, r18	; 0x04
    109a:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	fc 01       	movw	r30, r24
    10a2:	26 81       	ldd	r18, Z+6	; 0x06
    10a4:	37 81       	ldd	r19, Z+7	; 0x07
    10a6:	8d 81       	ldd	r24, Y+5	; 0x05
    10a8:	9e 81       	ldd	r25, Y+6	; 0x06
    10aa:	fc 01       	movw	r30, r24
    10ac:	26 83       	std	Z+6, r18	; 0x06
    10ae:	37 83       	std	Z+7, r19	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	fc 01       	movw	r30, r24
    10b6:	86 81       	ldd	r24, Z+6	; 0x06
    10b8:	97 81       	ldd	r25, Z+7	; 0x07
    10ba:	2d 81       	ldd	r18, Y+5	; 0x05
    10bc:	3e 81       	ldd	r19, Y+6	; 0x06
    10be:	fc 01       	movw	r30, r24
    10c0:	24 83       	std	Z+4, r18	; 0x04
    10c2:	35 83       	std	Z+5, r19	; 0x05
	pxIndex->pxPrevious = pxNewListItem;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ca:	3e 81       	ldd	r19, Y+6	; 0x06
    10cc:	fc 01       	movw	r30, r24
    10ce:	26 83       	std	Z+6, r18	; 0x06
    10d0:	37 83       	std	Z+7, r19	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10d2:	8d 81       	ldd	r24, Y+5	; 0x05
    10d4:	9e 81       	ldd	r25, Y+6	; 0x06
    10d6:	2b 81       	ldd	r18, Y+3	; 0x03
    10d8:	3c 81       	ldd	r19, Y+4	; 0x04
    10da:	fc 01       	movw	r30, r24
    10dc:	22 87       	std	Z+10, r18	; 0x0a
    10de:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	fc 01       	movw	r30, r24
    10e6:	80 81       	ld	r24, Z
    10e8:	21 e0       	ldi	r18, 0x01	; 1
    10ea:	28 0f       	add	r18, r24
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	fc 01       	movw	r30, r24
    10f2:	20 83       	st	Z, r18
}
    10f4:	00 00       	nop
    10f6:	26 96       	adiw	r28, 0x06	; 6
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	08 95       	ret

00001102 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	2a 97       	sbiw	r28, 0x0a	; 10
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	8f 83       	std	Y+7, r24	; 0x07
    1112:	98 87       	std	Y+8, r25	; 0x08
    1114:	69 87       	std	Y+9, r22	; 0x09
    1116:	7a 87       	std	Y+10, r23	; 0x0a
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	9a 85       	ldd	r25, Y+10	; 0x0a
    111c:	fc 01       	movw	r30, r24
    111e:	80 81       	ld	r24, Z
    1120:	91 81       	ldd	r25, Z+1	; 0x01
    1122:	a2 81       	ldd	r26, Z+2	; 0x02
    1124:	b3 81       	ldd	r27, Z+3	; 0x03
    1126:	8b 83       	std	Y+3, r24	; 0x03
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	ad 83       	std	Y+5, r26	; 0x05
    112c:	be 83       	std	Y+6, r27	; 0x06
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	ad 81       	ldd	r26, Y+5	; 0x05
    1134:	be 81       	ldd	r27, Y+6	; 0x06
    1136:	8f 3f       	cpi	r24, 0xFF	; 255
    1138:	9f 4f       	sbci	r25, 0xFF	; 255
    113a:	af 4f       	sbci	r26, 0xFF	; 255
    113c:	bf 4f       	sbci	r27, 0xFF	; 255
    113e:	41 f4       	brne	.+16     	; 0x1150 <vListInsert+0x4e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1140:	8f 81       	ldd	r24, Y+7	; 0x07
    1142:	98 85       	ldd	r25, Y+8	; 0x08
    1144:	fc 01       	movw	r30, r24
    1146:	81 85       	ldd	r24, Z+9	; 0x09
    1148:	92 85       	ldd	r25, Z+10	; 0x0a
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	9a 83       	std	Y+2, r25	; 0x02
    114e:	20 c0       	rjmp	.+64     	; 0x1190 <vListInsert+0x8e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1150:	8f 81       	ldd	r24, Y+7	; 0x07
    1152:	98 85       	ldd	r25, Y+8	; 0x08
    1154:	03 96       	adiw	r24, 0x03	; 3
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	07 c0       	rjmp	.+14     	; 0x116a <vListInsert+0x68>
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	fc 01       	movw	r30, r24
    1162:	84 81       	ldd	r24, Z+4	; 0x04
    1164:	95 81       	ldd	r25, Z+5	; 0x05
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	fc 01       	movw	r30, r24
    1170:	84 81       	ldd	r24, Z+4	; 0x04
    1172:	95 81       	ldd	r25, Z+5	; 0x05
    1174:	fc 01       	movw	r30, r24
    1176:	20 81       	ld	r18, Z
    1178:	31 81       	ldd	r19, Z+1	; 0x01
    117a:	42 81       	ldd	r20, Z+2	; 0x02
    117c:	53 81       	ldd	r21, Z+3	; 0x03
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	ad 81       	ldd	r26, Y+5	; 0x05
    1184:	be 81       	ldd	r27, Y+6	; 0x06
    1186:	82 17       	cp	r24, r18
    1188:	93 07       	cpc	r25, r19
    118a:	a4 07       	cpc	r26, r20
    118c:	b5 07       	cpc	r27, r21
    118e:	30 f7       	brcc	.-52     	; 0x115c <vListInsert+0x5a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	9a 81       	ldd	r25, Y+2	; 0x02
    1194:	fc 01       	movw	r30, r24
    1196:	24 81       	ldd	r18, Z+4	; 0x04
    1198:	35 81       	ldd	r19, Z+5	; 0x05
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	9a 85       	ldd	r25, Y+10	; 0x0a
    119e:	fc 01       	movw	r30, r24
    11a0:	24 83       	std	Z+4, r18	; 0x04
    11a2:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    11a4:	89 85       	ldd	r24, Y+9	; 0x09
    11a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a8:	fc 01       	movw	r30, r24
    11aa:	84 81       	ldd	r24, Z+4	; 0x04
    11ac:	95 81       	ldd	r25, Z+5	; 0x05
    11ae:	29 85       	ldd	r18, Y+9	; 0x09
    11b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    11b2:	fc 01       	movw	r30, r24
    11b4:	26 83       	std	Z+6, r18	; 0x06
    11b6:	37 83       	std	Z+7, r19	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
    11b8:	89 85       	ldd	r24, Y+9	; 0x09
    11ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    11bc:	29 81       	ldd	r18, Y+1	; 0x01
    11be:	3a 81       	ldd	r19, Y+2	; 0x02
    11c0:	fc 01       	movw	r30, r24
    11c2:	26 83       	std	Z+6, r18	; 0x06
    11c4:	37 83       	std	Z+7, r19	; 0x07
	pxIterator->pxNext = pxNewListItem;
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	29 85       	ldd	r18, Y+9	; 0x09
    11cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    11ce:	fc 01       	movw	r30, r24
    11d0:	24 83       	std	Z+4, r18	; 0x04
    11d2:	35 83       	std	Z+5, r19	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    11d4:	89 85       	ldd	r24, Y+9	; 0x09
    11d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d8:	2f 81       	ldd	r18, Y+7	; 0x07
    11da:	38 85       	ldd	r19, Y+8	; 0x08
    11dc:	fc 01       	movw	r30, r24
    11de:	22 87       	std	Z+10, r18	; 0x0a
    11e0:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    11e2:	8f 81       	ldd	r24, Y+7	; 0x07
    11e4:	98 85       	ldd	r25, Y+8	; 0x08
    11e6:	fc 01       	movw	r30, r24
    11e8:	80 81       	ld	r24, Z
    11ea:	21 e0       	ldi	r18, 0x01	; 1
    11ec:	28 0f       	add	r18, r24
    11ee:	8f 81       	ldd	r24, Y+7	; 0x07
    11f0:	98 85       	ldd	r25, Y+8	; 0x08
    11f2:	fc 01       	movw	r30, r24
    11f4:	20 83       	st	Z, r18
}
    11f6:	00 00       	nop
    11f8:	2a 96       	adiw	r28, 0x0a	; 10
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	00 d0       	rcall	.+0      	; 0x120a <uxListRemove+0x6>
    120a:	1f 92       	push	r1
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	8b 83       	std	Y+3, r24	; 0x03
    1212:	9c 83       	std	Y+4, r25	; 0x04
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	fc 01       	movw	r30, r24
    121a:	82 85       	ldd	r24, Z+10	; 0x0a
    121c:	93 85       	ldd	r25, Z+11	; 0x0b
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	9a 83       	std	Y+2, r25	; 0x02

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	fc 01       	movw	r30, r24
    1228:	84 81       	ldd	r24, Z+4	; 0x04
    122a:	95 81       	ldd	r25, Z+5	; 0x05
    122c:	2b 81       	ldd	r18, Y+3	; 0x03
    122e:	3c 81       	ldd	r19, Y+4	; 0x04
    1230:	f9 01       	movw	r30, r18
    1232:	26 81       	ldd	r18, Z+6	; 0x06
    1234:	37 81       	ldd	r19, Z+7	; 0x07
    1236:	fc 01       	movw	r30, r24
    1238:	26 83       	std	Z+6, r18	; 0x06
    123a:	37 83       	std	Z+7, r19	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	fc 01       	movw	r30, r24
    1242:	86 81       	ldd	r24, Z+6	; 0x06
    1244:	97 81       	ldd	r25, Z+7	; 0x07
    1246:	2b 81       	ldd	r18, Y+3	; 0x03
    1248:	3c 81       	ldd	r19, Y+4	; 0x04
    124a:	f9 01       	movw	r30, r18
    124c:	24 81       	ldd	r18, Z+4	; 0x04
    124e:	35 81       	ldd	r19, Z+5	; 0x05
    1250:	fc 01       	movw	r30, r24
    1252:	24 83       	std	Z+4, r18	; 0x04
    1254:	35 83       	std	Z+5, r19	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	fc 01       	movw	r30, r24
    125c:	21 81       	ldd	r18, Z+1	; 0x01
    125e:	32 81       	ldd	r19, Z+2	; 0x02
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	28 17       	cp	r18, r24
    1266:	39 07       	cpc	r19, r25
    1268:	51 f4       	brne	.+20     	; 0x127e <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	fc 01       	movw	r30, r24
    1270:	26 81       	ldd	r18, Z+6	; 0x06
    1272:	37 81       	ldd	r19, Z+7	; 0x07
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	fc 01       	movw	r30, r24
    127a:	21 83       	std	Z+1, r18	; 0x01
    127c:	32 83       	std	Z+2, r19	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	fc 01       	movw	r30, r24
    1284:	12 86       	std	Z+10, r1	; 0x0a
    1286:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	fc 01       	movw	r30, r24
    128e:	80 81       	ld	r24, Z
    1290:	2f ef       	ldi	r18, 0xFF	; 255
    1292:	28 0f       	add	r18, r24
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	fc 01       	movw	r30, r24
    129a:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	fc 01       	movw	r30, r24
    12a2:	80 81       	ld	r24, Z
}
    12a4:	24 96       	adiw	r28, 0x04	; 4
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <_portSetInterruptMaskFromIsr>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	80 ea       	ldi	r24, 0xA0	; 160
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	fc 01       	movw	r30, r24
    12c0:	12 81       	ldd	r17, Z+2	; 0x02
    12c2:	80 ea       	ldi	r24, 0xA0	; 160
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	20 ea       	ldi	r18, 0xA0	; 160
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	f9 01       	movw	r30, r18
    12cc:	22 81       	ldd	r18, Z+2	; 0x02
    12ce:	28 7f       	andi	r18, 0xF8	; 248
    12d0:	fc 01       	movw	r30, r24
    12d2:	22 83       	std	Z+2, r18	; 0x02
    12d4:	81 2f       	mov	r24, r17
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	08 95       	ret

000012de <pxPortInitialiseStack>:
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	2a 97       	sbiw	r28, 0x0a	; 10
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	6f 83       	std	Y+7, r22	; 0x07
    12f2:	78 87       	std	Y+8, r23	; 0x08
    12f4:	49 87       	std	Y+9, r20	; 0x09
    12f6:	5a 87       	std	Y+10, r21	; 0x0a
    12f8:	8d 81       	ldd	r24, Y+5	; 0x05
    12fa:	9e 81       	ldd	r25, Y+6	; 0x06
    12fc:	21 e1       	ldi	r18, 0x11	; 17
    12fe:	fc 01       	movw	r30, r24
    1300:	20 83       	st	Z, r18
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
    1304:	9e 81       	ldd	r25, Y+6	; 0x06
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	8d 83       	std	Y+5, r24	; 0x05
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
    130e:	9e 81       	ldd	r25, Y+6	; 0x06
    1310:	22 e2       	ldi	r18, 0x22	; 34
    1312:	fc 01       	movw	r30, r24
    1314:	20 83       	st	Z, r18
    1316:	8d 81       	ldd	r24, Y+5	; 0x05
    1318:	9e 81       	ldd	r25, Y+6	; 0x06
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	8d 83       	std	Y+5, r24	; 0x05
    131e:	9e 83       	std	Y+6, r25	; 0x06
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	23 e3       	ldi	r18, 0x33	; 51
    1326:	fc 01       	movw	r30, r24
    1328:	20 83       	st	Z, r18
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	8d 83       	std	Y+5, r24	; 0x05
    1332:	9e 83       	std	Y+6, r25	; 0x06
    1334:	8f 81       	ldd	r24, Y+7	; 0x07
    1336:	98 85       	ldd	r25, Y+8	; 0x08
    1338:	cc 01       	movw	r24, r24
    133a:	a0 e0       	ldi	r26, 0x00	; 0
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	ab 83       	std	Y+3, r26	; 0x03
    1344:	bc 83       	std	Y+4, r27	; 0x04
    1346:	29 81       	ldd	r18, Y+1	; 0x01
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	fc 01       	movw	r30, r24
    134e:	20 83       	st	Z, r18
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	8d 83       	std	Y+5, r24	; 0x05
    1358:	9e 83       	std	Y+6, r25	; 0x06
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	ab 81       	ldd	r26, Y+3	; 0x03
    1360:	bc 81       	ldd	r27, Y+4	; 0x04
    1362:	89 2f       	mov	r24, r25
    1364:	9a 2f       	mov	r25, r26
    1366:	ab 2f       	mov	r26, r27
    1368:	bb 27       	eor	r27, r27
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	ab 83       	std	Y+3, r26	; 0x03
    1370:	bc 83       	std	Y+4, r27	; 0x04
    1372:	29 81       	ldd	r18, Y+1	; 0x01
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	fc 01       	movw	r30, r24
    137a:	20 83       	st	Z, r18
    137c:	8d 81       	ldd	r24, Y+5	; 0x05
    137e:	9e 81       	ldd	r25, Y+6	; 0x06
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	8d 83       	std	Y+5, r24	; 0x05
    1384:	9e 83       	std	Y+6, r25	; 0x06
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	9a 81       	ldd	r25, Y+2	; 0x02
    138a:	ab 81       	ldd	r26, Y+3	; 0x03
    138c:	bc 81       	ldd	r27, Y+4	; 0x04
    138e:	89 2f       	mov	r24, r25
    1390:	9a 2f       	mov	r25, r26
    1392:	ab 2f       	mov	r26, r27
    1394:	bb 27       	eor	r27, r27
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	ab 83       	std	Y+3, r26	; 0x03
    139c:	bc 83       	std	Y+4, r27	; 0x04
    139e:	29 81       	ldd	r18, Y+1	; 0x01
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	fc 01       	movw	r30, r24
    13a6:	20 83       	st	Z, r18
    13a8:	8d 81       	ldd	r24, Y+5	; 0x05
    13aa:	9e 81       	ldd	r25, Y+6	; 0x06
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	8d 83       	std	Y+5, r24	; 0x05
    13b0:	9e 83       	std	Y+6, r25	; 0x06
    13b2:	8d 81       	ldd	r24, Y+5	; 0x05
    13b4:	9e 81       	ldd	r25, Y+6	; 0x06
    13b6:	21 e3       	ldi	r18, 0x31	; 49
    13b8:	fc 01       	movw	r30, r24
    13ba:	20 83       	st	Z, r18
    13bc:	8d 81       	ldd	r24, Y+5	; 0x05
    13be:	9e 81       	ldd	r25, Y+6	; 0x06
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	20 e8       	ldi	r18, 0x80	; 128
    13cc:	fc 01       	movw	r30, r24
    13ce:	20 83       	st	Z, r18
    13d0:	8d 81       	ldd	r24, Y+5	; 0x05
    13d2:	9e 81       	ldd	r25, Y+6	; 0x06
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	8d 83       	std	Y+5, r24	; 0x05
    13d8:	9e 83       	std	Y+6, r25	; 0x06
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	27 e8       	ldi	r18, 0x87	; 135
    13e0:	fc 01       	movw	r30, r24
    13e2:	20 83       	st	Z, r18
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	8d 83       	std	Y+5, r24	; 0x05
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	fc 01       	movw	r30, r24
    13f4:	10 82       	st	Z, r1
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	9e 81       	ldd	r25, Y+6	; 0x06
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	8d 83       	std	Y+5, r24	; 0x05
    13fe:	9e 83       	std	Y+6, r25	; 0x06
    1400:	8d 81       	ldd	r24, Y+5	; 0x05
    1402:	9e 81       	ldd	r25, Y+6	; 0x06
    1404:	fc 01       	movw	r30, r24
    1406:	10 82       	st	Z, r1
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	8d 83       	std	Y+5, r24	; 0x05
    1410:	9e 83       	std	Y+6, r25	; 0x06
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	9e 81       	ldd	r25, Y+6	; 0x06
    1416:	22 e0       	ldi	r18, 0x02	; 2
    1418:	fc 01       	movw	r30, r24
    141a:	20 83       	st	Z, r18
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	8d 83       	std	Y+5, r24	; 0x05
    1424:	9e 83       	std	Y+6, r25	; 0x06
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	23 e0       	ldi	r18, 0x03	; 3
    142c:	fc 01       	movw	r30, r24
    142e:	20 83       	st	Z, r18
    1430:	8d 81       	ldd	r24, Y+5	; 0x05
    1432:	9e 81       	ldd	r25, Y+6	; 0x06
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	8d 83       	std	Y+5, r24	; 0x05
    1438:	9e 83       	std	Y+6, r25	; 0x06
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	9e 81       	ldd	r25, Y+6	; 0x06
    143e:	24 e0       	ldi	r18, 0x04	; 4
    1440:	fc 01       	movw	r30, r24
    1442:	20 83       	st	Z, r18
    1444:	8d 81       	ldd	r24, Y+5	; 0x05
    1446:	9e 81       	ldd	r25, Y+6	; 0x06
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	8d 83       	std	Y+5, r24	; 0x05
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	8d 81       	ldd	r24, Y+5	; 0x05
    1450:	9e 81       	ldd	r25, Y+6	; 0x06
    1452:	25 e0       	ldi	r18, 0x05	; 5
    1454:	fc 01       	movw	r30, r24
    1456:	20 83       	st	Z, r18
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	8d 83       	std	Y+5, r24	; 0x05
    1460:	9e 83       	std	Y+6, r25	; 0x06
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	9e 81       	ldd	r25, Y+6	; 0x06
    1466:	26 e0       	ldi	r18, 0x06	; 6
    1468:	fc 01       	movw	r30, r24
    146a:	20 83       	st	Z, r18
    146c:	8d 81       	ldd	r24, Y+5	; 0x05
    146e:	9e 81       	ldd	r25, Y+6	; 0x06
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	8d 83       	std	Y+5, r24	; 0x05
    1474:	9e 83       	std	Y+6, r25	; 0x06
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	27 e0       	ldi	r18, 0x07	; 7
    147c:	fc 01       	movw	r30, r24
    147e:	20 83       	st	Z, r18
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	9e 81       	ldd	r25, Y+6	; 0x06
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	9e 83       	std	Y+6, r25	; 0x06
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	28 e0       	ldi	r18, 0x08	; 8
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	8d 83       	std	Y+5, r24	; 0x05
    149c:	9e 83       	std	Y+6, r25	; 0x06
    149e:	8d 81       	ldd	r24, Y+5	; 0x05
    14a0:	9e 81       	ldd	r25, Y+6	; 0x06
    14a2:	29 e0       	ldi	r18, 0x09	; 9
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 83       	st	Z, r18
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	8d 83       	std	Y+5, r24	; 0x05
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
    14b4:	9e 81       	ldd	r25, Y+6	; 0x06
    14b6:	20 e1       	ldi	r18, 0x10	; 16
    14b8:	fc 01       	movw	r30, r24
    14ba:	20 83       	st	Z, r18
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	8d 83       	std	Y+5, r24	; 0x05
    14c4:	9e 83       	std	Y+6, r25	; 0x06
    14c6:	8d 81       	ldd	r24, Y+5	; 0x05
    14c8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ca:	21 e1       	ldi	r18, 0x11	; 17
    14cc:	fc 01       	movw	r30, r24
    14ce:	20 83       	st	Z, r18
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	8d 83       	std	Y+5, r24	; 0x05
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	9e 81       	ldd	r25, Y+6	; 0x06
    14de:	22 e1       	ldi	r18, 0x12	; 18
    14e0:	fc 01       	movw	r30, r24
    14e2:	20 83       	st	Z, r18
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	9e 83       	std	Y+6, r25	; 0x06
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	9e 81       	ldd	r25, Y+6	; 0x06
    14f2:	23 e1       	ldi	r18, 0x13	; 19
    14f4:	fc 01       	movw	r30, r24
    14f6:	20 83       	st	Z, r18
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	8d 83       	std	Y+5, r24	; 0x05
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	24 e1       	ldi	r18, 0x14	; 20
    1508:	fc 01       	movw	r30, r24
    150a:	20 83       	st	Z, r18
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	8d 83       	std	Y+5, r24	; 0x05
    1514:	9e 83       	std	Y+6, r25	; 0x06
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	25 e1       	ldi	r18, 0x15	; 21
    151c:	fc 01       	movw	r30, r24
    151e:	20 83       	st	Z, r18
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	8d 83       	std	Y+5, r24	; 0x05
    1528:	9e 83       	std	Y+6, r25	; 0x06
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	26 e1       	ldi	r18, 0x16	; 22
    1530:	fc 01       	movw	r30, r24
    1532:	20 83       	st	Z, r18
    1534:	8d 81       	ldd	r24, Y+5	; 0x05
    1536:	9e 81       	ldd	r25, Y+6	; 0x06
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	8d 83       	std	Y+5, r24	; 0x05
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	27 e1       	ldi	r18, 0x17	; 23
    1544:	fc 01       	movw	r30, r24
    1546:	20 83       	st	Z, r18
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	9e 81       	ldd	r25, Y+6	; 0x06
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	8d 83       	std	Y+5, r24	; 0x05
    1550:	9e 83       	std	Y+6, r25	; 0x06
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	28 e1       	ldi	r18, 0x18	; 24
    1558:	fc 01       	movw	r30, r24
    155a:	20 83       	st	Z, r18
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	8d 83       	std	Y+5, r24	; 0x05
    1564:	9e 83       	std	Y+6, r25	; 0x06
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	29 e1       	ldi	r18, 0x19	; 25
    156c:	fc 01       	movw	r30, r24
    156e:	20 83       	st	Z, r18
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	9e 81       	ldd	r25, Y+6	; 0x06
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	8d 83       	std	Y+5, r24	; 0x05
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	20 e2       	ldi	r18, 0x20	; 32
    1580:	fc 01       	movw	r30, r24
    1582:	20 83       	st	Z, r18
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	8d 83       	std	Y+5, r24	; 0x05
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 81       	ldd	r24, Y+5	; 0x05
    1590:	9e 81       	ldd	r25, Y+6	; 0x06
    1592:	21 e2       	ldi	r18, 0x21	; 33
    1594:	fc 01       	movw	r30, r24
    1596:	20 83       	st	Z, r18
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	9e 83       	std	Y+6, r25	; 0x06
    15a2:	8d 81       	ldd	r24, Y+5	; 0x05
    15a4:	9e 81       	ldd	r25, Y+6	; 0x06
    15a6:	22 e2       	ldi	r18, 0x22	; 34
    15a8:	fc 01       	movw	r30, r24
    15aa:	20 83       	st	Z, r18
    15ac:	8d 81       	ldd	r24, Y+5	; 0x05
    15ae:	9e 81       	ldd	r25, Y+6	; 0x06
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	8d 83       	std	Y+5, r24	; 0x05
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	23 e2       	ldi	r18, 0x23	; 35
    15bc:	fc 01       	movw	r30, r24
    15be:	20 83       	st	Z, r18
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	8d 83       	std	Y+5, r24	; 0x05
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	cc 01       	movw	r24, r24
    15d0:	a0 e0       	ldi	r26, 0x00	; 0
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	ab 83       	std	Y+3, r26	; 0x03
    15da:	bc 83       	std	Y+4, r27	; 0x04
    15dc:	29 81       	ldd	r18, Y+1	; 0x01
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	fc 01       	movw	r30, r24
    15e4:	20 83       	st	Z, r18
    15e6:	8d 81       	ldd	r24, Y+5	; 0x05
    15e8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	8d 83       	std	Y+5, r24	; 0x05
    15ee:	9e 83       	std	Y+6, r25	; 0x06
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	ab 81       	ldd	r26, Y+3	; 0x03
    15f6:	bc 81       	ldd	r27, Y+4	; 0x04
    15f8:	89 2f       	mov	r24, r25
    15fa:	9a 2f       	mov	r25, r26
    15fc:	ab 2f       	mov	r26, r27
    15fe:	bb 27       	eor	r27, r27
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	9a 83       	std	Y+2, r25	; 0x02
    1604:	ab 83       	std	Y+3, r26	; 0x03
    1606:	bc 83       	std	Y+4, r27	; 0x04
    1608:	29 81       	ldd	r18, Y+1	; 0x01
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	fc 01       	movw	r30, r24
    1610:	20 83       	st	Z, r18
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	26 e2       	ldi	r18, 0x26	; 38
    1622:	fc 01       	movw	r30, r24
    1624:	20 83       	st	Z, r18
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	8d 83       	std	Y+5, r24	; 0x05
    162e:	9e 83       	std	Y+6, r25	; 0x06
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	9e 81       	ldd	r25, Y+6	; 0x06
    1634:	27 e2       	ldi	r18, 0x27	; 39
    1636:	fc 01       	movw	r30, r24
    1638:	20 83       	st	Z, r18
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	8d 83       	std	Y+5, r24	; 0x05
    1642:	9e 83       	std	Y+6, r25	; 0x06
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	9e 81       	ldd	r25, Y+6	; 0x06
    1648:	28 e2       	ldi	r18, 0x28	; 40
    164a:	fc 01       	movw	r30, r24
    164c:	20 83       	st	Z, r18
    164e:	8d 81       	ldd	r24, Y+5	; 0x05
    1650:	9e 81       	ldd	r25, Y+6	; 0x06
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	8d 83       	std	Y+5, r24	; 0x05
    1656:	9e 83       	std	Y+6, r25	; 0x06
    1658:	8d 81       	ldd	r24, Y+5	; 0x05
    165a:	9e 81       	ldd	r25, Y+6	; 0x06
    165c:	29 e2       	ldi	r18, 0x29	; 41
    165e:	fc 01       	movw	r30, r24
    1660:	20 83       	st	Z, r18
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	8d 83       	std	Y+5, r24	; 0x05
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	20 e3       	ldi	r18, 0x30	; 48
    1672:	fc 01       	movw	r30, r24
    1674:	20 83       	st	Z, r18
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	8d 83       	std	Y+5, r24	; 0x05
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	2a 96       	adiw	r28, 0x0a	; 10
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <xPortStartScheduler>:
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	0e 94 8f 0c 	call	0x191e	; 0x191e <prvSetupTimerInterrupt>
    169c:	a0 91 44 2c 	lds	r26, 0x2C44	; 0x802c44 <pxCurrentTCB>
    16a0:	b0 91 45 2c 	lds	r27, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    16a4:	0d 90       	ld	r0, X+
    16a6:	0d be       	out	0x3d, r0	; 61
    16a8:	0d 90       	ld	r0, X+
    16aa:	0e be       	out	0x3e, r0	; 62
    16ac:	ef 91       	pop	r30
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	bf 91       	pop	r27
    16b4:	af 91       	pop	r26
    16b6:	9f 91       	pop	r25
    16b8:	8f 91       	pop	r24
    16ba:	7f 91       	pop	r23
    16bc:	6f 91       	pop	r22
    16be:	5f 91       	pop	r21
    16c0:	4f 91       	pop	r20
    16c2:	3f 91       	pop	r19
    16c4:	2f 91       	pop	r18
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	df 90       	pop	r13
    16d0:	cf 90       	pop	r12
    16d2:	bf 90       	pop	r11
    16d4:	af 90       	pop	r10
    16d6:	9f 90       	pop	r9
    16d8:	8f 90       	pop	r8
    16da:	7f 90       	pop	r7
    16dc:	6f 90       	pop	r6
    16de:	5f 90       	pop	r5
    16e0:	4f 90       	pop	r4
    16e2:	3f 90       	pop	r3
    16e4:	2f 90       	pop	r2
    16e6:	1f 90       	pop	r1
    16e8:	0f 90       	pop	r0
    16ea:	ff 91       	pop	r31
    16ec:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    16f0:	ff 91       	pop	r31
    16f2:	ff bf       	out	0x3f, r31	; 63
    16f4:	ff 91       	pop	r31
    16f6:	08 95       	ret
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret

00001700 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1700:	ff 93       	push	r31
    1702:	ff b7       	in	r31, 0x3f	; 63
    1704:	ff 93       	push	r31
    1706:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    170a:	ff 93       	push	r31
    170c:	f8 7f       	andi	r31, 0xF8	; 248
    170e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1712:	0f 92       	push	r0
    1714:	1f 92       	push	r1
    1716:	11 24       	eor	r1, r1
    1718:	2f 92       	push	r2
    171a:	3f 92       	push	r3
    171c:	4f 92       	push	r4
    171e:	5f 92       	push	r5
    1720:	6f 92       	push	r6
    1722:	7f 92       	push	r7
    1724:	8f 92       	push	r8
    1726:	9f 92       	push	r9
    1728:	af 92       	push	r10
    172a:	bf 92       	push	r11
    172c:	cf 92       	push	r12
    172e:	df 92       	push	r13
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	2f 93       	push	r18
    173a:	3f 93       	push	r19
    173c:	4f 93       	push	r20
    173e:	5f 93       	push	r21
    1740:	6f 93       	push	r22
    1742:	7f 93       	push	r23
    1744:	8f 93       	push	r24
    1746:	9f 93       	push	r25
    1748:	af 93       	push	r26
    174a:	bf 93       	push	r27
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	ef 93       	push	r30
    1752:	a0 91 44 2c 	lds	r26, 0x2C44	; 0x802c44 <pxCurrentTCB>
    1756:	b0 91 45 2c 	lds	r27, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    175a:	0d b6       	in	r0, 0x3d	; 61
    175c:	0d 92       	st	X+, r0
    175e:	0e b6       	in	r0, 0x3e	; 62
    1760:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1762:	0e 94 19 17 	call	0x2e32	; 0x2e32 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1766:	a0 91 44 2c 	lds	r26, 0x2C44	; 0x802c44 <pxCurrentTCB>
    176a:	b0 91 45 2c 	lds	r27, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    176e:	0d 90       	ld	r0, X+
    1770:	0d be       	out	0x3d, r0	; 61
    1772:	0d 90       	ld	r0, X+
    1774:	0e be       	out	0x3e, r0	; 62
    1776:	ef 91       	pop	r30
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	bf 91       	pop	r27
    177e:	af 91       	pop	r26
    1780:	9f 91       	pop	r25
    1782:	8f 91       	pop	r24
    1784:	7f 91       	pop	r23
    1786:	6f 91       	pop	r22
    1788:	5f 91       	pop	r21
    178a:	4f 91       	pop	r20
    178c:	3f 91       	pop	r19
    178e:	2f 91       	pop	r18
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	bf 90       	pop	r11
    179e:	af 90       	pop	r10
    17a0:	9f 90       	pop	r9
    17a2:	8f 90       	pop	r8
    17a4:	7f 90       	pop	r7
    17a6:	6f 90       	pop	r6
    17a8:	5f 90       	pop	r5
    17aa:	4f 90       	pop	r4
    17ac:	3f 90       	pop	r3
    17ae:	2f 90       	pop	r2
    17b0:	1f 90       	pop	r1
    17b2:	0f 90       	pop	r0
    17b4:	ff 91       	pop	r31
    17b6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    17ba:	ff 91       	pop	r31
    17bc:	ff bf       	out	0x3f, r31	; 63
    17be:	ff 91       	pop	r31
	asm volatile ( "ret" );
    17c0:	08 95       	ret
	...

000017c4 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	1f 92       	push	r1
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	89 83       	std	Y+1, r24	; 0x01
		intTaskSwitchPending |= xSwitchRequired;					
    17d2:	80 91 06 2d 	lds	r24, 0x2D06	; 0x802d06 <intTaskSwitchPending>
    17d6:	98 2f       	mov	r25, r24
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	89 2b       	or	r24, r25
    17dc:	80 93 06 2d 	sts	0x2D06, r24	; 0x802d06 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
    17e0:	80 ea       	ldi	r24, 0xA0	; 160
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	fc 01       	movw	r30, r24
    17e6:	80 81       	ld	r24, Z
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	61 f0       	breq	.+24     	; 0x1804 <portTaskSwitchContext+0x40>
    17ec:	80 ea       	ldi	r24, 0xA0	; 160
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	fc 01       	movw	r30, r24
    17f2:	80 81       	ld	r24, Z
    17f4:	82 30       	cpi	r24, 0x02	; 2
    17f6:	31 f0       	breq	.+12     	; 0x1804 <portTaskSwitchContext+0x40>
    17f8:	80 ea       	ldi	r24, 0xA0	; 160
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	fc 01       	movw	r30, r24
    17fe:	80 81       	ld	r24, Z
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	79 f4       	brne	.+30     	; 0x1822 <portTaskSwitchContext+0x5e>
    1804:	80 91 06 2d 	lds	r24, 0x2D06	; 0x802d06 <intTaskSwitchPending>
    1808:	88 23       	and	r24, r24
    180a:	59 f0       	breq	.+22     	; 0x1822 <portTaskSwitchContext+0x5e>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
    180c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_portSetInterruptMaskFromIsr>
    1810:	18 2f       	mov	r17, r24
			intTaskSwitchPending = 0;								
    1812:	10 92 06 2d 	sts	0x2D06, r1	; 0x802d06 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
    1816:	0e 94 19 17 	call	0x2e32	; 0x2e32 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
    181a:	80 ea       	ldi	r24, 0xA0	; 160
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	fc 01       	movw	r30, r24
    1820:	12 83       	std	Z+2, r17	; 0x02
		}                                          					
	}
    1822:	00 00       	nop
    1824:	0f 90       	pop	r0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	08 95       	ret

0000182e <portTaskIncrementTick>:
	// This routine is only an indirect call to vTaskIncrementTick because
	// a local variable is necessary. Local variables cannot be used directly
	// in a naked isr because of the lack of the frame pointer.
	//
	static void portTaskIncrementTick( void )
	{
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
    1838:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_portSetInterruptMaskFromIsr>
    183c:	18 2f       	mov	r17, r24
		xTaskIncrementTick();
    183e:	0e 94 09 16 	call	0x2c12	; 0x2c12 <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
    1842:	80 ea       	ldi	r24, 0xA0	; 160
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	fc 01       	movw	r30, r24
    1848:	12 83       	std	Z+2, r17	; 0x02
	}
    184a:	00 00       	nop
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	08 95       	ret

00001854 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
    1854:	ff 93       	push	r31
    1856:	ff b7       	in	r31, 0x3f	; 63
    1858:	ff 93       	push	r31
    185a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    185e:	ff 93       	push	r31
    1860:	f8 7f       	andi	r31, 0xF8	; 248
    1862:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1866:	0f 92       	push	r0
    1868:	1f 92       	push	r1
    186a:	11 24       	eor	r1, r1
    186c:	2f 92       	push	r2
    186e:	3f 92       	push	r3
    1870:	4f 92       	push	r4
    1872:	5f 92       	push	r5
    1874:	6f 92       	push	r6
    1876:	7f 92       	push	r7
    1878:	8f 92       	push	r8
    187a:	9f 92       	push	r9
    187c:	af 92       	push	r10
    187e:	bf 92       	push	r11
    1880:	cf 92       	push	r12
    1882:	df 92       	push	r13
    1884:	ef 92       	push	r14
    1886:	ff 92       	push	r15
    1888:	0f 93       	push	r16
    188a:	1f 93       	push	r17
    188c:	2f 93       	push	r18
    188e:	3f 93       	push	r19
    1890:	4f 93       	push	r20
    1892:	5f 93       	push	r21
    1894:	6f 93       	push	r22
    1896:	7f 93       	push	r23
    1898:	8f 93       	push	r24
    189a:	9f 93       	push	r25
    189c:	af 93       	push	r26
    189e:	bf 93       	push	r27
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	ef 93       	push	r30
    18a6:	a0 91 44 2c 	lds	r26, 0x2C44	; 0x802c44 <pxCurrentTCB>
    18aa:	b0 91 45 2c 	lds	r27, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    18ae:	0d b6       	in	r0, 0x3d	; 61
    18b0:	0d 92       	st	X+, r0
    18b2:	0e b6       	in	r0, 0x3e	; 62
    18b4:	0d 92       	st	X+, r0
		portTaskIncrementTick();
    18b6:	0e 94 17 0c 	call	0x182e	; 0x182e <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <portTaskSwitchContext>
    18c0:	a0 91 44 2c 	lds	r26, 0x2C44	; 0x802c44 <pxCurrentTCB>
    18c4:	b0 91 45 2c 	lds	r27, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    18c8:	0d 90       	ld	r0, X+
    18ca:	0d be       	out	0x3d, r0	; 61
    18cc:	0d 90       	ld	r0, X+
    18ce:	0e be       	out	0x3e, r0	; 62
    18d0:	ef 91       	pop	r30
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	bf 91       	pop	r27
    18d8:	af 91       	pop	r26
    18da:	9f 91       	pop	r25
    18dc:	8f 91       	pop	r24
    18de:	7f 91       	pop	r23
    18e0:	6f 91       	pop	r22
    18e2:	5f 91       	pop	r21
    18e4:	4f 91       	pop	r20
    18e6:	3f 91       	pop	r19
    18e8:	2f 91       	pop	r18
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	df 90       	pop	r13
    18f4:	cf 90       	pop	r12
    18f6:	bf 90       	pop	r11
    18f8:	af 90       	pop	r10
    18fa:	9f 90       	pop	r9
    18fc:	8f 90       	pop	r8
    18fe:	7f 90       	pop	r7
    1900:	6f 90       	pop	r6
    1902:	5f 90       	pop	r5
    1904:	4f 90       	pop	r4
    1906:	3f 90       	pop	r3
    1908:	2f 90       	pop	r2
    190a:	1f 90       	pop	r1
    190c:	0f 90       	pop	r0
    190e:	ff 91       	pop	r31
    1910:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1914:	ff 91       	pop	r31
    1916:	ff bf       	out	0x3f, r31	; 63
    1918:	ff 91       	pop	r31
    191a:	18 95       	reti
	...

0000191e <prvSetupTimerInterrupt>:
//-----------------------------------------------------------
//
// Setup of 16bit timer C0 to generate a tick interrupt in case of overflow.
//
static void prvSetupTimerInterrupt( void )
{
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	00 d0       	rcall	.+0      	; 0x1924 <prvSetupTimerInterrupt+0x6>
    1924:	1f 92       	push	r1
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62

	unsigned portLONG ulOvfMatch;

	ulOvfMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	9d e7       	ldi	r25, 0x7D	; 125
    192e:	a0 e0       	ldi	r26, 0x00	; 0
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	9a 83       	std	Y+2, r25	; 0x02
    1936:	ab 83       	std	Y+3, r26	; 0x03
    1938:	bc 83       	std	Y+4, r27	; 0x04

	// We only have 16bits so have to scale to get our required tick rate.
	ulOvfMatch /= portCLOCK_PRESCALER_TIMER0;
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	9a 81       	ldd	r25, Y+2	; 0x02
    193e:	ab 81       	ldd	r26, Y+3	; 0x03
    1940:	bc 81       	ldd	r27, Y+4	; 0x04
    1942:	68 94       	set
    1944:	15 f8       	bld	r1, 5
    1946:	b6 95       	lsr	r27
    1948:	a7 95       	ror	r26
    194a:	97 95       	ror	r25
    194c:	87 95       	ror	r24
    194e:	16 94       	lsr	r1
    1950:	d1 f7       	brne	.-12     	; 0x1946 <prvSetupTimerInterrupt+0x28>
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	ab 83       	std	Y+3, r26	; 0x03
    1958:	bc 83       	std	Y+4, r27	; 0x04

	// Adjust for correct value. (because overflow clear if CNT > PER)
	ulOvfMatch -= ( unsigned portLONG ) 1;
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	ab 81       	ldd	r26, Y+3	; 0x03
    1960:	bc 81       	ldd	r27, Y+4	; 0x04
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	a1 09       	sbc	r26, r1
    1966:	b1 09       	sbc	r27, r1
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	9a 83       	std	Y+2, r25	; 0x02
    196c:	ab 83       	std	Y+3, r26	; 0x03
    196e:	bc 83       	std	Y+4, r27	; 0x04

	// Setup overflow value
	TC_SetPeriod( &TCC0, ulOvfMatch);
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	98 e0       	ldi	r25, 0x08	; 8
    1974:	29 81       	ldd	r18, Y+1	; 0x01
    1976:	3a 81       	ldd	r19, Y+2	; 0x02
    1978:	fc 01       	movw	r30, r24
    197a:	26 a3       	std	Z+38, r18	; 0x26
    197c:	37 a3       	std	Z+39, r19	; 0x27
		
	// Setup clock source and compare match behaviour.
	TC0_ConfigClockSource( &TCC0, TC_CLKSEL_DIV64_gc);
    197e:	65 e0       	ldi	r22, 0x05	; 5
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	98 e0       	ldi	r25, 0x08	; 8
    1984:	0e 94 bc 03 	call	0x778	; 0x778 <TC0_ConfigClockSource>

	// Enable the interrupt - this is okay as interrupts are currently globally disabled.
	// The tick interrupt may run in one of the three levels.
#if   configKERNEL_INTERRUPT_PRIORITY == 0
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_LO_gc);	//low interrupt priority
    1988:	61 e0       	ldi	r22, 0x01	; 1
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	98 e0       	ldi	r25, 0x08	; 8
    198e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <TC0_SetOverflowIntLevel>
#elif configKERNEL_INTERRUPT_PRIORITY == 1
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_MED_gc);	//medium interrupt priority
#elif configKERNEL_INTERRUPT_PRIORITY == 2
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_HI_gc);	//high interrupt priority
#endif
}
    1992:	00 00       	nop
    1994:	24 96       	adiw	r28, 0x04	; 4
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <xQueueGenericReset>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	25 97       	sbiw	r28, 0x05	; 5
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	8b 83       	std	Y+3, r24	; 0x03
    19b0:	9c 83       	std	Y+4, r25	; 0x04
    19b2:	6d 83       	std	Y+5, r22	; 0x05
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    19c0:	ff 93       	push	r31
    19c2:	f8 7f       	andi	r31, 0xF8	; 248
    19c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	9a 81       	ldd	r25, Y+2	; 0x02
    19cc:	fc 01       	movw	r30, r24
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	29 81       	ldd	r18, Y+1	; 0x01
    19d4:	3a 81       	ldd	r19, Y+2	; 0x02
    19d6:	f9 01       	movw	r30, r18
    19d8:	27 8d       	ldd	r18, Z+31	; 0x1f
    19da:	42 2f       	mov	r20, r18
    19dc:	50 e0       	ldi	r21, 0x00	; 0
    19de:	29 81       	ldd	r18, Y+1	; 0x01
    19e0:	3a 81       	ldd	r19, Y+2	; 0x02
    19e2:	f9 01       	movw	r30, r18
    19e4:	20 a1       	ldd	r18, Z+32	; 0x20
    19e6:	22 2f       	mov	r18, r18
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	42 9f       	mul	r20, r18
    19ec:	b0 01       	movw	r22, r0
    19ee:	43 9f       	mul	r20, r19
    19f0:	70 0d       	add	r23, r0
    19f2:	52 9f       	mul	r21, r18
    19f4:	70 0d       	add	r23, r0
    19f6:	11 24       	eor	r1, r1
    19f8:	9b 01       	movw	r18, r22
    19fa:	28 0f       	add	r18, r24
    19fc:	39 1f       	adc	r19, r25
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	fc 01       	movw	r30, r24
    1a04:	22 83       	std	Z+2, r18	; 0x02
    1a06:	33 83       	std	Z+3, r19	; 0x03
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	16 8e       	std	Z+30, r1	; 0x1e
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	9a 81       	ldd	r25, Y+2	; 0x02
    1a14:	fc 01       	movw	r30, r24
    1a16:	20 81       	ld	r18, Z
    1a18:	31 81       	ldd	r19, Z+1	; 0x01
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	fc 01       	movw	r30, r24
    1a20:	24 83       	std	Z+4, r18	; 0x04
    1a22:	35 83       	std	Z+5, r19	; 0x05
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	9a 81       	ldd	r25, Y+2	; 0x02
    1a28:	fc 01       	movw	r30, r24
    1a2a:	80 81       	ld	r24, Z
    1a2c:	91 81       	ldd	r25, Z+1	; 0x01
    1a2e:	29 81       	ldd	r18, Y+1	; 0x01
    1a30:	3a 81       	ldd	r19, Y+2	; 0x02
    1a32:	f9 01       	movw	r30, r18
    1a34:	27 8d       	ldd	r18, Z+31	; 0x1f
    1a36:	22 2f       	mov	r18, r18
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	a9 01       	movw	r20, r18
    1a3c:	41 50       	subi	r20, 0x01	; 1
    1a3e:	51 09       	sbc	r21, r1
    1a40:	29 81       	ldd	r18, Y+1	; 0x01
    1a42:	3a 81       	ldd	r19, Y+2	; 0x02
    1a44:	f9 01       	movw	r30, r18
    1a46:	20 a1       	ldd	r18, Z+32	; 0x20
    1a48:	22 2f       	mov	r18, r18
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	42 9f       	mul	r20, r18
    1a4e:	b0 01       	movw	r22, r0
    1a50:	43 9f       	mul	r20, r19
    1a52:	70 0d       	add	r23, r0
    1a54:	52 9f       	mul	r21, r18
    1a56:	70 0d       	add	r23, r0
    1a58:	11 24       	eor	r1, r1
    1a5a:	9b 01       	movw	r18, r22
    1a5c:	28 0f       	add	r18, r24
    1a5e:	39 1f       	adc	r19, r25
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	9a 81       	ldd	r25, Y+2	; 0x02
    1a64:	fc 01       	movw	r30, r24
    1a66:	26 83       	std	Z+6, r18	; 0x06
    1a68:	37 83       	std	Z+7, r19	; 0x07
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	2f ef       	ldi	r18, 0xFF	; 255
    1a70:	fc 01       	movw	r30, r24
    1a72:	21 a3       	std	Z+33, r18	; 0x21
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	9a 81       	ldd	r25, Y+2	; 0x02
    1a78:	2f ef       	ldi	r18, 0xFF	; 255
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	22 a3       	std	Z+34, r18	; 0x22
    1a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a80:	88 23       	and	r24, r24
    1a82:	81 f4       	brne	.+32     	; 0x1aa4 <xQueueGenericReset+0x104>
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	9a 81       	ldd	r25, Y+2	; 0x02
    1a88:	fc 01       	movw	r30, r24
    1a8a:	80 85       	ldd	r24, Z+8	; 0x08
    1a8c:	88 23       	and	r24, r24
    1a8e:	a1 f0       	breq	.+40     	; 0x1ab8 <xQueueGenericReset+0x118>
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	08 96       	adiw	r24, 0x08	; 8
    1a96:	0e 94 84 18 	call	0x3108	; 0x3108 <xTaskRemoveFromEventList>
    1a9a:	88 23       	and	r24, r24
    1a9c:	69 f0       	breq	.+26     	; 0x1ab8 <xQueueGenericReset+0x118>
    1a9e:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1aa2:	0a c0       	rjmp	.+20     	; 0x1ab8 <xQueueGenericReset+0x118>
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa8:	08 96       	adiw	r24, 0x08	; 8
    1aaa:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	43 96       	adiw	r24, 0x13	; 19
    1ab4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    1ab8:	ff 91       	pop	r31
    1aba:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	25 96       	adiw	r28, 0x05	; 5
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	08 95       	ret

00001acc <xQueueGenericCreate>:
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	29 97       	sbiw	r28, 0x09	; 9
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	8f 83       	std	Y+7, r24	; 0x07
    1ae0:	68 87       	std	Y+8, r22	; 0x08
    1ae2:	49 87       	std	Y+9, r20	; 0x09
    1ae4:	88 85       	ldd	r24, Y+8	; 0x08
    1ae6:	88 23       	and	r24, r24
    1ae8:	19 f4       	brne	.+6      	; 0x1af0 <xQueueGenericCreate+0x24>
    1aea:	19 82       	std	Y+1, r1	; 0x01
    1aec:	1a 82       	std	Y+2, r1	; 0x02
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <xQueueGenericCreate+0x42>
    1af0:	8f 81       	ldd	r24, Y+7	; 0x07
    1af2:	48 2f       	mov	r20, r24
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	88 85       	ldd	r24, Y+8	; 0x08
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	42 9f       	mul	r20, r18
    1afe:	c0 01       	movw	r24, r0
    1b00:	43 9f       	mul	r20, r19
    1b02:	90 0d       	add	r25, r0
    1b04:	52 9f       	mul	r21, r18
    1b06:	90 0d       	add	r25, r0
    1b08:	11 24       	eor	r1, r1
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	85 96       	adiw	r24, 0x25	; 37
    1b14:	0e 94 97 07 	call	0xf2e	; 0xf2e <pvPortMalloc>
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	89 2b       	or	r24, r25
    1b22:	81 f0       	breq	.+32     	; 0x1b44 <xQueueGenericCreate+0x78>
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	85 96       	adiw	r24, 0x25	; 37
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b30:	3c 81       	ldd	r19, Y+4	; 0x04
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	89 01       	movw	r16, r18
    1b38:	29 85       	ldd	r18, Y+9	; 0x09
    1b3a:	ac 01       	movw	r20, r24
    1b3c:	68 85       	ldd	r22, Y+8	; 0x08
    1b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b40:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <prvInitialiseNewQueue>
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	29 96       	adiw	r28, 0x09	; 9
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	08 95       	ret

00001b58 <prvInitialiseNewQueue>:
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	27 97       	sbiw	r28, 0x07	; 7
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	6a 83       	std	Y+2, r22	; 0x02
    1b6e:	4b 83       	std	Y+3, r20	; 0x03
    1b70:	5c 83       	std	Y+4, r21	; 0x04
    1b72:	2d 83       	std	Y+5, r18	; 0x05
    1b74:	0e 83       	std	Y+6, r16	; 0x06
    1b76:	1f 83       	std	Y+7, r17	; 0x07
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	88 23       	and	r24, r24
    1b7c:	41 f4       	brne	.+16     	; 0x1b8e <prvInitialiseNewQueue+0x36>
    1b7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b80:	9f 81       	ldd	r25, Y+7	; 0x07
    1b82:	2e 81       	ldd	r18, Y+6	; 0x06
    1b84:	3f 81       	ldd	r19, Y+7	; 0x07
    1b86:	fc 01       	movw	r30, r24
    1b88:	20 83       	st	Z, r18
    1b8a:	31 83       	std	Z+1, r19	; 0x01
    1b8c:	07 c0       	rjmp	.+14     	; 0x1b9c <prvInitialiseNewQueue+0x44>
    1b8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b90:	9f 81       	ldd	r25, Y+7	; 0x07
    1b92:	2b 81       	ldd	r18, Y+3	; 0x03
    1b94:	3c 81       	ldd	r19, Y+4	; 0x04
    1b96:	fc 01       	movw	r30, r24
    1b98:	20 83       	st	Z, r18
    1b9a:	31 83       	std	Z+1, r19	; 0x01
    1b9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba0:	29 81       	ldd	r18, Y+1	; 0x01
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	27 8f       	std	Z+31, r18	; 0x1f
    1ba6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba8:	9f 81       	ldd	r25, Y+7	; 0x07
    1baa:	2a 81       	ldd	r18, Y+2	; 0x02
    1bac:	fc 01       	movw	r30, r24
    1bae:	20 a3       	std	Z+32, r18	; 0x20
    1bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <xQueueGenericReset>
    1bba:	8e 81       	ldd	r24, Y+6	; 0x06
    1bbc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bbe:	2d 81       	ldd	r18, Y+5	; 0x05
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	24 a3       	std	Z+36, r18	; 0x24
    1bc4:	00 00       	nop
    1bc6:	27 96       	adiw	r28, 0x07	; 7
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	08 95       	ret

00001bd6 <xQueueGenericSend>:
    1bd6:	0f 93       	push	r16
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	62 97       	sbiw	r28, 0x12	; 18
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	8a 87       	std	Y+10, r24	; 0x0a
    1be8:	9b 87       	std	Y+11, r25	; 0x0b
    1bea:	6c 87       	std	Y+12, r22	; 0x0c
    1bec:	7d 87       	std	Y+13, r23	; 0x0d
    1bee:	2e 87       	std	Y+14, r18	; 0x0e
    1bf0:	3f 87       	std	Y+15, r19	; 0x0f
    1bf2:	48 8b       	std	Y+16, r20	; 0x10
    1bf4:	59 8b       	std	Y+17, r21	; 0x11
    1bf6:	0a 8b       	std	Y+18, r16	; 0x12
    1bf8:	19 82       	std	Y+1, r1	; 0x01
    1bfa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bfc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bfe:	8a 83       	std	Y+2, r24	; 0x02
    1c00:	9b 83       	std	Y+3, r25	; 0x03
    1c02:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c06:	ff 93       	push	r31
    1c08:	f8 7f       	andi	r31, 0xF8	; 248
    1c0a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	9b 81       	ldd	r25, Y+3	; 0x03
    1c12:	fc 01       	movw	r30, r24
    1c14:	26 8d       	ldd	r18, Z+30	; 0x1e
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1c1e:	28 17       	cp	r18, r24
    1c20:	18 f0       	brcs	.+6      	; 0x1c28 <xQueueGenericSend+0x52>
    1c22:	8a 89       	ldd	r24, Y+18	; 0x12
    1c24:	82 30       	cpi	r24, 0x02	; 2
    1c26:	19 f5       	brne	.+70     	; 0x1c6e <xQueueGenericSend+0x98>
    1c28:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c2a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c30:	4a 89       	ldd	r20, Y+18	; 0x12
    1c32:	b9 01       	movw	r22, r18
    1c34:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <prvCopyDataToQueue>
    1c38:	8c 83       	std	Y+4, r24	; 0x04
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3e:	fc 01       	movw	r30, r24
    1c40:	83 89       	ldd	r24, Z+19	; 0x13
    1c42:	88 23       	and	r24, r24
    1c44:	51 f0       	breq	.+20     	; 0x1c5a <xQueueGenericSend+0x84>
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4a:	43 96       	adiw	r24, 0x13	; 19
    1c4c:	0e 94 84 18 	call	0x3108	; 0x3108 <xTaskRemoveFromEventList>
    1c50:	88 23       	and	r24, r24
    1c52:	41 f0       	breq	.+16     	; 0x1c64 <xQueueGenericSend+0x8e>
    1c54:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1c58:	05 c0       	rjmp	.+10     	; 0x1c64 <xQueueGenericSend+0x8e>
    1c5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5c:	88 23       	and	r24, r24
    1c5e:	11 f0       	breq	.+4      	; 0x1c64 <xQueueGenericSend+0x8e>
    1c60:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1c64:	ff 91       	pop	r31
    1c66:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	6f c0       	rjmp	.+222    	; 0x1d4c <xQueueGenericSend+0x176>
    1c6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c70:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c72:	a8 89       	ldd	r26, Y+16	; 0x10
    1c74:	b9 89       	ldd	r27, Y+17	; 0x11
    1c76:	89 2b       	or	r24, r25
    1c78:	8a 2b       	or	r24, r26
    1c7a:	8b 2b       	or	r24, r27
    1c7c:	29 f4       	brne	.+10     	; 0x1c88 <xQueueGenericSend+0xb2>
    1c7e:	ff 91       	pop	r31
    1c80:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	62 c0       	rjmp	.+196    	; 0x1d4c <xQueueGenericSend+0x176>
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	88 23       	and	r24, r24
    1c8c:	31 f4       	brne	.+12     	; 0x1c9a <xQueueGenericSend+0xc4>
    1c8e:	ce 01       	movw	r24, r28
    1c90:	05 96       	adiw	r24, 0x05	; 5
    1c92:	0e 94 4f 19 	call	0x329e	; 0x329e <vTaskInternalSetTimeOutState>
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	ff 91       	pop	r31
    1c9c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ca0:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <vTaskSuspendAll>
    1ca4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ca8:	ff 93       	push	r31
    1caa:	f8 7f       	andi	r31, 0xF8	; 248
    1cac:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	81 a1       	ldd	r24, Z+33	; 0x21
    1cb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1cba:	21 f4       	brne	.+8      	; 0x1cc4 <xQueueGenericSend+0xee>
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	11 a2       	std	Z+33, r1	; 0x21
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc8:	fc 01       	movw	r30, r24
    1cca:	82 a1       	ldd	r24, Z+34	; 0x22
    1ccc:	8f 3f       	cpi	r24, 0xFF	; 255
    1cce:	21 f4       	brne	.+8      	; 0x1cd8 <xQueueGenericSend+0x102>
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	12 a2       	std	Z+34, r1	; 0x22
    1cd8:	ff 91       	pop	r31
    1cda:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1cde:	9e 01       	movw	r18, r28
    1ce0:	22 5f       	subi	r18, 0xF2	; 242
    1ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	05 96       	adiw	r24, 0x05	; 5
    1ce8:	b9 01       	movw	r22, r18
    1cea:	0e 94 72 19 	call	0x32e4	; 0x32e4 <xTaskCheckForTimeOut>
    1cee:	88 23       	and	r24, r24
    1cf0:	31 f5       	brne	.+76     	; 0x1d3e <xQueueGenericSend+0x168>
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf6:	0e 94 74 11 	call	0x22e8	; 0x22e8 <prvIsQueueFull>
    1cfa:	88 23       	and	r24, r24
    1cfc:	c9 f0       	breq	.+50     	; 0x1d30 <xQueueGenericSend+0x15a>
    1cfe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d00:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d02:	a8 89       	ldd	r26, Y+16	; 0x10
    1d04:	b9 89       	ldd	r27, Y+17	; 0x11
    1d06:	2a 81       	ldd	r18, Y+2	; 0x02
    1d08:	3b 81       	ldd	r19, Y+3	; 0x03
    1d0a:	28 5f       	subi	r18, 0xF8	; 248
    1d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0e:	ac 01       	movw	r20, r24
    1d10:	bd 01       	movw	r22, r26
    1d12:	c9 01       	movw	r24, r18
    1d14:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <vTaskPlaceOnEventList>
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1d20:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskResumeAll>
    1d24:	88 23       	and	r24, r24
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <xQueueGenericSend+0x154>
    1d28:	6c cf       	rjmp	.-296    	; 0x1c02 <xQueueGenericSend+0x2c>
    1d2a:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1d2e:	69 cf       	rjmp	.-302    	; 0x1c02 <xQueueGenericSend+0x2c>
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	9b 81       	ldd	r25, Y+3	; 0x03
    1d34:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1d38:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskResumeAll>
    1d3c:	62 cf       	rjmp	.-316    	; 0x1c02 <xQueueGenericSend+0x2c>
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	9b 81       	ldd	r25, Y+3	; 0x03
    1d42:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1d46:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskResumeAll>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	62 96       	adiw	r28, 0x12	; 18
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	0f 91       	pop	r16
    1d58:	08 95       	ret

00001d5a <xQueueGenericSendFromISR>:
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	2c 97       	sbiw	r28, 0x0c	; 12
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	8e 83       	std	Y+6, r24	; 0x06
    1d6a:	9f 83       	std	Y+7, r25	; 0x07
    1d6c:	68 87       	std	Y+8, r22	; 0x08
    1d6e:	79 87       	std	Y+9, r23	; 0x09
    1d70:	4a 87       	std	Y+10, r20	; 0x0a
    1d72:	5b 87       	std	Y+11, r21	; 0x0b
    1d74:	2c 87       	std	Y+12, r18	; 0x0c
    1d76:	8e 81       	ldd	r24, Y+6	; 0x06
    1d78:	9f 81       	ldd	r25, Y+7	; 0x07
    1d7a:	8a 83       	std	Y+2, r24	; 0x02
    1d7c:	9b 83       	std	Y+3, r25	; 0x03
    1d7e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_portSetInterruptMaskFromIsr>
    1d82:	8c 83       	std	Y+4, r24	; 0x04
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	9b 81       	ldd	r25, Y+3	; 0x03
    1d88:	fc 01       	movw	r30, r24
    1d8a:	26 8d       	ldd	r18, Z+30	; 0x1e
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d90:	fc 01       	movw	r30, r24
    1d92:	87 8d       	ldd	r24, Z+31	; 0x1f
    1d94:	28 17       	cp	r18, r24
    1d96:	18 f0       	brcs	.+6      	; 0x1d9e <xQueueGenericSendFromISR+0x44>
    1d98:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d9a:	82 30       	cpi	r24, 0x02	; 2
    1d9c:	89 f5       	brne	.+98     	; 0x1e00 <xQueueGenericSendFromISR+0xa6>
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	9b 81       	ldd	r25, Y+3	; 0x03
    1da2:	fc 01       	movw	r30, r24
    1da4:	82 a1       	ldd	r24, Z+34	; 0x22
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	28 85       	ldd	r18, Y+8	; 0x08
    1daa:	39 85       	ldd	r19, Y+9	; 0x09
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	9b 81       	ldd	r25, Y+3	; 0x03
    1db0:	4c 85       	ldd	r20, Y+12	; 0x0c
    1db2:	b9 01       	movw	r22, r18
    1db4:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <prvCopyDataToQueue>
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	8f 3f       	cpi	r24, 0xFF	; 255
    1dbc:	b9 f4       	brne	.+46     	; 0x1dec <xQueueGenericSendFromISR+0x92>
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	83 89       	ldd	r24, Z+19	; 0x13
    1dc6:	88 23       	and	r24, r24
    1dc8:	c1 f0       	breq	.+48     	; 0x1dfa <xQueueGenericSendFromISR+0xa0>
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dce:	43 96       	adiw	r24, 0x13	; 19
    1dd0:	0e 94 84 18 	call	0x3108	; 0x3108 <xTaskRemoveFromEventList>
    1dd4:	88 23       	and	r24, r24
    1dd6:	89 f0       	breq	.+34     	; 0x1dfa <xQueueGenericSendFromISR+0xa0>
    1dd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ddc:	89 2b       	or	r24, r25
    1dde:	69 f0       	breq	.+26     	; 0x1dfa <xQueueGenericSendFromISR+0xa0>
    1de0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1de2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1de4:	21 e0       	ldi	r18, 0x01	; 1
    1de6:	fc 01       	movw	r30, r24
    1de8:	20 83       	st	Z, r18
    1dea:	07 c0       	rjmp	.+14     	; 0x1dfa <xQueueGenericSendFromISR+0xa0>
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	8f 5f       	subi	r24, 0xFF	; 255
    1df0:	28 2f       	mov	r18, r24
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	9b 81       	ldd	r25, Y+3	; 0x03
    1df6:	fc 01       	movw	r30, r24
    1df8:	22 a3       	std	Z+34, r18	; 0x22
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <xQueueGenericSendFromISR+0xa8>
    1e00:	19 82       	std	Y+1, r1	; 0x01
    1e02:	80 ea       	ldi	r24, 0xA0	; 160
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	2c 81       	ldd	r18, Y+4	; 0x04
    1e08:	fc 01       	movw	r30, r24
    1e0a:	22 83       	std	Z+2, r18	; 0x02
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	2c 96       	adiw	r28, 0x0c	; 12
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	08 95       	ret

00001e1a <xQueueReceive>:
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	61 97       	sbiw	r28, 0x11	; 17
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	8a 87       	std	Y+10, r24	; 0x0a
    1e2a:	9b 87       	std	Y+11, r25	; 0x0b
    1e2c:	6c 87       	std	Y+12, r22	; 0x0c
    1e2e:	7d 87       	std	Y+13, r23	; 0x0d
    1e30:	2e 87       	std	Y+14, r18	; 0x0e
    1e32:	3f 87       	std	Y+15, r19	; 0x0f
    1e34:	48 8b       	std	Y+16, r20	; 0x10
    1e36:	59 8b       	std	Y+17, r21	; 0x11
    1e38:	19 82       	std	Y+1, r1	; 0x01
    1e3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e3e:	8a 83       	std	Y+2, r24	; 0x02
    1e40:	9b 83       	std	Y+3, r25	; 0x03
    1e42:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e46:	ff 93       	push	r31
    1e48:	f8 7f       	andi	r31, 0xF8	; 248
    1e4a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	9b 81       	ldd	r25, Y+3	; 0x03
    1e52:	fc 01       	movw	r30, r24
    1e54:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e56:	8c 83       	std	Y+4, r24	; 0x04
    1e58:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5a:	88 23       	and	r24, r24
    1e5c:	11 f1       	breq	.+68     	; 0x1ea2 <xQueueReceive+0x88>
    1e5e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e60:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	9b 81       	ldd	r25, Y+3	; 0x03
    1e66:	b9 01       	movw	r22, r18
    1e68:	0e 94 9e 10 	call	0x213c	; 0x213c <prvCopyDataFromQueue>
    1e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6e:	2f ef       	ldi	r18, 0xFF	; 255
    1e70:	28 0f       	add	r18, r24
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	9b 81       	ldd	r25, Y+3	; 0x03
    1e76:	fc 01       	movw	r30, r24
    1e78:	26 8f       	std	Z+30, r18	; 0x1e
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7e:	fc 01       	movw	r30, r24
    1e80:	80 85       	ldd	r24, Z+8	; 0x08
    1e82:	88 23       	and	r24, r24
    1e84:	49 f0       	breq	.+18     	; 0x1e98 <xQueueReceive+0x7e>
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8a:	08 96       	adiw	r24, 0x08	; 8
    1e8c:	0e 94 84 18 	call	0x3108	; 0x3108 <xTaskRemoveFromEventList>
    1e90:	88 23       	and	r24, r24
    1e92:	11 f0       	breq	.+4      	; 0x1e98 <xQueueReceive+0x7e>
    1e94:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1e98:	ff 91       	pop	r31
    1e9a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	76 c0       	rjmp	.+236    	; 0x1f8e <xQueueReceive+0x174>
    1ea2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ea4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ea6:	a8 89       	ldd	r26, Y+16	; 0x10
    1ea8:	b9 89       	ldd	r27, Y+17	; 0x11
    1eaa:	89 2b       	or	r24, r25
    1eac:	8a 2b       	or	r24, r26
    1eae:	8b 2b       	or	r24, r27
    1eb0:	29 f4       	brne	.+10     	; 0x1ebc <xQueueReceive+0xa2>
    1eb2:	ff 91       	pop	r31
    1eb4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	69 c0       	rjmp	.+210    	; 0x1f8e <xQueueReceive+0x174>
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	88 23       	and	r24, r24
    1ec0:	31 f4       	brne	.+12     	; 0x1ece <xQueueReceive+0xb4>
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	05 96       	adiw	r24, 0x05	; 5
    1ec6:	0e 94 4f 19 	call	0x329e	; 0x329e <vTaskInternalSetTimeOutState>
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	ff 91       	pop	r31
    1ed0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ed4:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <vTaskSuspendAll>
    1ed8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1edc:	ff 93       	push	r31
    1ede:	f8 7f       	andi	r31, 0xF8	; 248
    1ee0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	fc 01       	movw	r30, r24
    1eea:	81 a1       	ldd	r24, Z+33	; 0x21
    1eec:	8f 3f       	cpi	r24, 0xFF	; 255
    1eee:	21 f4       	brne	.+8      	; 0x1ef8 <xQueueReceive+0xde>
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	11 a2       	std	Z+33, r1	; 0x21
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	9b 81       	ldd	r25, Y+3	; 0x03
    1efc:	fc 01       	movw	r30, r24
    1efe:	82 a1       	ldd	r24, Z+34	; 0x22
    1f00:	8f 3f       	cpi	r24, 0xFF	; 255
    1f02:	21 f4       	brne	.+8      	; 0x1f0c <xQueueReceive+0xf2>
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	9b 81       	ldd	r25, Y+3	; 0x03
    1f08:	fc 01       	movw	r30, r24
    1f0a:	12 a2       	std	Z+34, r1	; 0x22
    1f0c:	ff 91       	pop	r31
    1f0e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f12:	9e 01       	movw	r18, r28
    1f14:	22 5f       	subi	r18, 0xF2	; 242
    1f16:	3f 4f       	sbci	r19, 0xFF	; 255
    1f18:	ce 01       	movw	r24, r28
    1f1a:	05 96       	adiw	r24, 0x05	; 5
    1f1c:	b9 01       	movw	r22, r18
    1f1e:	0e 94 72 19 	call	0x32e4	; 0x32e4 <xTaskCheckForTimeOut>
    1f22:	88 23       	and	r24, r24
    1f24:	31 f5       	brne	.+76     	; 0x1f72 <xQueueReceive+0x158>
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <prvIsQueueEmpty>
    1f2e:	88 23       	and	r24, r24
    1f30:	c9 f0       	breq	.+50     	; 0x1f64 <xQueueReceive+0x14a>
    1f32:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f34:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f36:	a8 89       	ldd	r26, Y+16	; 0x10
    1f38:	b9 89       	ldd	r27, Y+17	; 0x11
    1f3a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f3c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f3e:	2d 5e       	subi	r18, 0xED	; 237
    1f40:	3f 4f       	sbci	r19, 0xFF	; 255
    1f42:	ac 01       	movw	r20, r24
    1f44:	bd 01       	movw	r22, r26
    1f46:	c9 01       	movw	r24, r18
    1f48:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <vTaskPlaceOnEventList>
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f50:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1f54:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskResumeAll>
    1f58:	88 23       	and	r24, r24
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <xQueueReceive+0x144>
    1f5c:	72 cf       	rjmp	.-284    	; 0x1e42 <xQueueReceive+0x28>
    1f5e:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1f62:	6f cf       	rjmp	.-290    	; 0x1e42 <xQueueReceive+0x28>
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	9b 81       	ldd	r25, Y+3	; 0x03
    1f68:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1f6c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskResumeAll>
    1f70:	68 cf       	rjmp	.-304    	; 0x1e42 <xQueueReceive+0x28>
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	9b 81       	ldd	r25, Y+3	; 0x03
    1f76:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1f7a:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskResumeAll>
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	9b 81       	ldd	r25, Y+3	; 0x03
    1f82:	0e 94 53 11 	call	0x22a6	; 0x22a6 <prvIsQueueEmpty>
    1f86:	88 23       	and	r24, r24
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <xQueueReceive+0x172>
    1f8a:	5b cf       	rjmp	.-330    	; 0x1e42 <xQueueReceive+0x28>
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	61 96       	adiw	r28, 0x11	; 17
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	08 95       	ret

00001f9a <uxQueueMessagesWaiting>:
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <uxQueueMessagesWaiting+0x6>
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	8a 83       	std	Y+2, r24	; 0x02
    1fa6:	9b 83       	std	Y+3, r25	; 0x03
    1fa8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1fac:	ff 93       	push	r31
    1fae:	f8 7f       	andi	r31, 0xF8	; 248
    1fb0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb8:	fc 01       	movw	r30, r24
    1fba:	86 8d       	ldd	r24, Z+30	; 0x1e
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	ff 91       	pop	r31
    1fc0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	23 96       	adiw	r28, 0x03	; 3
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	08 95       	ret

00001fd2 <prvCopyDataToQueue>:
    1fd2:	cf 93       	push	r28
    1fd4:	df 93       	push	r29
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	27 97       	sbiw	r28, 0x07	; 7
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	8b 83       	std	Y+3, r24	; 0x03
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	6d 83       	std	Y+5, r22	; 0x05
    1fe6:	7e 83       	std	Y+6, r23	; 0x06
    1fe8:	4f 83       	std	Y+7, r20	; 0x07
    1fea:	1a 82       	std	Y+2, r1	; 0x02
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	80 a1       	ldd	r24, Z+32	; 0x20
    1ffe:	88 23       	and	r24, r24
    2000:	09 f4       	brne	.+2      	; 0x2004 <prvCopyDataToQueue+0x32>
    2002:	8e c0       	rjmp	.+284    	; 0x2120 <prvCopyDataToQueue+0x14e>
    2004:	8f 81       	ldd	r24, Y+7	; 0x07
    2006:	88 23       	and	r24, r24
    2008:	d9 f5       	brne	.+118    	; 0x2080 <prvCopyDataToQueue+0xae>
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	9c 81       	ldd	r25, Y+4	; 0x04
    200e:	fc 01       	movw	r30, r24
    2010:	80 a1       	ldd	r24, Z+32	; 0x20
    2012:	48 2f       	mov	r20, r24
    2014:	50 e0       	ldi	r21, 0x00	; 0
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	fc 01       	movw	r30, r24
    201c:	84 81       	ldd	r24, Z+4	; 0x04
    201e:	95 81       	ldd	r25, Z+5	; 0x05
    2020:	2d 81       	ldd	r18, Y+5	; 0x05
    2022:	3e 81       	ldd	r19, Y+6	; 0x06
    2024:	b9 01       	movw	r22, r18
    2026:	0e 94 94 33 	call	0x6728	; 0x6728 <memcpy>
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	fc 01       	movw	r30, r24
    2030:	24 81       	ldd	r18, Z+4	; 0x04
    2032:	35 81       	ldd	r19, Z+5	; 0x05
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	fc 01       	movw	r30, r24
    203a:	80 a1       	ldd	r24, Z+32	; 0x20
    203c:	88 2f       	mov	r24, r24
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	28 0f       	add	r18, r24
    2042:	39 1f       	adc	r19, r25
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	fc 01       	movw	r30, r24
    204a:	24 83       	std	Z+4, r18	; 0x04
    204c:	35 83       	std	Z+5, r19	; 0x05
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	9c 81       	ldd	r25, Y+4	; 0x04
    2052:	fc 01       	movw	r30, r24
    2054:	24 81       	ldd	r18, Z+4	; 0x04
    2056:	35 81       	ldd	r19, Z+5	; 0x05
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	fc 01       	movw	r30, r24
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	28 17       	cp	r18, r24
    2064:	39 07       	cpc	r19, r25
    2066:	08 f4       	brcc	.+2      	; 0x206a <prvCopyDataToQueue+0x98>
    2068:	5b c0       	rjmp	.+182    	; 0x2120 <prvCopyDataToQueue+0x14e>
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	fc 01       	movw	r30, r24
    2070:	20 81       	ld	r18, Z
    2072:	31 81       	ldd	r19, Z+1	; 0x01
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	9c 81       	ldd	r25, Y+4	; 0x04
    2078:	fc 01       	movw	r30, r24
    207a:	24 83       	std	Z+4, r18	; 0x04
    207c:	35 83       	std	Z+5, r19	; 0x05
    207e:	50 c0       	rjmp	.+160    	; 0x2120 <prvCopyDataToQueue+0x14e>
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	fc 01       	movw	r30, r24
    2086:	80 a1       	ldd	r24, Z+32	; 0x20
    2088:	48 2f       	mov	r20, r24
    208a:	50 e0       	ldi	r21, 0x00	; 0
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	fc 01       	movw	r30, r24
    2092:	86 81       	ldd	r24, Z+6	; 0x06
    2094:	97 81       	ldd	r25, Z+7	; 0x07
    2096:	2d 81       	ldd	r18, Y+5	; 0x05
    2098:	3e 81       	ldd	r19, Y+6	; 0x06
    209a:	b9 01       	movw	r22, r18
    209c:	0e 94 94 33 	call	0x6728	; 0x6728 <memcpy>
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	fc 01       	movw	r30, r24
    20a6:	26 81       	ldd	r18, Z+6	; 0x06
    20a8:	37 81       	ldd	r19, Z+7	; 0x07
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	fc 01       	movw	r30, r24
    20b0:	80 a1       	ldd	r24, Z+32	; 0x20
    20b2:	88 2f       	mov	r24, r24
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	91 95       	neg	r25
    20b8:	81 95       	neg	r24
    20ba:	91 09       	sbc	r25, r1
    20bc:	28 0f       	add	r18, r24
    20be:	39 1f       	adc	r19, r25
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	fc 01       	movw	r30, r24
    20c6:	26 83       	std	Z+6, r18	; 0x06
    20c8:	37 83       	std	Z+7, r19	; 0x07
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	fc 01       	movw	r30, r24
    20d0:	26 81       	ldd	r18, Z+6	; 0x06
    20d2:	37 81       	ldd	r19, Z+7	; 0x07
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	9c 81       	ldd	r25, Y+4	; 0x04
    20d8:	fc 01       	movw	r30, r24
    20da:	80 81       	ld	r24, Z
    20dc:	91 81       	ldd	r25, Z+1	; 0x01
    20de:	28 17       	cp	r18, r24
    20e0:	39 07       	cpc	r19, r25
    20e2:	a8 f4       	brcc	.+42     	; 0x210e <prvCopyDataToQueue+0x13c>
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	fc 01       	movw	r30, r24
    20ea:	22 81       	ldd	r18, Z+2	; 0x02
    20ec:	33 81       	ldd	r19, Z+3	; 0x03
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	fc 01       	movw	r30, r24
    20f4:	80 a1       	ldd	r24, Z+32	; 0x20
    20f6:	88 2f       	mov	r24, r24
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	91 95       	neg	r25
    20fc:	81 95       	neg	r24
    20fe:	91 09       	sbc	r25, r1
    2100:	28 0f       	add	r18, r24
    2102:	39 1f       	adc	r19, r25
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	fc 01       	movw	r30, r24
    210a:	26 83       	std	Z+6, r18	; 0x06
    210c:	37 83       	std	Z+7, r19	; 0x07
    210e:	8f 81       	ldd	r24, Y+7	; 0x07
    2110:	82 30       	cpi	r24, 0x02	; 2
    2112:	31 f4       	brne	.+12     	; 0x2120 <prvCopyDataToQueue+0x14e>
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	88 23       	and	r24, r24
    2118:	19 f0       	breq	.+6      	; 0x2120 <prvCopyDataToQueue+0x14e>
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	81 50       	subi	r24, 0x01	; 1
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	21 e0       	ldi	r18, 0x01	; 1
    2124:	28 0f       	add	r18, r24
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	9c 81       	ldd	r25, Y+4	; 0x04
    212a:	fc 01       	movw	r30, r24
    212c:	26 8f       	std	Z+30, r18	; 0x1e
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	27 96       	adiw	r28, 0x07	; 7
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	08 95       	ret

0000213c <prvCopyDataFromQueue>:
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	00 d0       	rcall	.+0      	; 0x2142 <prvCopyDataFromQueue+0x6>
    2142:	1f 92       	push	r1
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	9a 83       	std	Y+2, r25	; 0x02
    214c:	6b 83       	std	Y+3, r22	; 0x03
    214e:	7c 83       	std	Y+4, r23	; 0x04
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	fc 01       	movw	r30, r24
    2156:	80 a1       	ldd	r24, Z+32	; 0x20
    2158:	88 23       	and	r24, r24
    215a:	c9 f1       	breq	.+114    	; 0x21ce <prvCopyDataFromQueue+0x92>
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	9a 81       	ldd	r25, Y+2	; 0x02
    2160:	fc 01       	movw	r30, r24
    2162:	26 81       	ldd	r18, Z+6	; 0x06
    2164:	37 81       	ldd	r19, Z+7	; 0x07
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	9a 81       	ldd	r25, Y+2	; 0x02
    216a:	fc 01       	movw	r30, r24
    216c:	80 a1       	ldd	r24, Z+32	; 0x20
    216e:	88 2f       	mov	r24, r24
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	28 0f       	add	r18, r24
    2174:	39 1f       	adc	r19, r25
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	9a 81       	ldd	r25, Y+2	; 0x02
    217a:	fc 01       	movw	r30, r24
    217c:	26 83       	std	Z+6, r18	; 0x06
    217e:	37 83       	std	Z+7, r19	; 0x07
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	9a 81       	ldd	r25, Y+2	; 0x02
    2184:	fc 01       	movw	r30, r24
    2186:	26 81       	ldd	r18, Z+6	; 0x06
    2188:	37 81       	ldd	r19, Z+7	; 0x07
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	fc 01       	movw	r30, r24
    2190:	82 81       	ldd	r24, Z+2	; 0x02
    2192:	93 81       	ldd	r25, Z+3	; 0x03
    2194:	28 17       	cp	r18, r24
    2196:	39 07       	cpc	r19, r25
    2198:	50 f0       	brcs	.+20     	; 0x21ae <prvCopyDataFromQueue+0x72>
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	9a 81       	ldd	r25, Y+2	; 0x02
    219e:	fc 01       	movw	r30, r24
    21a0:	20 81       	ld	r18, Z
    21a2:	31 81       	ldd	r19, Z+1	; 0x01
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	fc 01       	movw	r30, r24
    21aa:	26 83       	std	Z+6, r18	; 0x06
    21ac:	37 83       	std	Z+7, r19	; 0x07
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	9a 81       	ldd	r25, Y+2	; 0x02
    21b2:	fc 01       	movw	r30, r24
    21b4:	80 a1       	ldd	r24, Z+32	; 0x20
    21b6:	48 2f       	mov	r20, r24
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	9a 81       	ldd	r25, Y+2	; 0x02
    21be:	fc 01       	movw	r30, r24
    21c0:	26 81       	ldd	r18, Z+6	; 0x06
    21c2:	37 81       	ldd	r19, Z+7	; 0x07
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	9c 81       	ldd	r25, Y+4	; 0x04
    21c8:	b9 01       	movw	r22, r18
    21ca:	0e 94 94 33 	call	0x6728	; 0x6728 <memcpy>
    21ce:	00 00       	nop
    21d0:	24 96       	adiw	r28, 0x04	; 4
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	08 95       	ret

000021dc <prvUnlockQueue>:
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <prvUnlockQueue+0x6>
    21e2:	1f 92       	push	r1
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	8b 83       	std	Y+3, r24	; 0x03
    21ea:	9c 83       	std	Y+4, r25	; 0x04
    21ec:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    21f0:	ff 93       	push	r31
    21f2:	f8 7f       	andi	r31, 0xF8	; 248
    21f4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	fc 01       	movw	r30, r24
    21fe:	82 a1       	ldd	r24, Z+34	; 0x22
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	12 c0       	rjmp	.+36     	; 0x2228 <prvUnlockQueue+0x4c>
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	fc 01       	movw	r30, r24
    220a:	83 89       	ldd	r24, Z+19	; 0x13
    220c:	88 23       	and	r24, r24
    220e:	81 f0       	breq	.+32     	; 0x2230 <prvUnlockQueue+0x54>
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	43 96       	adiw	r24, 0x13	; 19
    2216:	0e 94 84 18 	call	0x3108	; 0x3108 <xTaskRemoveFromEventList>
    221a:	88 23       	and	r24, r24
    221c:	11 f0       	breq	.+4      	; 0x2222 <prvUnlockQueue+0x46>
    221e:	0e 94 1a 1a 	call	0x3434	; 0x3434 <vTaskMissedYield>
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	81 50       	subi	r24, 0x01	; 1
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	18 16       	cp	r1, r24
    222c:	5c f3       	brlt	.-42     	; 0x2204 <prvUnlockQueue+0x28>
    222e:	01 c0       	rjmp	.+2      	; 0x2232 <prvUnlockQueue+0x56>
    2230:	00 00       	nop
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	2f ef       	ldi	r18, 0xFF	; 255
    2238:	fc 01       	movw	r30, r24
    223a:	22 a3       	std	Z+34, r18	; 0x22
    223c:	ff 91       	pop	r31
    223e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2242:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2246:	ff 93       	push	r31
    2248:	f8 7f       	andi	r31, 0xF8	; 248
    224a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	fc 01       	movw	r30, r24
    2254:	81 a1       	ldd	r24, Z+33	; 0x21
    2256:	8a 83       	std	Y+2, r24	; 0x02
    2258:	12 c0       	rjmp	.+36     	; 0x227e <prvUnlockQueue+0xa2>
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	9c 81       	ldd	r25, Y+4	; 0x04
    225e:	fc 01       	movw	r30, r24
    2260:	80 85       	ldd	r24, Z+8	; 0x08
    2262:	88 23       	and	r24, r24
    2264:	81 f0       	breq	.+32     	; 0x2286 <prvUnlockQueue+0xaa>
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	08 96       	adiw	r24, 0x08	; 8
    226c:	0e 94 84 18 	call	0x3108	; 0x3108 <xTaskRemoveFromEventList>
    2270:	88 23       	and	r24, r24
    2272:	11 f0       	breq	.+4      	; 0x2278 <prvUnlockQueue+0x9c>
    2274:	0e 94 1a 1a 	call	0x3434	; 0x3434 <vTaskMissedYield>
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	81 50       	subi	r24, 0x01	; 1
    227c:	8a 83       	std	Y+2, r24	; 0x02
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	18 16       	cp	r1, r24
    2282:	5c f3       	brlt	.-42     	; 0x225a <prvUnlockQueue+0x7e>
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <prvUnlockQueue+0xac>
    2286:	00 00       	nop
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	2f ef       	ldi	r18, 0xFF	; 255
    228e:	fc 01       	movw	r30, r24
    2290:	21 a3       	std	Z+33, r18	; 0x21
    2292:	ff 91       	pop	r31
    2294:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2298:	00 00       	nop
    229a:	24 96       	adiw	r28, 0x04	; 4
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	08 95       	ret

000022a6 <prvIsQueueEmpty>:
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <prvIsQueueEmpty+0x6>
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	8a 83       	std	Y+2, r24	; 0x02
    22b2:	9b 83       	std	Y+3, r25	; 0x03
    22b4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22b8:	ff 93       	push	r31
    22ba:	f8 7f       	andi	r31, 0xF8	; 248
    22bc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	9b 81       	ldd	r25, Y+3	; 0x03
    22c4:	fc 01       	movw	r30, r24
    22c6:	86 8d       	ldd	r24, Z+30	; 0x1e
    22c8:	88 23       	and	r24, r24
    22ca:	19 f4       	brne	.+6      	; 0x22d2 <prvIsQueueEmpty+0x2c>
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	01 c0       	rjmp	.+2      	; 0x22d4 <prvIsQueueEmpty+0x2e>
    22d2:	19 82       	std	Y+1, r1	; 0x01
    22d4:	ff 91       	pop	r31
    22d6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	23 96       	adiw	r28, 0x03	; 3
    22de:	cd bf       	out	0x3d, r28	; 61
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	08 95       	ret

000022e8 <prvIsQueueFull>:
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <prvIsQueueFull+0x6>
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	8a 83       	std	Y+2, r24	; 0x02
    22f4:	9b 83       	std	Y+3, r25	; 0x03
    22f6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22fa:	ff 93       	push	r31
    22fc:	f8 7f       	andi	r31, 0xF8	; 248
    22fe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	9b 81       	ldd	r25, Y+3	; 0x03
    2306:	fc 01       	movw	r30, r24
    2308:	26 8d       	ldd	r18, Z+30	; 0x1e
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	9b 81       	ldd	r25, Y+3	; 0x03
    230e:	fc 01       	movw	r30, r24
    2310:	87 8d       	ldd	r24, Z+31	; 0x1f
    2312:	28 17       	cp	r18, r24
    2314:	19 f4       	brne	.+6      	; 0x231c <prvIsQueueFull+0x34>
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	01 c0       	rjmp	.+2      	; 0x231e <prvIsQueueFull+0x36>
    231c:	19 82       	std	Y+1, r1	; 0x01
    231e:	ff 91       	pop	r31
    2320:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	23 96       	adiw	r28, 0x03	; 3
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	08 95       	ret

00002332 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	29 97       	sbiw	r28, 0x09	; 9
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	8b 83       	std	Y+3, r24	; 0x03
    2342:	9c 83       	std	Y+4, r25	; 0x04
    2344:	4d 83       	std	Y+5, r20	; 0x05
    2346:	5e 83       	std	Y+6, r21	; 0x06
    2348:	6f 83       	std	Y+7, r22	; 0x07
    234a:	78 87       	std	Y+8, r23	; 0x08
    234c:	29 87       	std	Y+9, r18	; 0x09
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	9a 83       	std	Y+2, r25	; 0x02
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2356:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    235a:	ff 93       	push	r31
    235c:	f8 7f       	andi	r31, 0xF8	; 248
    235e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	fc 01       	movw	r30, r24
    2368:	81 a1       	ldd	r24, Z+33	; 0x21
    236a:	8f 3f       	cpi	r24, 0xFF	; 255
    236c:	21 f4       	brne	.+8      	; 0x2376 <vQueueWaitForMessageRestricted+0x44>
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	fc 01       	movw	r30, r24
    2374:	11 a2       	std	Z+33, r1	; 0x21
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	fc 01       	movw	r30, r24
    237c:	82 a1       	ldd	r24, Z+34	; 0x22
    237e:	8f 3f       	cpi	r24, 0xFF	; 255
    2380:	21 f4       	brne	.+8      	; 0x238a <vQueueWaitForMessageRestricted+0x58>
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	9a 81       	ldd	r25, Y+2	; 0x02
    2386:	fc 01       	movw	r30, r24
    2388:	12 a2       	std	Z+34, r1	; 0x22
    238a:	ff 91       	pop	r31
    238c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	9a 81       	ldd	r25, Y+2	; 0x02
    2394:	fc 01       	movw	r30, r24
    2396:	86 8d       	ldd	r24, Z+30	; 0x1e
    2398:	88 23       	and	r24, r24
    239a:	71 f4       	brne	.+28     	; 0x23b8 <vQueueWaitForMessageRestricted+0x86>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	9a 81       	ldd	r25, Y+2	; 0x02
    23a0:	fc 01       	movw	r30, r24
    23a2:	73 96       	adiw	r30, 0x13	; 19
    23a4:	8d 81       	ldd	r24, Y+5	; 0x05
    23a6:	9e 81       	ldd	r25, Y+6	; 0x06
    23a8:	af 81       	ldd	r26, Y+7	; 0x07
    23aa:	b8 85       	ldd	r27, Y+8	; 0x08
    23ac:	29 85       	ldd	r18, Y+9	; 0x09
    23ae:	ac 01       	movw	r20, r24
    23b0:	bd 01       	movw	r22, r26
    23b2:	cf 01       	movw	r24, r30
    23b4:	0e 94 50 18 	call	0x30a0	; 0x30a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	9a 81       	ldd	r25, Y+2	; 0x02
    23bc:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
	}
    23c0:	00 00       	nop
    23c2:	29 96       	adiw	r28, 0x09	; 9
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	08 95       	ret

000023ce <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    23ce:	8f 92       	push	r8
    23d0:	9f 92       	push	r9
    23d2:	af 92       	push	r10
    23d4:	bf 92       	push	r11
    23d6:	cf 92       	push	r12
    23d8:	df 92       	push	r13
    23da:	ef 92       	push	r14
    23dc:	ff 92       	push	r15
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	60 97       	sbiw	r28, 0x10	; 16
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	8e 83       	std	Y+6, r24	; 0x06
    23f2:	9f 83       	std	Y+7, r25	; 0x07
    23f4:	68 87       	std	Y+8, r22	; 0x08
    23f6:	79 87       	std	Y+9, r23	; 0x09
    23f8:	4a 87       	std	Y+10, r20	; 0x0a
    23fa:	5b 87       	std	Y+11, r21	; 0x0b
    23fc:	2c 87       	std	Y+12, r18	; 0x0c
    23fe:	3d 87       	std	Y+13, r19	; 0x0d
    2400:	0e 87       	std	Y+14, r16	; 0x0e
    2402:	ef 86       	std	Y+15, r14	; 0x0f
    2404:	f8 8a       	std	Y+16, r15	; 0x10
    2406:	8a 85       	ldd	r24, Y+10	; 0x0a
    2408:	9b 85       	ldd	r25, Y+11	; 0x0b
    240a:	0e 94 97 07 	call	0xf2e	; 0xf2e <pvPortMalloc>
    240e:	8c 83       	std	Y+4, r24	; 0x04
    2410:	9d 83       	std	Y+5, r25	; 0x05
    2412:	8c 81       	ldd	r24, Y+4	; 0x04
    2414:	9d 81       	ldd	r25, Y+5	; 0x05
    2416:	89 2b       	or	r24, r25
    2418:	b9 f0       	breq	.+46     	; 0x2448 <xTaskCreate+0x7a>
    241a:	8c e2       	ldi	r24, 0x2C	; 44
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	0e 94 97 07 	call	0xf2e	; 0xf2e <pvPortMalloc>
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	9a 83       	std	Y+2, r25	; 0x02
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	89 2b       	or	r24, r25
    242c:	41 f0       	breq	.+16     	; 0x243e <xTaskCreate+0x70>
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	9a 81       	ldd	r25, Y+2	; 0x02
    2432:	2c 81       	ldd	r18, Y+4	; 0x04
    2434:	3d 81       	ldd	r19, Y+5	; 0x05
    2436:	fc 01       	movw	r30, r24
    2438:	23 8f       	std	Z+27, r18	; 0x1b
    243a:	34 8f       	std	Z+28, r19	; 0x1c
    243c:	07 c0       	rjmp	.+14     	; 0x244c <xTaskCreate+0x7e>
    243e:	8c 81       	ldd	r24, Y+4	; 0x04
    2440:	9d 81       	ldd	r25, Y+5	; 0x05
    2442:	0e 94 db 07 	call	0xfb6	; 0xfb6 <vPortFree>
    2446:	02 c0       	rjmp	.+4      	; 0x244c <xTaskCreate+0x7e>
    2448:	19 82       	std	Y+1, r1	; 0x01
    244a:	1a 82       	std	Y+2, r1	; 0x02
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	9a 81       	ldd	r25, Y+2	; 0x02
    2450:	89 2b       	or	r24, r25
    2452:	09 f1       	breq	.+66     	; 0x2496 <xTaskCreate+0xc8>
    2454:	8a 85       	ldd	r24, Y+10	; 0x0a
    2456:	9b 85       	ldd	r25, Y+11	; 0x0b
    2458:	cc 01       	movw	r24, r24
    245a:	a0 e0       	ldi	r26, 0x00	; 0
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	09 81       	ldd	r16, Y+1	; 0x01
    2460:	1a 81       	ldd	r17, Y+2	; 0x02
    2462:	4f 85       	ldd	r20, Y+15	; 0x0f
    2464:	58 89       	ldd	r21, Y+16	; 0x10
    2466:	2c 85       	ldd	r18, Y+12	; 0x0c
    2468:	3d 85       	ldd	r19, Y+13	; 0x0d
    246a:	68 85       	ldd	r22, Y+8	; 0x08
    246c:	79 85       	ldd	r23, Y+9	; 0x09
    246e:	ee 81       	ldd	r30, Y+6	; 0x06
    2470:	ff 81       	ldd	r31, Y+7	; 0x07
    2472:	81 2c       	mov	r8, r1
    2474:	91 2c       	mov	r9, r1
    2476:	58 01       	movw	r10, r16
    2478:	6a 01       	movw	r12, r20
    247a:	ee 84       	ldd	r14, Y+14	; 0x0e
    247c:	89 01       	movw	r16, r18
    247e:	9c 01       	movw	r18, r24
    2480:	ad 01       	movw	r20, r26
    2482:	cf 01       	movw	r24, r30
    2484:	0e 94 5e 12 	call	0x24bc	; 0x24bc <prvInitialiseNewTask>
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	9a 81       	ldd	r25, Y+2	; 0x02
    248c:	0e 94 34 13 	call	0x2668	; 0x2668 <prvAddNewTaskToReadyList>
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	8b 83       	std	Y+3, r24	; 0x03
    2494:	02 c0       	rjmp	.+4      	; 0x249a <xTaskCreate+0xcc>
    2496:	8f ef       	ldi	r24, 0xFF	; 255
    2498:	8b 83       	std	Y+3, r24	; 0x03
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	60 96       	adiw	r28, 0x10	; 16
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	ff 90       	pop	r15
    24ac:	ef 90       	pop	r14
    24ae:	df 90       	pop	r13
    24b0:	cf 90       	pop	r12
    24b2:	bf 90       	pop	r11
    24b4:	af 90       	pop	r10
    24b6:	9f 90       	pop	r9
    24b8:	8f 90       	pop	r8
    24ba:	08 95       	ret

000024bc <prvInitialiseNewTask>:
    24bc:	8f 92       	push	r8
    24be:	9f 92       	push	r9
    24c0:	af 92       	push	r10
    24c2:	bf 92       	push	r11
    24c4:	cf 92       	push	r12
    24c6:	df 92       	push	r13
    24c8:	ef 92       	push	r14
    24ca:	ff 92       	push	r15
    24cc:	0f 93       	push	r16
    24ce:	1f 93       	push	r17
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	64 97       	sbiw	r28, 0x14	; 20
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	8c 83       	std	Y+4, r24	; 0x04
    24e0:	9d 83       	std	Y+5, r25	; 0x05
    24e2:	6e 83       	std	Y+6, r22	; 0x06
    24e4:	7f 83       	std	Y+7, r23	; 0x07
    24e6:	28 87       	std	Y+8, r18	; 0x08
    24e8:	39 87       	std	Y+9, r19	; 0x09
    24ea:	4a 87       	std	Y+10, r20	; 0x0a
    24ec:	5b 87       	std	Y+11, r21	; 0x0b
    24ee:	0c 87       	std	Y+12, r16	; 0x0c
    24f0:	1d 87       	std	Y+13, r17	; 0x0d
    24f2:	ee 86       	std	Y+14, r14	; 0x0e
    24f4:	cf 86       	std	Y+15, r12	; 0x0f
    24f6:	d8 8a       	std	Y+16, r13	; 0x10
    24f8:	a9 8a       	std	Y+17, r10	; 0x11
    24fa:	ba 8a       	std	Y+18, r11	; 0x12
    24fc:	8b 8a       	std	Y+19, r8	; 0x13
    24fe:	9c 8a       	std	Y+20, r9	; 0x14
    2500:	28 85       	ldd	r18, Y+8	; 0x08
    2502:	39 85       	ldd	r19, Y+9	; 0x09
    2504:	89 89       	ldd	r24, Y+17	; 0x11
    2506:	9a 89       	ldd	r25, Y+18	; 0x12
    2508:	fc 01       	movw	r30, r24
    250a:	83 8d       	ldd	r24, Z+27	; 0x1b
    250c:	94 8d       	ldd	r25, Z+28	; 0x1c
    250e:	a9 01       	movw	r20, r18
    2510:	65 ea       	ldi	r22, 0xA5	; 165
    2512:	70 e0       	ldi	r23, 0x00	; 0
    2514:	0e 94 9d 33 	call	0x673a	; 0x673a <memset>
    2518:	89 89       	ldd	r24, Y+17	; 0x11
    251a:	9a 89       	ldd	r25, Y+18	; 0x12
    251c:	fc 01       	movw	r30, r24
    251e:	23 8d       	ldd	r18, Z+27	; 0x1b
    2520:	34 8d       	ldd	r19, Z+28	; 0x1c
    2522:	88 85       	ldd	r24, Y+8	; 0x08
    2524:	99 85       	ldd	r25, Y+9	; 0x09
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	82 0f       	add	r24, r18
    252a:	93 1f       	adc	r25, r19
    252c:	8a 83       	std	Y+2, r24	; 0x02
    252e:	9b 83       	std	Y+3, r25	; 0x03
    2530:	19 82       	std	Y+1, r1	; 0x01
    2532:	21 c0       	rjmp	.+66     	; 0x2576 <prvInitialiseNewTask+0xba>
    2534:	89 81       	ldd	r24, Y+1	; 0x01
    2536:	88 2f       	mov	r24, r24
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	29 81       	ldd	r18, Y+1	; 0x01
    253c:	22 2f       	mov	r18, r18
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4e 81       	ldd	r20, Y+6	; 0x06
    2542:	5f 81       	ldd	r21, Y+7	; 0x07
    2544:	24 0f       	add	r18, r20
    2546:	35 1f       	adc	r19, r21
    2548:	f9 01       	movw	r30, r18
    254a:	40 81       	ld	r20, Z
    254c:	29 89       	ldd	r18, Y+17	; 0x11
    254e:	3a 89       	ldd	r19, Y+18	; 0x12
    2550:	82 0f       	add	r24, r18
    2552:	93 1f       	adc	r25, r19
    2554:	4d 96       	adiw	r24, 0x1d	; 29
    2556:	fc 01       	movw	r30, r24
    2558:	40 83       	st	Z, r20
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	88 2f       	mov	r24, r24
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	2e 81       	ldd	r18, Y+6	; 0x06
    2562:	3f 81       	ldd	r19, Y+7	; 0x07
    2564:	82 0f       	add	r24, r18
    2566:	93 1f       	adc	r25, r19
    2568:	fc 01       	movw	r30, r24
    256a:	80 81       	ld	r24, Z
    256c:	88 23       	and	r24, r24
    256e:	39 f0       	breq	.+14     	; 0x257e <prvInitialiseNewTask+0xc2>
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	8f 5f       	subi	r24, 0xFF	; 255
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	88 30       	cpi	r24, 0x08	; 8
    257a:	e0 f2       	brcs	.-72     	; 0x2534 <prvInitialiseNewTask+0x78>
    257c:	01 c0       	rjmp	.+2      	; 0x2580 <prvInitialiseNewTask+0xc4>
    257e:	00 00       	nop
    2580:	89 89       	ldd	r24, Y+17	; 0x11
    2582:	9a 89       	ldd	r25, Y+18	; 0x12
    2584:	fc 01       	movw	r30, r24
    2586:	14 a2       	std	Z+36, r1	; 0x24
    2588:	8e 85       	ldd	r24, Y+14	; 0x0e
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	10 f0       	brcs	.+4      	; 0x2592 <prvInitialiseNewTask+0xd6>
    258e:	83 e0       	ldi	r24, 0x03	; 3
    2590:	8e 87       	std	Y+14, r24	; 0x0e
    2592:	89 89       	ldd	r24, Y+17	; 0x11
    2594:	9a 89       	ldd	r25, Y+18	; 0x12
    2596:	2e 85       	ldd	r18, Y+14	; 0x0e
    2598:	fc 01       	movw	r30, r24
    259a:	22 8f       	std	Z+26, r18	; 0x1a
    259c:	89 89       	ldd	r24, Y+17	; 0x11
    259e:	9a 89       	ldd	r25, Y+18	; 0x12
    25a0:	02 96       	adiw	r24, 0x02	; 2
    25a2:	0e 94 23 08 	call	0x1046	; 0x1046 <vListInitialiseItem>
    25a6:	89 89       	ldd	r24, Y+17	; 0x11
    25a8:	9a 89       	ldd	r25, Y+18	; 0x12
    25aa:	0e 96       	adiw	r24, 0x0e	; 14
    25ac:	0e 94 23 08 	call	0x1046	; 0x1046 <vListInitialiseItem>
    25b0:	89 89       	ldd	r24, Y+17	; 0x11
    25b2:	9a 89       	ldd	r25, Y+18	; 0x12
    25b4:	29 89       	ldd	r18, Y+17	; 0x11
    25b6:	3a 89       	ldd	r19, Y+18	; 0x12
    25b8:	fc 01       	movw	r30, r24
    25ba:	22 87       	std	Z+10, r18	; 0x0a
    25bc:	33 87       	std	Z+11, r19	; 0x0b
    25be:	8e 85       	ldd	r24, Y+14	; 0x0e
    25c0:	88 2f       	mov	r24, r24
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	a0 e0       	ldi	r26, 0x00	; 0
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	24 e0       	ldi	r18, 0x04	; 4
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	79 01       	movw	r14, r18
    25d2:	8a 01       	movw	r16, r20
    25d4:	e8 1a       	sub	r14, r24
    25d6:	f9 0a       	sbc	r15, r25
    25d8:	0a 0b       	sbc	r16, r26
    25da:	1b 0b       	sbc	r17, r27
    25dc:	d8 01       	movw	r26, r16
    25de:	c7 01       	movw	r24, r14
    25e0:	29 89       	ldd	r18, Y+17	; 0x11
    25e2:	3a 89       	ldd	r19, Y+18	; 0x12
    25e4:	f9 01       	movw	r30, r18
    25e6:	86 87       	std	Z+14, r24	; 0x0e
    25e8:	97 87       	std	Z+15, r25	; 0x0f
    25ea:	a0 8b       	std	Z+16, r26	; 0x10
    25ec:	b1 8b       	std	Z+17, r27	; 0x11
    25ee:	89 89       	ldd	r24, Y+17	; 0x11
    25f0:	9a 89       	ldd	r25, Y+18	; 0x12
    25f2:	29 89       	ldd	r18, Y+17	; 0x11
    25f4:	3a 89       	ldd	r19, Y+18	; 0x12
    25f6:	fc 01       	movw	r30, r24
    25f8:	26 8b       	std	Z+22, r18	; 0x16
    25fa:	37 8b       	std	Z+23, r19	; 0x17
    25fc:	89 89       	ldd	r24, Y+17	; 0x11
    25fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2600:	fc 01       	movw	r30, r24
    2602:	17 a2       	std	Z+39, r1	; 0x27
    2604:	10 a6       	std	Z+40, r1	; 0x28
    2606:	11 a6       	std	Z+41, r1	; 0x29
    2608:	12 a6       	std	Z+42, r1	; 0x2a
    260a:	89 89       	ldd	r24, Y+17	; 0x11
    260c:	9a 89       	ldd	r25, Y+18	; 0x12
    260e:	fc 01       	movw	r30, r24
    2610:	13 a6       	std	Z+43, r1	; 0x2b
    2612:	4c 85       	ldd	r20, Y+12	; 0x0c
    2614:	5d 85       	ldd	r21, Y+13	; 0x0d
    2616:	2c 81       	ldd	r18, Y+4	; 0x04
    2618:	3d 81       	ldd	r19, Y+5	; 0x05
    261a:	8a 81       	ldd	r24, Y+2	; 0x02
    261c:	9b 81       	ldd	r25, Y+3	; 0x03
    261e:	b9 01       	movw	r22, r18
    2620:	0e 94 6f 09 	call	0x12de	; 0x12de <pxPortInitialiseStack>
    2624:	9c 01       	movw	r18, r24
    2626:	89 89       	ldd	r24, Y+17	; 0x11
    2628:	9a 89       	ldd	r25, Y+18	; 0x12
    262a:	fc 01       	movw	r30, r24
    262c:	20 83       	st	Z, r18
    262e:	31 83       	std	Z+1, r19	; 0x01
    2630:	8f 85       	ldd	r24, Y+15	; 0x0f
    2632:	98 89       	ldd	r25, Y+16	; 0x10
    2634:	89 2b       	or	r24, r25
    2636:	39 f0       	breq	.+14     	; 0x2646 <prvInitialiseNewTask+0x18a>
    2638:	8f 85       	ldd	r24, Y+15	; 0x0f
    263a:	98 89       	ldd	r25, Y+16	; 0x10
    263c:	29 89       	ldd	r18, Y+17	; 0x11
    263e:	3a 89       	ldd	r19, Y+18	; 0x12
    2640:	fc 01       	movw	r30, r24
    2642:	20 83       	st	Z, r18
    2644:	31 83       	std	Z+1, r19	; 0x01
    2646:	00 00       	nop
    2648:	64 96       	adiw	r28, 0x14	; 20
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	df 91       	pop	r29
    2650:	cf 91       	pop	r28
    2652:	1f 91       	pop	r17
    2654:	0f 91       	pop	r16
    2656:	ff 90       	pop	r15
    2658:	ef 90       	pop	r14
    265a:	df 90       	pop	r13
    265c:	cf 90       	pop	r12
    265e:	bf 90       	pop	r11
    2660:	af 90       	pop	r10
    2662:	9f 90       	pop	r9
    2664:	8f 90       	pop	r8
    2666:	08 95       	ret

00002668 <prvAddNewTaskToReadyList>:
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	1f 92       	push	r1
    266e:	1f 92       	push	r1
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	9a 83       	std	Y+2, r25	; 0x02
    2678:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    267c:	ff 93       	push	r31
    267e:	f8 7f       	andi	r31, 0xF8	; 248
    2680:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2684:	80 91 a2 2c 	lds	r24, 0x2CA2	; 0x802ca2 <uxCurrentNumberOfTasks>
    2688:	8f 5f       	subi	r24, 0xFF	; 255
    268a:	80 93 a2 2c 	sts	0x2CA2, r24	; 0x802ca2 <uxCurrentNumberOfTasks>
    268e:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    2692:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    2696:	89 2b       	or	r24, r25
    2698:	69 f4       	brne	.+26     	; 0x26b4 <prvAddNewTaskToReadyList+0x4c>
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	9a 81       	ldd	r25, Y+2	; 0x02
    269e:	80 93 44 2c 	sts	0x2C44, r24	; 0x802c44 <pxCurrentTCB>
    26a2:	90 93 45 2c 	sts	0x2C45, r25	; 0x802c45 <pxCurrentTCB+0x1>
    26a6:	80 91 a2 2c 	lds	r24, 0x2CA2	; 0x802ca2 <uxCurrentNumberOfTasks>
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	c9 f4       	brne	.+50     	; 0x26e0 <prvAddNewTaskToReadyList+0x78>
    26ae:	0e 94 38 1a 	call	0x3470	; 0x3470 <prvInitialiseTaskLists>
    26b2:	16 c0       	rjmp	.+44     	; 0x26e0 <prvAddNewTaskToReadyList+0x78>
    26b4:	80 91 a8 2c 	lds	r24, 0x2CA8	; 0x802ca8 <xSchedulerRunning>
    26b8:	88 23       	and	r24, r24
    26ba:	91 f4       	brne	.+36     	; 0x26e0 <prvAddNewTaskToReadyList+0x78>
    26bc:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    26c0:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    26c4:	fc 01       	movw	r30, r24
    26c6:	22 8d       	ldd	r18, Z+26	; 0x1a
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	9a 81       	ldd	r25, Y+2	; 0x02
    26cc:	fc 01       	movw	r30, r24
    26ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    26d0:	82 17       	cp	r24, r18
    26d2:	30 f0       	brcs	.+12     	; 0x26e0 <prvAddNewTaskToReadyList+0x78>
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	9a 81       	ldd	r25, Y+2	; 0x02
    26d8:	80 93 44 2c 	sts	0x2C44, r24	; 0x802c44 <pxCurrentTCB>
    26dc:	90 93 45 2c 	sts	0x2C45, r25	; 0x802c45 <pxCurrentTCB+0x1>
    26e0:	80 91 ac 2c 	lds	r24, 0x2CAC	; 0x802cac <uxTaskNumber>
    26e4:	8f 5f       	subi	r24, 0xFF	; 255
    26e6:	80 93 ac 2c 	sts	0x2CAC, r24	; 0x802cac <uxTaskNumber>
    26ea:	20 91 ac 2c 	lds	r18, 0x2CAC	; 0x802cac <uxTaskNumber>
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	fc 01       	movw	r30, r24
    26f4:	25 a3       	std	Z+37, r18	; 0x25
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	9a 81       	ldd	r25, Y+2	; 0x02
    26fa:	fc 01       	movw	r30, r24
    26fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    26fe:	80 91 a7 2c 	lds	r24, 0x2CA7	; 0x802ca7 <uxTopReadyPriority>
    2702:	89 17       	cp	r24, r25
    2704:	30 f4       	brcc	.+12     	; 0x2712 <prvAddNewTaskToReadyList+0xaa>
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	fc 01       	movw	r30, r24
    270c:	82 8d       	ldd	r24, Z+26	; 0x1a
    270e:	80 93 a7 2c 	sts	0x2CA7, r24	; 0x802ca7 <uxTopReadyPriority>
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	9a 81       	ldd	r25, Y+2	; 0x02
    2716:	ac 01       	movw	r20, r24
    2718:	4e 5f       	subi	r20, 0xFE	; 254
    271a:	5f 4f       	sbci	r21, 0xFF	; 255
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	9a 81       	ldd	r25, Y+2	; 0x02
    2720:	fc 01       	movw	r30, r24
    2722:	82 8d       	ldd	r24, Z+26	; 0x1a
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	6b e0       	ldi	r22, 0x0B	; 11
    272a:	62 9f       	mul	r22, r18
    272c:	c0 01       	movw	r24, r0
    272e:	63 9f       	mul	r22, r19
    2730:	90 0d       	add	r25, r0
    2732:	11 24       	eor	r1, r1
    2734:	8a 5b       	subi	r24, 0xBA	; 186
    2736:	93 4d       	sbci	r25, 0xD3	; 211
    2738:	ba 01       	movw	r22, r20
    273a:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    273e:	ff 91       	pop	r31
    2740:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2744:	80 91 a8 2c 	lds	r24, 0x2CA8	; 0x802ca8 <xSchedulerRunning>
    2748:	88 23       	and	r24, r24
    274a:	71 f0       	breq	.+28     	; 0x2768 <prvAddNewTaskToReadyList+0x100>
    274c:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    2750:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    2754:	fc 01       	movw	r30, r24
    2756:	22 8d       	ldd	r18, Z+26	; 0x1a
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	fc 01       	movw	r30, r24
    275e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2760:	28 17       	cp	r18, r24
    2762:	10 f4       	brcc	.+4      	; 0x2768 <prvAddNewTaskToReadyList+0x100>
    2764:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    2768:	00 00       	nop
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	08 95       	ret

00002774 <vTaskDelay>:
    2774:	cf 93       	push	r28
    2776:	df 93       	push	r29
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	25 97       	sbiw	r28, 0x05	; 5
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	6a 83       	std	Y+2, r22	; 0x02
    2784:	7b 83       	std	Y+3, r23	; 0x03
    2786:	8c 83       	std	Y+4, r24	; 0x04
    2788:	9d 83       	std	Y+5, r25	; 0x05
    278a:	19 82       	std	Y+1, r1	; 0x01
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	9b 81       	ldd	r25, Y+3	; 0x03
    2790:	ac 81       	ldd	r26, Y+4	; 0x04
    2792:	bd 81       	ldd	r27, Y+5	; 0x05
    2794:	89 2b       	or	r24, r25
    2796:	8a 2b       	or	r24, r26
    2798:	8b 2b       	or	r24, r27
    279a:	71 f0       	breq	.+28     	; 0x27b8 <vTaskDelay+0x44>
    279c:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <vTaskSuspendAll>
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	9b 81       	ldd	r25, Y+3	; 0x03
    27a4:	ac 81       	ldd	r26, Y+4	; 0x04
    27a6:	bd 81       	ldd	r27, Y+5	; 0x05
    27a8:	40 e0       	ldi	r20, 0x00	; 0
    27aa:	bc 01       	movw	r22, r24
    27ac:	cd 01       	movw	r24, r26
    27ae:	0e 94 15 1b 	call	0x362a	; 0x362a <prvAddCurrentTaskToDelayedList>
    27b2:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskResumeAll>
    27b6:	89 83       	std	Y+1, r24	; 0x01
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	88 23       	and	r24, r24
    27bc:	11 f4       	brne	.+4      	; 0x27c2 <vTaskDelay+0x4e>
    27be:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    27c2:	00 00       	nop
    27c4:	25 96       	adiw	r28, 0x05	; 5
    27c6:	cd bf       	out	0x3d, r28	; 61
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	df 91       	pop	r29
    27cc:	cf 91       	pop	r28
    27ce:	08 95       	ret

000027d0 <vTaskSuspend>:
    27d0:	cf 93       	push	r28
    27d2:	df 93       	push	r29
    27d4:	00 d0       	rcall	.+0      	; 0x27d6 <vTaskSuspend+0x6>
    27d6:	1f 92       	push	r1
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	8b 83       	std	Y+3, r24	; 0x03
    27de:	9c 83       	std	Y+4, r25	; 0x04
    27e0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    27e4:	ff 93       	push	r31
    27e6:	f8 7f       	andi	r31, 0xF8	; 248
    27e8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	9c 81       	ldd	r25, Y+4	; 0x04
    27f0:	89 2b       	or	r24, r25
    27f2:	29 f4       	brne	.+10     	; 0x27fe <vTaskSuspend+0x2e>
    27f4:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    27f8:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <vTaskSuspend+0x32>
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	89 83       	std	Y+1, r24	; 0x01
    2804:	9a 83       	std	Y+2, r25	; 0x02
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	9a 81       	ldd	r25, Y+2	; 0x02
    280a:	02 96       	adiw	r24, 0x02	; 2
    280c:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	9a 81       	ldd	r25, Y+2	; 0x02
    2814:	fc 01       	movw	r30, r24
    2816:	80 8d       	ldd	r24, Z+24	; 0x18
    2818:	91 8d       	ldd	r25, Z+25	; 0x19
    281a:	89 2b       	or	r24, r25
    281c:	29 f0       	breq	.+10     	; 0x2828 <vTaskSuspend+0x58>
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	9a 81       	ldd	r25, Y+2	; 0x02
    2822:	0e 96       	adiw	r24, 0x0e	; 14
    2824:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	9a 81       	ldd	r25, Y+2	; 0x02
    282c:	02 96       	adiw	r24, 0x02	; 2
    282e:	bc 01       	movw	r22, r24
    2830:	87 e9       	ldi	r24, 0x97	; 151
    2832:	9c e2       	ldi	r25, 0x2C	; 44
    2834:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
    283c:	fc 01       	movw	r30, r24
    283e:	83 a5       	ldd	r24, Z+43	; 0x2b
    2840:	81 30       	cpi	r24, 0x01	; 1
    2842:	21 f4       	brne	.+8      	; 0x284c <vTaskSuspend+0x7c>
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	9a 81       	ldd	r25, Y+2	; 0x02
    2848:	fc 01       	movw	r30, r24
    284a:	13 a6       	std	Z+43, r1	; 0x2b
    284c:	ff 91       	pop	r31
    284e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2852:	80 91 a8 2c 	lds	r24, 0x2CA8	; 0x802ca8 <xSchedulerRunning>
    2856:	88 23       	and	r24, r24
    2858:	59 f0       	breq	.+22     	; 0x2870 <vTaskSuspend+0xa0>
    285a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    285e:	ff 93       	push	r31
    2860:	f8 7f       	andi	r31, 0xF8	; 248
    2862:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2866:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <prvResetNextTaskUnblockTime>
    286a:	ff 91       	pop	r31
    286c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2870:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    2874:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    2878:	29 81       	ldd	r18, Y+1	; 0x01
    287a:	3a 81       	ldd	r19, Y+2	; 0x02
    287c:	28 17       	cp	r18, r24
    287e:	39 07       	cpc	r19, r25
    2880:	a1 f4       	brne	.+40     	; 0x28aa <vTaskSuspend+0xda>
    2882:	80 91 a8 2c 	lds	r24, 0x2CA8	; 0x802ca8 <xSchedulerRunning>
    2886:	88 23       	and	r24, r24
    2888:	19 f0       	breq	.+6      	; 0x2890 <vTaskSuspend+0xc0>
    288a:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    288e:	0d c0       	rjmp	.+26     	; 0x28aa <vTaskSuspend+0xda>
    2890:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xSuspendedTaskList>
    2894:	80 91 a2 2c 	lds	r24, 0x2CA2	; 0x802ca2 <uxCurrentNumberOfTasks>
    2898:	98 17       	cp	r25, r24
    289a:	29 f4       	brne	.+10     	; 0x28a6 <vTaskSuspend+0xd6>
    289c:	10 92 44 2c 	sts	0x2C44, r1	; 0x802c44 <pxCurrentTCB>
    28a0:	10 92 45 2c 	sts	0x2C45, r1	; 0x802c45 <pxCurrentTCB+0x1>
    28a4:	02 c0       	rjmp	.+4      	; 0x28aa <vTaskSuspend+0xda>
    28a6:	0e 94 19 17 	call	0x2e32	; 0x2e32 <vTaskSwitchContext>
    28aa:	00 00       	nop
    28ac:	24 96       	adiw	r28, 0x04	; 4
    28ae:	cd bf       	out	0x3d, r28	; 61
    28b0:	de bf       	out	0x3e, r29	; 62
    28b2:	df 91       	pop	r29
    28b4:	cf 91       	pop	r28
    28b6:	08 95       	ret

000028b8 <prvTaskIsTaskSuspended>:
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	25 97       	sbiw	r28, 0x05	; 5
    28c2:	cd bf       	out	0x3d, r28	; 61
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	8c 83       	std	Y+4, r24	; 0x04
    28c8:	9d 83       	std	Y+5, r25	; 0x05
    28ca:	19 82       	std	Y+1, r1	; 0x01
    28cc:	8c 81       	ldd	r24, Y+4	; 0x04
    28ce:	9d 81       	ldd	r25, Y+5	; 0x05
    28d0:	8a 83       	std	Y+2, r24	; 0x02
    28d2:	9b 83       	std	Y+3, r25	; 0x03
    28d4:	8a 81       	ldd	r24, Y+2	; 0x02
    28d6:	9b 81       	ldd	r25, Y+3	; 0x03
    28d8:	fc 01       	movw	r30, r24
    28da:	84 85       	ldd	r24, Z+12	; 0x0c
    28dc:	95 85       	ldd	r25, Z+13	; 0x0d
    28de:	87 59       	subi	r24, 0x97	; 151
    28e0:	9c 42       	sbci	r25, 0x2C	; 44
    28e2:	89 f4       	brne	.+34     	; 0x2906 <prvTaskIsTaskSuspended+0x4e>
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	9b 81       	ldd	r25, Y+3	; 0x03
    28e8:	fc 01       	movw	r30, r24
    28ea:	80 8d       	ldd	r24, Z+24	; 0x18
    28ec:	91 8d       	ldd	r25, Z+25	; 0x19
    28ee:	8c 58       	subi	r24, 0x8C	; 140
    28f0:	9c 42       	sbci	r25, 0x2C	; 44
    28f2:	49 f0       	breq	.+18     	; 0x2906 <prvTaskIsTaskSuspended+0x4e>
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	9b 81       	ldd	r25, Y+3	; 0x03
    28f8:	fc 01       	movw	r30, r24
    28fa:	80 8d       	ldd	r24, Z+24	; 0x18
    28fc:	91 8d       	ldd	r25, Z+25	; 0x19
    28fe:	89 2b       	or	r24, r25
    2900:	11 f4       	brne	.+4      	; 0x2906 <prvTaskIsTaskSuspended+0x4e>
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	89 83       	std	Y+1, r24	; 0x01
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	25 96       	adiw	r28, 0x05	; 5
    290a:	cd bf       	out	0x3d, r28	; 61
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	df 91       	pop	r29
    2910:	cf 91       	pop	r28
    2912:	08 95       	ret

00002914 <vTaskResume>:
    2914:	cf 93       	push	r28
    2916:	df 93       	push	r29
    2918:	00 d0       	rcall	.+0      	; 0x291a <vTaskResume+0x6>
    291a:	1f 92       	push	r1
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	8b 83       	std	Y+3, r24	; 0x03
    2922:	9c 83       	std	Y+4, r25	; 0x04
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	9c 81       	ldd	r25, Y+4	; 0x04
    2928:	89 83       	std	Y+1, r24	; 0x01
    292a:	9a 83       	std	Y+2, r25	; 0x02
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	9a 81       	ldd	r25, Y+2	; 0x02
    2930:	89 2b       	or	r24, r25
    2932:	09 f4       	brne	.+2      	; 0x2936 <vTaskResume+0x22>
    2934:	50 c0       	rjmp	.+160    	; 0x29d6 <vTaskResume+0xc2>
    2936:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    293a:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    293e:	29 81       	ldd	r18, Y+1	; 0x01
    2940:	3a 81       	ldd	r19, Y+2	; 0x02
    2942:	28 17       	cp	r18, r24
    2944:	39 07       	cpc	r19, r25
    2946:	09 f4       	brne	.+2      	; 0x294a <vTaskResume+0x36>
    2948:	46 c0       	rjmp	.+140    	; 0x29d6 <vTaskResume+0xc2>
    294a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    294e:	ff 93       	push	r31
    2950:	f8 7f       	andi	r31, 0xF8	; 248
    2952:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	9a 81       	ldd	r25, Y+2	; 0x02
    295a:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <prvTaskIsTaskSuspended>
    295e:	88 23       	and	r24, r24
    2960:	b9 f1       	breq	.+110    	; 0x29d0 <vTaskResume+0xbc>
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	9a 81       	ldd	r25, Y+2	; 0x02
    2966:	02 96       	adiw	r24, 0x02	; 2
    2968:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	9a 81       	ldd	r25, Y+2	; 0x02
    2970:	fc 01       	movw	r30, r24
    2972:	92 8d       	ldd	r25, Z+26	; 0x1a
    2974:	80 91 a7 2c 	lds	r24, 0x2CA7	; 0x802ca7 <uxTopReadyPriority>
    2978:	89 17       	cp	r24, r25
    297a:	30 f4       	brcc	.+12     	; 0x2988 <vTaskResume+0x74>
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	9a 81       	ldd	r25, Y+2	; 0x02
    2980:	fc 01       	movw	r30, r24
    2982:	82 8d       	ldd	r24, Z+26	; 0x1a
    2984:	80 93 a7 2c 	sts	0x2CA7, r24	; 0x802ca7 <uxTopReadyPriority>
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	9a 81       	ldd	r25, Y+2	; 0x02
    298c:	ac 01       	movw	r20, r24
    298e:	4e 5f       	subi	r20, 0xFE	; 254
    2990:	5f 4f       	sbci	r21, 0xFF	; 255
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	9a 81       	ldd	r25, Y+2	; 0x02
    2996:	fc 01       	movw	r30, r24
    2998:	82 8d       	ldd	r24, Z+26	; 0x1a
    299a:	28 2f       	mov	r18, r24
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	6b e0       	ldi	r22, 0x0B	; 11
    29a0:	62 9f       	mul	r22, r18
    29a2:	c0 01       	movw	r24, r0
    29a4:	63 9f       	mul	r22, r19
    29a6:	90 0d       	add	r25, r0
    29a8:	11 24       	eor	r1, r1
    29aa:	8a 5b       	subi	r24, 0xBA	; 186
    29ac:	93 4d       	sbci	r25, 0xD3	; 211
    29ae:	ba 01       	movw	r22, r20
    29b0:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	fc 01       	movw	r30, r24
    29ba:	22 8d       	ldd	r18, Z+26	; 0x1a
    29bc:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    29c0:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    29c4:	fc 01       	movw	r30, r24
    29c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    29c8:	28 17       	cp	r18, r24
    29ca:	10 f0       	brcs	.+4      	; 0x29d0 <vTaskResume+0xbc>
    29cc:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    29d0:	ff 91       	pop	r31
    29d2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    29d6:	00 00       	nop
    29d8:	24 96       	adiw	r28, 0x04	; 4
    29da:	cd bf       	out	0x3d, r28	; 61
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	df 91       	pop	r29
    29e0:	cf 91       	pop	r28
    29e2:	08 95       	ret

000029e4 <vTaskStartScheduler>:
    29e4:	ef 92       	push	r14
    29e6:	ff 92       	push	r15
    29e8:	0f 93       	push	r16
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	1f 92       	push	r1
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
    29f4:	0f 2e       	mov	r0, r31
    29f6:	f1 eb       	ldi	r31, 0xB1	; 177
    29f8:	ef 2e       	mov	r14, r31
    29fa:	fc e2       	ldi	r31, 0x2C	; 44
    29fc:	ff 2e       	mov	r15, r31
    29fe:	f0 2d       	mov	r31, r0
    2a00:	00 e0       	ldi	r16, 0x00	; 0
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	48 ec       	ldi	r20, 0xC8	; 200
    2a08:	50 e0       	ldi	r21, 0x00	; 0
    2a0a:	64 e0       	ldi	r22, 0x04	; 4
    2a0c:	70 e2       	ldi	r23, 0x20	; 32
    2a0e:	85 e2       	ldi	r24, 0x25	; 37
    2a10:	9a e1       	ldi	r25, 0x1A	; 26
    2a12:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
    2a16:	89 83       	std	Y+1, r24	; 0x01
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	81 30       	cpi	r24, 0x01	; 1
    2a1c:	19 f4       	brne	.+6      	; 0x2a24 <vTaskStartScheduler+0x40>
    2a1e:	0e 94 b6 1b 	call	0x376c	; 0x376c <xTimerCreateTimerTask>
    2a22:	89 83       	std	Y+1, r24	; 0x01
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	81 30       	cpi	r24, 0x01	; 1
    2a28:	09 f5       	brne	.+66     	; 0x2a6c <vTaskStartScheduler+0x88>
    2a2a:	80 ea       	ldi	r24, 0xA0	; 160
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	20 ea       	ldi	r18, 0xA0	; 160
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	f9 01       	movw	r30, r18
    2a34:	22 81       	ldd	r18, Z+2	; 0x02
    2a36:	28 7f       	andi	r18, 0xF8	; 248
    2a38:	fc 01       	movw	r30, r24
    2a3a:	22 83       	std	Z+2, r18	; 0x02
    2a3c:	8f ef       	ldi	r24, 0xFF	; 255
    2a3e:	9f ef       	ldi	r25, 0xFF	; 255
    2a40:	dc 01       	movw	r26, r24
    2a42:	80 93 ad 2c 	sts	0x2CAD, r24	; 0x802cad <xNextTaskUnblockTime>
    2a46:	90 93 ae 2c 	sts	0x2CAE, r25	; 0x802cae <xNextTaskUnblockTime+0x1>
    2a4a:	a0 93 af 2c 	sts	0x2CAF, r26	; 0x802caf <xNextTaskUnblockTime+0x2>
    2a4e:	b0 93 b0 2c 	sts	0x2CB0, r27	; 0x802cb0 <xNextTaskUnblockTime+0x3>
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	80 93 a8 2c 	sts	0x2CA8, r24	; 0x802ca8 <xSchedulerRunning>
    2a58:	10 92 a3 2c 	sts	0x2CA3, r1	; 0x802ca3 <xTickCount>
    2a5c:	10 92 a4 2c 	sts	0x2CA4, r1	; 0x802ca4 <xTickCount+0x1>
    2a60:	10 92 a5 2c 	sts	0x2CA5, r1	; 0x802ca5 <xTickCount+0x2>
    2a64:	10 92 a6 2c 	sts	0x2CA6, r1	; 0x802ca6 <xTickCount+0x3>
    2a68:	0e 94 48 0b 	call	0x1690	; 0x1690 <xPortStartScheduler>
    2a6c:	00 00       	nop
    2a6e:	0f 90       	pop	r0
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	0f 91       	pop	r16
    2a76:	ff 90       	pop	r15
    2a78:	ef 90       	pop	r14
    2a7a:	08 95       	ret

00002a7c <vTaskSuspendAll>:
    2a7c:	cf 93       	push	r28
    2a7e:	df 93       	push	r29
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    2a84:	80 91 b3 2c 	lds	r24, 0x2CB3	; 0x802cb3 <uxSchedulerSuspended>
    2a88:	8f 5f       	subi	r24, 0xFF	; 255
    2a8a:	80 93 b3 2c 	sts	0x2CB3, r24	; 0x802cb3 <uxSchedulerSuspended>
    2a8e:	00 00       	nop
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	08 95       	ret

00002a96 <xTaskResumeAll>:
    2a96:	cf 93       	push	r28
    2a98:	df 93       	push	r29
    2a9a:	00 d0       	rcall	.+0      	; 0x2a9c <xTaskResumeAll+0x6>
    2a9c:	1f 92       	push	r1
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
    2aa2:	19 82       	std	Y+1, r1	; 0x01
    2aa4:	1a 82       	std	Y+2, r1	; 0x02
    2aa6:	1b 82       	std	Y+3, r1	; 0x03
    2aa8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2aac:	ff 93       	push	r31
    2aae:	f8 7f       	andi	r31, 0xF8	; 248
    2ab0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2ab4:	80 91 b3 2c 	lds	r24, 0x2CB3	; 0x802cb3 <uxSchedulerSuspended>
    2ab8:	81 50       	subi	r24, 0x01	; 1
    2aba:	80 93 b3 2c 	sts	0x2CB3, r24	; 0x802cb3 <uxSchedulerSuspended>
    2abe:	80 91 b3 2c 	lds	r24, 0x2CB3	; 0x802cb3 <uxSchedulerSuspended>
    2ac2:	88 23       	and	r24, r24
    2ac4:	09 f0       	breq	.+2      	; 0x2ac8 <xTaskResumeAll+0x32>
    2ac6:	74 c0       	rjmp	.+232    	; 0x2bb0 <xTaskResumeAll+0x11a>
    2ac8:	80 91 a2 2c 	lds	r24, 0x2CA2	; 0x802ca2 <uxCurrentNumberOfTasks>
    2acc:	88 23       	and	r24, r24
    2ace:	09 f4       	brne	.+2      	; 0x2ad2 <xTaskResumeAll+0x3c>
    2ad0:	6f c0       	rjmp	.+222    	; 0x2bb0 <xTaskResumeAll+0x11a>
    2ad2:	46 c0       	rjmp	.+140    	; 0x2b60 <xTaskResumeAll+0xca>
    2ad4:	80 91 93 2c 	lds	r24, 0x2C93	; 0x802c93 <xPendingReadyList+0x7>
    2ad8:	90 91 94 2c 	lds	r25, 0x2C94	; 0x802c94 <xPendingReadyList+0x8>
    2adc:	fc 01       	movw	r30, r24
    2ade:	80 85       	ldd	r24, Z+8	; 0x08
    2ae0:	91 85       	ldd	r25, Z+9	; 0x09
    2ae2:	89 83       	std	Y+1, r24	; 0x01
    2ae4:	9a 83       	std	Y+2, r25	; 0x02
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aea:	0e 96       	adiw	r24, 0x0e	; 14
    2aec:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	9a 81       	ldd	r25, Y+2	; 0x02
    2af4:	02 96       	adiw	r24, 0x02	; 2
    2af6:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	9a 81       	ldd	r25, Y+2	; 0x02
    2afe:	fc 01       	movw	r30, r24
    2b00:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b02:	80 91 a7 2c 	lds	r24, 0x2CA7	; 0x802ca7 <uxTopReadyPriority>
    2b06:	89 17       	cp	r24, r25
    2b08:	30 f4       	brcc	.+12     	; 0x2b16 <xTaskResumeAll+0x80>
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0e:	fc 01       	movw	r30, r24
    2b10:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b12:	80 93 a7 2c 	sts	0x2CA7, r24	; 0x802ca7 <uxTopReadyPriority>
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1a:	ac 01       	movw	r20, r24
    2b1c:	4e 5f       	subi	r20, 0xFE	; 254
    2b1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
    2b22:	9a 81       	ldd	r25, Y+2	; 0x02
    2b24:	fc 01       	movw	r30, r24
    2b26:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b28:	28 2f       	mov	r18, r24
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	6b e0       	ldi	r22, 0x0B	; 11
    2b2e:	62 9f       	mul	r22, r18
    2b30:	c0 01       	movw	r24, r0
    2b32:	63 9f       	mul	r22, r19
    2b34:	90 0d       	add	r25, r0
    2b36:	11 24       	eor	r1, r1
    2b38:	8a 5b       	subi	r24, 0xBA	; 186
    2b3a:	93 4d       	sbci	r25, 0xD3	; 211
    2b3c:	ba 01       	movw	r22, r20
    2b3e:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	9a 81       	ldd	r25, Y+2	; 0x02
    2b46:	fc 01       	movw	r30, r24
    2b48:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b4a:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    2b4e:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    2b52:	fc 01       	movw	r30, r24
    2b54:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b56:	28 17       	cp	r18, r24
    2b58:	18 f0       	brcs	.+6      	; 0x2b60 <xTaskResumeAll+0xca>
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	80 93 aa 2c 	sts	0x2CAA, r24	; 0x802caa <xYieldPending>
    2b60:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <xPendingReadyList>
    2b64:	88 23       	and	r24, r24
    2b66:	09 f0       	breq	.+2      	; 0x2b6a <xTaskResumeAll+0xd4>
    2b68:	b5 cf       	rjmp	.-150    	; 0x2ad4 <xTaskResumeAll+0x3e>
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6e:	89 2b       	or	r24, r25
    2b70:	11 f0       	breq	.+4      	; 0x2b76 <xTaskResumeAll+0xe0>
    2b72:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <prvResetNextTaskUnblockTime>
    2b76:	80 91 a9 2c 	lds	r24, 0x2CA9	; 0x802ca9 <uxPendedTicks>
    2b7a:	8c 83       	std	Y+4, r24	; 0x04
    2b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7e:	88 23       	and	r24, r24
    2b80:	79 f0       	breq	.+30     	; 0x2ba0 <xTaskResumeAll+0x10a>
    2b82:	0e 94 09 16 	call	0x2c12	; 0x2c12 <xTaskIncrementTick>
    2b86:	88 23       	and	r24, r24
    2b88:	19 f0       	breq	.+6      	; 0x2b90 <xTaskResumeAll+0xfa>
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	80 93 aa 2c 	sts	0x2CAA, r24	; 0x802caa <xYieldPending>
    2b90:	8c 81       	ldd	r24, Y+4	; 0x04
    2b92:	81 50       	subi	r24, 0x01	; 1
    2b94:	8c 83       	std	Y+4, r24	; 0x04
    2b96:	8c 81       	ldd	r24, Y+4	; 0x04
    2b98:	88 23       	and	r24, r24
    2b9a:	99 f7       	brne	.-26     	; 0x2b82 <xTaskResumeAll+0xec>
    2b9c:	10 92 a9 2c 	sts	0x2CA9, r1	; 0x802ca9 <uxPendedTicks>
    2ba0:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <xYieldPending>
    2ba4:	88 23       	and	r24, r24
    2ba6:	21 f0       	breq	.+8      	; 0x2bb0 <xTaskResumeAll+0x11a>
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	8b 83       	std	Y+3, r24	; 0x03
    2bac:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    2bb0:	ff 91       	pop	r31
    2bb2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb8:	24 96       	adiw	r28, 0x04	; 4
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	df 91       	pop	r29
    2bc0:	cf 91       	pop	r28
    2bc2:	08 95       	ret

00002bc4 <xTaskGetTickCount>:
    2bc4:	cf 93       	push	r28
    2bc6:	df 93       	push	r29
    2bc8:	00 d0       	rcall	.+0      	; 0x2bca <xTaskGetTickCount+0x6>
    2bca:	1f 92       	push	r1
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2bd4:	ff 93       	push	r31
    2bd6:	f8 7f       	andi	r31, 0xF8	; 248
    2bd8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2bdc:	80 91 a3 2c 	lds	r24, 0x2CA3	; 0x802ca3 <xTickCount>
    2be0:	90 91 a4 2c 	lds	r25, 0x2CA4	; 0x802ca4 <xTickCount+0x1>
    2be4:	a0 91 a5 2c 	lds	r26, 0x2CA5	; 0x802ca5 <xTickCount+0x2>
    2be8:	b0 91 a6 2c 	lds	r27, 0x2CA6	; 0x802ca6 <xTickCount+0x3>
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	9a 83       	std	Y+2, r25	; 0x02
    2bf0:	ab 83       	std	Y+3, r26	; 0x03
    2bf2:	bc 83       	std	Y+4, r27	; 0x04
    2bf4:	ff 91       	pop	r31
    2bf6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfe:	ab 81       	ldd	r26, Y+3	; 0x03
    2c00:	bc 81       	ldd	r27, Y+4	; 0x04
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	24 96       	adiw	r28, 0x04	; 4
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	df 91       	pop	r29
    2c0e:	cf 91       	pop	r28
    2c10:	08 95       	ret

00002c12 <xTaskIncrementTick>:
    2c12:	cf 93       	push	r28
    2c14:	df 93       	push	r29
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	2d 97       	sbiw	r28, 0x0d	; 13
    2c1c:	cd bf       	out	0x3d, r28	; 61
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	19 82       	std	Y+1, r1	; 0x01
    2c22:	80 91 b3 2c 	lds	r24, 0x2CB3	; 0x802cb3 <uxSchedulerSuspended>
    2c26:	88 23       	and	r24, r24
    2c28:	09 f0       	breq	.+2      	; 0x2c2c <xTaskIncrementTick+0x1a>
    2c2a:	f1 c0       	rjmp	.+482    	; 0x2e0e <xTaskIncrementTick+0x1fc>
    2c2c:	80 91 a3 2c 	lds	r24, 0x2CA3	; 0x802ca3 <xTickCount>
    2c30:	90 91 a4 2c 	lds	r25, 0x2CA4	; 0x802ca4 <xTickCount+0x1>
    2c34:	a0 91 a5 2c 	lds	r26, 0x2CA5	; 0x802ca5 <xTickCount+0x2>
    2c38:	b0 91 a6 2c 	lds	r27, 0x2CA6	; 0x802ca6 <xTickCount+0x3>
    2c3c:	01 96       	adiw	r24, 0x01	; 1
    2c3e:	a1 1d       	adc	r26, r1
    2c40:	b1 1d       	adc	r27, r1
    2c42:	8a 83       	std	Y+2, r24	; 0x02
    2c44:	9b 83       	std	Y+3, r25	; 0x03
    2c46:	ac 83       	std	Y+4, r26	; 0x04
    2c48:	bd 83       	std	Y+5, r27	; 0x05
    2c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4e:	ac 81       	ldd	r26, Y+4	; 0x04
    2c50:	bd 81       	ldd	r27, Y+5	; 0x05
    2c52:	80 93 a3 2c 	sts	0x2CA3, r24	; 0x802ca3 <xTickCount>
    2c56:	90 93 a4 2c 	sts	0x2CA4, r25	; 0x802ca4 <xTickCount+0x1>
    2c5a:	a0 93 a5 2c 	sts	0x2CA5, r26	; 0x802ca5 <xTickCount+0x2>
    2c5e:	b0 93 a6 2c 	sts	0x2CA6, r27	; 0x802ca6 <xTickCount+0x3>
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	9b 81       	ldd	r25, Y+3	; 0x03
    2c66:	ac 81       	ldd	r26, Y+4	; 0x04
    2c68:	bd 81       	ldd	r27, Y+5	; 0x05
    2c6a:	89 2b       	or	r24, r25
    2c6c:	8a 2b       	or	r24, r26
    2c6e:	8b 2b       	or	r24, r27
    2c70:	d9 f4       	brne	.+54     	; 0x2ca8 <xTaskIncrementTick+0x96>
    2c72:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <pxDelayedTaskList>
    2c76:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <pxDelayedTaskList+0x1>
    2c7a:	8e 83       	std	Y+6, r24	; 0x06
    2c7c:	9f 83       	std	Y+7, r25	; 0x07
    2c7e:	80 91 8a 2c 	lds	r24, 0x2C8A	; 0x802c8a <pxOverflowDelayedTaskList>
    2c82:	90 91 8b 2c 	lds	r25, 0x2C8B	; 0x802c8b <pxOverflowDelayedTaskList+0x1>
    2c86:	80 93 88 2c 	sts	0x2C88, r24	; 0x802c88 <pxDelayedTaskList>
    2c8a:	90 93 89 2c 	sts	0x2C89, r25	; 0x802c89 <pxDelayedTaskList+0x1>
    2c8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c90:	9f 81       	ldd	r25, Y+7	; 0x07
    2c92:	80 93 8a 2c 	sts	0x2C8A, r24	; 0x802c8a <pxOverflowDelayedTaskList>
    2c96:	90 93 8b 2c 	sts	0x2C8B, r25	; 0x802c8b <pxOverflowDelayedTaskList+0x1>
    2c9a:	80 91 ab 2c 	lds	r24, 0x2CAB	; 0x802cab <xNumOfOverflows>
    2c9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ca0:	80 93 ab 2c 	sts	0x2CAB, r24	; 0x802cab <xNumOfOverflows>
    2ca4:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <prvResetNextTaskUnblockTime>
    2ca8:	80 91 ad 2c 	lds	r24, 0x2CAD	; 0x802cad <xNextTaskUnblockTime>
    2cac:	90 91 ae 2c 	lds	r25, 0x2CAE	; 0x802cae <xNextTaskUnblockTime+0x1>
    2cb0:	a0 91 af 2c 	lds	r26, 0x2CAF	; 0x802caf <xNextTaskUnblockTime+0x2>
    2cb4:	b0 91 b0 2c 	lds	r27, 0x2CB0	; 0x802cb0 <xNextTaskUnblockTime+0x3>
    2cb8:	2a 81       	ldd	r18, Y+2	; 0x02
    2cba:	3b 81       	ldd	r19, Y+3	; 0x03
    2cbc:	4c 81       	ldd	r20, Y+4	; 0x04
    2cbe:	5d 81       	ldd	r21, Y+5	; 0x05
    2cc0:	28 17       	cp	r18, r24
    2cc2:	39 07       	cpc	r19, r25
    2cc4:	4a 07       	cpc	r20, r26
    2cc6:	5b 07       	cpc	r21, r27
    2cc8:	08 f4       	brcc	.+2      	; 0x2ccc <xTaskIncrementTick+0xba>
    2cca:	8a c0       	rjmp	.+276    	; 0x2de0 <xTaskIncrementTick+0x1ce>
    2ccc:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <pxDelayedTaskList>
    2cd0:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <pxDelayedTaskList+0x1>
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	80 81       	ld	r24, Z
    2cd8:	88 23       	and	r24, r24
    2cda:	61 f4       	brne	.+24     	; 0x2cf4 <xTaskIncrementTick+0xe2>
    2cdc:	8f ef       	ldi	r24, 0xFF	; 255
    2cde:	9f ef       	ldi	r25, 0xFF	; 255
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	80 93 ad 2c 	sts	0x2CAD, r24	; 0x802cad <xNextTaskUnblockTime>
    2ce6:	90 93 ae 2c 	sts	0x2CAE, r25	; 0x802cae <xNextTaskUnblockTime+0x1>
    2cea:	a0 93 af 2c 	sts	0x2CAF, r26	; 0x802caf <xNextTaskUnblockTime+0x2>
    2cee:	b0 93 b0 2c 	sts	0x2CB0, r27	; 0x802cb0 <xNextTaskUnblockTime+0x3>
    2cf2:	76 c0       	rjmp	.+236    	; 0x2de0 <xTaskIncrementTick+0x1ce>
    2cf4:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <pxDelayedTaskList>
    2cf8:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <pxDelayedTaskList+0x1>
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	87 81       	ldd	r24, Z+7	; 0x07
    2d00:	90 85       	ldd	r25, Z+8	; 0x08
    2d02:	fc 01       	movw	r30, r24
    2d04:	80 85       	ldd	r24, Z+8	; 0x08
    2d06:	91 85       	ldd	r25, Z+9	; 0x09
    2d08:	88 87       	std	Y+8, r24	; 0x08
    2d0a:	99 87       	std	Y+9, r25	; 0x09
    2d0c:	88 85       	ldd	r24, Y+8	; 0x08
    2d0e:	99 85       	ldd	r25, Y+9	; 0x09
    2d10:	fc 01       	movw	r30, r24
    2d12:	82 81       	ldd	r24, Z+2	; 0x02
    2d14:	93 81       	ldd	r25, Z+3	; 0x03
    2d16:	a4 81       	ldd	r26, Z+4	; 0x04
    2d18:	b5 81       	ldd	r27, Z+5	; 0x05
    2d1a:	8a 87       	std	Y+10, r24	; 0x0a
    2d1c:	9b 87       	std	Y+11, r25	; 0x0b
    2d1e:	ac 87       	std	Y+12, r26	; 0x0c
    2d20:	bd 87       	std	Y+13, r27	; 0x0d
    2d22:	2a 81       	ldd	r18, Y+2	; 0x02
    2d24:	3b 81       	ldd	r19, Y+3	; 0x03
    2d26:	4c 81       	ldd	r20, Y+4	; 0x04
    2d28:	5d 81       	ldd	r21, Y+5	; 0x05
    2d2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d2e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2d30:	bd 85       	ldd	r27, Y+13	; 0x0d
    2d32:	28 17       	cp	r18, r24
    2d34:	39 07       	cpc	r19, r25
    2d36:	4a 07       	cpc	r20, r26
    2d38:	5b 07       	cpc	r21, r27
    2d3a:	68 f4       	brcc	.+26     	; 0x2d56 <xTaskIncrementTick+0x144>
    2d3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d40:	ac 85       	ldd	r26, Y+12	; 0x0c
    2d42:	bd 85       	ldd	r27, Y+13	; 0x0d
    2d44:	80 93 ad 2c 	sts	0x2CAD, r24	; 0x802cad <xNextTaskUnblockTime>
    2d48:	90 93 ae 2c 	sts	0x2CAE, r25	; 0x802cae <xNextTaskUnblockTime+0x1>
    2d4c:	a0 93 af 2c 	sts	0x2CAF, r26	; 0x802caf <xNextTaskUnblockTime+0x2>
    2d50:	b0 93 b0 2c 	sts	0x2CB0, r27	; 0x802cb0 <xNextTaskUnblockTime+0x3>
    2d54:	45 c0       	rjmp	.+138    	; 0x2de0 <xTaskIncrementTick+0x1ce>
    2d56:	88 85       	ldd	r24, Y+8	; 0x08
    2d58:	99 85       	ldd	r25, Y+9	; 0x09
    2d5a:	02 96       	adiw	r24, 0x02	; 2
    2d5c:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    2d60:	88 85       	ldd	r24, Y+8	; 0x08
    2d62:	99 85       	ldd	r25, Y+9	; 0x09
    2d64:	fc 01       	movw	r30, r24
    2d66:	80 8d       	ldd	r24, Z+24	; 0x18
    2d68:	91 8d       	ldd	r25, Z+25	; 0x19
    2d6a:	89 2b       	or	r24, r25
    2d6c:	29 f0       	breq	.+10     	; 0x2d78 <xTaskIncrementTick+0x166>
    2d6e:	88 85       	ldd	r24, Y+8	; 0x08
    2d70:	99 85       	ldd	r25, Y+9	; 0x09
    2d72:	0e 96       	adiw	r24, 0x0e	; 14
    2d74:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    2d78:	88 85       	ldd	r24, Y+8	; 0x08
    2d7a:	99 85       	ldd	r25, Y+9	; 0x09
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d80:	80 91 a7 2c 	lds	r24, 0x2CA7	; 0x802ca7 <uxTopReadyPriority>
    2d84:	89 17       	cp	r24, r25
    2d86:	30 f4       	brcc	.+12     	; 0x2d94 <xTaskIncrementTick+0x182>
    2d88:	88 85       	ldd	r24, Y+8	; 0x08
    2d8a:	99 85       	ldd	r25, Y+9	; 0x09
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d90:	80 93 a7 2c 	sts	0x2CA7, r24	; 0x802ca7 <uxTopReadyPriority>
    2d94:	88 85       	ldd	r24, Y+8	; 0x08
    2d96:	99 85       	ldd	r25, Y+9	; 0x09
    2d98:	ac 01       	movw	r20, r24
    2d9a:	4e 5f       	subi	r20, 0xFE	; 254
    2d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d9e:	88 85       	ldd	r24, Y+8	; 0x08
    2da0:	99 85       	ldd	r25, Y+9	; 0x09
    2da2:	fc 01       	movw	r30, r24
    2da4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2da6:	28 2f       	mov	r18, r24
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	6b e0       	ldi	r22, 0x0B	; 11
    2dac:	62 9f       	mul	r22, r18
    2dae:	c0 01       	movw	r24, r0
    2db0:	63 9f       	mul	r22, r19
    2db2:	90 0d       	add	r25, r0
    2db4:	11 24       	eor	r1, r1
    2db6:	8a 5b       	subi	r24, 0xBA	; 186
    2db8:	93 4d       	sbci	r25, 0xD3	; 211
    2dba:	ba 01       	movw	r22, r20
    2dbc:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    2dc0:	88 85       	ldd	r24, Y+8	; 0x08
    2dc2:	99 85       	ldd	r25, Y+9	; 0x09
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	22 8d       	ldd	r18, Z+26	; 0x1a
    2dc8:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    2dcc:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dd4:	28 17       	cp	r18, r24
    2dd6:	08 f4       	brcc	.+2      	; 0x2dda <xTaskIncrementTick+0x1c8>
    2dd8:	79 cf       	rjmp	.-270    	; 0x2ccc <xTaskIncrementTick+0xba>
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	89 83       	std	Y+1, r24	; 0x01
    2dde:	76 cf       	rjmp	.-276    	; 0x2ccc <xTaskIncrementTick+0xba>
    2de0:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    2de4:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    2de8:	fc 01       	movw	r30, r24
    2dea:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dec:	28 2f       	mov	r18, r24
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	4b e0       	ldi	r20, 0x0B	; 11
    2df2:	42 9f       	mul	r20, r18
    2df4:	c0 01       	movw	r24, r0
    2df6:	43 9f       	mul	r20, r19
    2df8:	90 0d       	add	r25, r0
    2dfa:	11 24       	eor	r1, r1
    2dfc:	8a 5b       	subi	r24, 0xBA	; 186
    2dfe:	93 4d       	sbci	r25, 0xD3	; 211
    2e00:	fc 01       	movw	r30, r24
    2e02:	80 81       	ld	r24, Z
    2e04:	82 30       	cpi	r24, 0x02	; 2
    2e06:	40 f0       	brcs	.+16     	; 0x2e18 <xTaskIncrementTick+0x206>
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	89 83       	std	Y+1, r24	; 0x01
    2e0c:	05 c0       	rjmp	.+10     	; 0x2e18 <xTaskIncrementTick+0x206>
    2e0e:	80 91 a9 2c 	lds	r24, 0x2CA9	; 0x802ca9 <uxPendedTicks>
    2e12:	8f 5f       	subi	r24, 0xFF	; 255
    2e14:	80 93 a9 2c 	sts	0x2CA9, r24	; 0x802ca9 <uxPendedTicks>
    2e18:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <xYieldPending>
    2e1c:	88 23       	and	r24, r24
    2e1e:	11 f0       	breq	.+4      	; 0x2e24 <xTaskIncrementTick+0x212>
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	89 83       	std	Y+1, r24	; 0x01
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	2d 96       	adiw	r28, 0x0d	; 13
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	de bf       	out	0x3e, r29	; 62
    2e2c:	df 91       	pop	r29
    2e2e:	cf 91       	pop	r28
    2e30:	08 95       	ret

00002e32 <vTaskSwitchContext>:
    2e32:	cf 93       	push	r28
    2e34:	df 93       	push	r29
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
    2e3a:	29 97       	sbiw	r28, 0x09	; 9
    2e3c:	cd bf       	out	0x3d, r28	; 61
    2e3e:	de bf       	out	0x3e, r29	; 62
    2e40:	80 91 b3 2c 	lds	r24, 0x2CB3	; 0x802cb3 <uxSchedulerSuspended>
    2e44:	88 23       	and	r24, r24
    2e46:	21 f0       	breq	.+8      	; 0x2e50 <vTaskSwitchContext+0x1e>
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	80 93 aa 2c 	sts	0x2CAA, r24	; 0x802caa <xYieldPending>
    2e4e:	ba c0       	rjmp	.+372    	; 0x2fc4 <vTaskSwitchContext+0x192>
    2e50:	10 92 aa 2c 	sts	0x2CAA, r1	; 0x802caa <xYieldPending>
    2e54:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    2e58:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2e60:	94 8d       	ldd	r25, Z+28	; 0x1c
    2e62:	8a 83       	std	Y+2, r24	; 0x02
    2e64:	9b 83       	std	Y+3, r25	; 0x03
    2e66:	85 ea       	ldi	r24, 0xA5	; 165
    2e68:	95 ea       	ldi	r25, 0xA5	; 165
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	8c 83       	std	Y+4, r24	; 0x04
    2e6e:	9d 83       	std	Y+5, r25	; 0x05
    2e70:	ae 83       	std	Y+6, r26	; 0x06
    2e72:	bf 83       	std	Y+7, r27	; 0x07
    2e74:	8a 81       	ldd	r24, Y+2	; 0x02
    2e76:	9b 81       	ldd	r25, Y+3	; 0x03
    2e78:	fc 01       	movw	r30, r24
    2e7a:	20 81       	ld	r18, Z
    2e7c:	31 81       	ldd	r19, Z+1	; 0x01
    2e7e:	42 81       	ldd	r20, Z+2	; 0x02
    2e80:	53 81       	ldd	r21, Z+3	; 0x03
    2e82:	8c 81       	ldd	r24, Y+4	; 0x04
    2e84:	9d 81       	ldd	r25, Y+5	; 0x05
    2e86:	ae 81       	ldd	r26, Y+6	; 0x06
    2e88:	bf 81       	ldd	r27, Y+7	; 0x07
    2e8a:	28 17       	cp	r18, r24
    2e8c:	39 07       	cpc	r19, r25
    2e8e:	4a 07       	cpc	r20, r26
    2e90:	5b 07       	cpc	r21, r27
    2e92:	99 f5       	brne	.+102    	; 0x2efa <vTaskSwitchContext+0xc8>
    2e94:	8a 81       	ldd	r24, Y+2	; 0x02
    2e96:	9b 81       	ldd	r25, Y+3	; 0x03
    2e98:	04 96       	adiw	r24, 0x04	; 4
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	20 81       	ld	r18, Z
    2e9e:	31 81       	ldd	r19, Z+1	; 0x01
    2ea0:	42 81       	ldd	r20, Z+2	; 0x02
    2ea2:	53 81       	ldd	r21, Z+3	; 0x03
    2ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea8:	ae 81       	ldd	r26, Y+6	; 0x06
    2eaa:	bf 81       	ldd	r27, Y+7	; 0x07
    2eac:	28 17       	cp	r18, r24
    2eae:	39 07       	cpc	r19, r25
    2eb0:	4a 07       	cpc	r20, r26
    2eb2:	5b 07       	cpc	r21, r27
    2eb4:	11 f5       	brne	.+68     	; 0x2efa <vTaskSwitchContext+0xc8>
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eba:	08 96       	adiw	r24, 0x08	; 8
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	20 81       	ld	r18, Z
    2ec0:	31 81       	ldd	r19, Z+1	; 0x01
    2ec2:	42 81       	ldd	r20, Z+2	; 0x02
    2ec4:	53 81       	ldd	r21, Z+3	; 0x03
    2ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec8:	9d 81       	ldd	r25, Y+5	; 0x05
    2eca:	ae 81       	ldd	r26, Y+6	; 0x06
    2ecc:	bf 81       	ldd	r27, Y+7	; 0x07
    2ece:	28 17       	cp	r18, r24
    2ed0:	39 07       	cpc	r19, r25
    2ed2:	4a 07       	cpc	r20, r26
    2ed4:	5b 07       	cpc	r21, r27
    2ed6:	89 f4       	brne	.+34     	; 0x2efa <vTaskSwitchContext+0xc8>
    2ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eda:	9b 81       	ldd	r25, Y+3	; 0x03
    2edc:	0c 96       	adiw	r24, 0x0c	; 12
    2ede:	fc 01       	movw	r30, r24
    2ee0:	20 81       	ld	r18, Z
    2ee2:	31 81       	ldd	r19, Z+1	; 0x01
    2ee4:	42 81       	ldd	r20, Z+2	; 0x02
    2ee6:	53 81       	ldd	r21, Z+3	; 0x03
    2ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eea:	9d 81       	ldd	r25, Y+5	; 0x05
    2eec:	ae 81       	ldd	r26, Y+6	; 0x06
    2eee:	bf 81       	ldd	r27, Y+7	; 0x07
    2ef0:	28 17       	cp	r18, r24
    2ef2:	39 07       	cpc	r19, r25
    2ef4:	4a 07       	cpc	r20, r26
    2ef6:	5b 07       	cpc	r21, r27
    2ef8:	71 f0       	breq	.+28     	; 0x2f16 <vTaskSwitchContext+0xe4>
    2efa:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    2efe:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    2f02:	9c 01       	movw	r18, r24
    2f04:	23 5e       	subi	r18, 0xE3	; 227
    2f06:	3f 4f       	sbci	r19, 0xFF	; 255
    2f08:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    2f0c:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    2f10:	b9 01       	movw	r22, r18
    2f12:	0e 94 10 04 	call	0x820	; 0x820 <vApplicationStackOverflowHook>
    2f16:	80 91 a7 2c 	lds	r24, 0x2CA7	; 0x802ca7 <uxTopReadyPriority>
    2f1a:	89 83       	std	Y+1, r24	; 0x01
    2f1c:	03 c0       	rjmp	.+6      	; 0x2f24 <vTaskSwitchContext+0xf2>
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	81 50       	subi	r24, 0x01	; 1
    2f22:	89 83       	std	Y+1, r24	; 0x01
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	28 2f       	mov	r18, r24
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	4b e0       	ldi	r20, 0x0B	; 11
    2f2c:	42 9f       	mul	r20, r18
    2f2e:	c0 01       	movw	r24, r0
    2f30:	43 9f       	mul	r20, r19
    2f32:	90 0d       	add	r25, r0
    2f34:	11 24       	eor	r1, r1
    2f36:	8a 5b       	subi	r24, 0xBA	; 186
    2f38:	93 4d       	sbci	r25, 0xD3	; 211
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	80 81       	ld	r24, Z
    2f3e:	88 23       	and	r24, r24
    2f40:	71 f3       	breq	.-36     	; 0x2f1e <vTaskSwitchContext+0xec>
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	28 2f       	mov	r18, r24
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	4b e0       	ldi	r20, 0x0B	; 11
    2f4a:	42 9f       	mul	r20, r18
    2f4c:	c0 01       	movw	r24, r0
    2f4e:	43 9f       	mul	r20, r19
    2f50:	90 0d       	add	r25, r0
    2f52:	11 24       	eor	r1, r1
    2f54:	8a 5b       	subi	r24, 0xBA	; 186
    2f56:	93 4d       	sbci	r25, 0xD3	; 211
    2f58:	88 87       	std	Y+8, r24	; 0x08
    2f5a:	99 87       	std	Y+9, r25	; 0x09
    2f5c:	88 85       	ldd	r24, Y+8	; 0x08
    2f5e:	99 85       	ldd	r25, Y+9	; 0x09
    2f60:	fc 01       	movw	r30, r24
    2f62:	81 81       	ldd	r24, Z+1	; 0x01
    2f64:	92 81       	ldd	r25, Z+2	; 0x02
    2f66:	fc 01       	movw	r30, r24
    2f68:	24 81       	ldd	r18, Z+4	; 0x04
    2f6a:	35 81       	ldd	r19, Z+5	; 0x05
    2f6c:	88 85       	ldd	r24, Y+8	; 0x08
    2f6e:	99 85       	ldd	r25, Y+9	; 0x09
    2f70:	fc 01       	movw	r30, r24
    2f72:	21 83       	std	Z+1, r18	; 0x01
    2f74:	32 83       	std	Z+2, r19	; 0x02
    2f76:	88 85       	ldd	r24, Y+8	; 0x08
    2f78:	99 85       	ldd	r25, Y+9	; 0x09
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	21 81       	ldd	r18, Z+1	; 0x01
    2f7e:	32 81       	ldd	r19, Z+2	; 0x02
    2f80:	88 85       	ldd	r24, Y+8	; 0x08
    2f82:	99 85       	ldd	r25, Y+9	; 0x09
    2f84:	03 96       	adiw	r24, 0x03	; 3
    2f86:	28 17       	cp	r18, r24
    2f88:	39 07       	cpc	r19, r25
    2f8a:	69 f4       	brne	.+26     	; 0x2fa6 <vTaskSwitchContext+0x174>
    2f8c:	88 85       	ldd	r24, Y+8	; 0x08
    2f8e:	99 85       	ldd	r25, Y+9	; 0x09
    2f90:	fc 01       	movw	r30, r24
    2f92:	81 81       	ldd	r24, Z+1	; 0x01
    2f94:	92 81       	ldd	r25, Z+2	; 0x02
    2f96:	fc 01       	movw	r30, r24
    2f98:	24 81       	ldd	r18, Z+4	; 0x04
    2f9a:	35 81       	ldd	r19, Z+5	; 0x05
    2f9c:	88 85       	ldd	r24, Y+8	; 0x08
    2f9e:	99 85       	ldd	r25, Y+9	; 0x09
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	21 83       	std	Z+1, r18	; 0x01
    2fa4:	32 83       	std	Z+2, r19	; 0x02
    2fa6:	88 85       	ldd	r24, Y+8	; 0x08
    2fa8:	99 85       	ldd	r25, Y+9	; 0x09
    2faa:	fc 01       	movw	r30, r24
    2fac:	81 81       	ldd	r24, Z+1	; 0x01
    2fae:	92 81       	ldd	r25, Z+2	; 0x02
    2fb0:	fc 01       	movw	r30, r24
    2fb2:	80 85       	ldd	r24, Z+8	; 0x08
    2fb4:	91 85       	ldd	r25, Z+9	; 0x09
    2fb6:	80 93 44 2c 	sts	0x2C44, r24	; 0x802c44 <pxCurrentTCB>
    2fba:	90 93 45 2c 	sts	0x2C45, r25	; 0x802c45 <pxCurrentTCB+0x1>
    2fbe:	89 81       	ldd	r24, Y+1	; 0x01
    2fc0:	80 93 a7 2c 	sts	0x2CA7, r24	; 0x802ca7 <uxTopReadyPriority>
    2fc4:	00 00       	nop
    2fc6:	29 96       	adiw	r28, 0x09	; 9
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	08 95       	ret

00002fd2 <vTaskPlaceOnEventList>:
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <vTaskPlaceOnEventList+0x6>
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <vTaskPlaceOnEventList+0x8>
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
    2fde:	89 83       	std	Y+1, r24	; 0x01
    2fe0:	9a 83       	std	Y+2, r25	; 0x02
    2fe2:	4b 83       	std	Y+3, r20	; 0x03
    2fe4:	5c 83       	std	Y+4, r21	; 0x04
    2fe6:	6d 83       	std	Y+5, r22	; 0x05
    2fe8:	7e 83       	std	Y+6, r23	; 0x06
    2fea:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    2fee:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    2ff2:	9c 01       	movw	r18, r24
    2ff4:	22 5f       	subi	r18, 0xF2	; 242
    2ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffc:	b9 01       	movw	r22, r18
    2ffe:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>
    3002:	8b 81       	ldd	r24, Y+3	; 0x03
    3004:	9c 81       	ldd	r25, Y+4	; 0x04
    3006:	ad 81       	ldd	r26, Y+5	; 0x05
    3008:	be 81       	ldd	r27, Y+6	; 0x06
    300a:	41 e0       	ldi	r20, 0x01	; 1
    300c:	bc 01       	movw	r22, r24
    300e:	cd 01       	movw	r24, r26
    3010:	0e 94 15 1b 	call	0x362a	; 0x362a <prvAddCurrentTaskToDelayedList>
    3014:	00 00       	nop
    3016:	26 96       	adiw	r28, 0x06	; 6
    3018:	cd bf       	out	0x3d, r28	; 61
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	df 91       	pop	r29
    301e:	cf 91       	pop	r28
    3020:	08 95       	ret

00003022 <vTaskPlaceOnUnorderedEventList>:
    3022:	0f 93       	push	r16
    3024:	1f 93       	push	r17
    3026:	cf 93       	push	r28
    3028:	df 93       	push	r29
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	2a 97       	sbiw	r28, 0x0a	; 10
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	89 83       	std	Y+1, r24	; 0x01
    3036:	9a 83       	std	Y+2, r25	; 0x02
    3038:	4b 83       	std	Y+3, r20	; 0x03
    303a:	5c 83       	std	Y+4, r21	; 0x04
    303c:	6d 83       	std	Y+5, r22	; 0x05
    303e:	7e 83       	std	Y+6, r23	; 0x06
    3040:	0f 83       	std	Y+7, r16	; 0x07
    3042:	18 87       	std	Y+8, r17	; 0x08
    3044:	29 87       	std	Y+9, r18	; 0x09
    3046:	3a 87       	std	Y+10, r19	; 0x0a
    3048:	20 91 44 2c 	lds	r18, 0x2C44	; 0x802c44 <pxCurrentTCB>
    304c:	30 91 45 2c 	lds	r19, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    3050:	8b 81       	ldd	r24, Y+3	; 0x03
    3052:	9c 81       	ldd	r25, Y+4	; 0x04
    3054:	ad 81       	ldd	r26, Y+5	; 0x05
    3056:	be 81       	ldd	r27, Y+6	; 0x06
    3058:	b0 68       	ori	r27, 0x80	; 128
    305a:	f9 01       	movw	r30, r18
    305c:	86 87       	std	Z+14, r24	; 0x0e
    305e:	97 87       	std	Z+15, r25	; 0x0f
    3060:	a0 8b       	std	Z+16, r26	; 0x10
    3062:	b1 8b       	std	Z+17, r27	; 0x11
    3064:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    3068:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    306c:	9c 01       	movw	r18, r24
    306e:	22 5f       	subi	r18, 0xF2	; 242
    3070:	3f 4f       	sbci	r19, 0xFF	; 255
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	9a 81       	ldd	r25, Y+2	; 0x02
    3076:	b9 01       	movw	r22, r18
    3078:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    307c:	8f 81       	ldd	r24, Y+7	; 0x07
    307e:	98 85       	ldd	r25, Y+8	; 0x08
    3080:	a9 85       	ldd	r26, Y+9	; 0x09
    3082:	ba 85       	ldd	r27, Y+10	; 0x0a
    3084:	41 e0       	ldi	r20, 0x01	; 1
    3086:	bc 01       	movw	r22, r24
    3088:	cd 01       	movw	r24, r26
    308a:	0e 94 15 1b 	call	0x362a	; 0x362a <prvAddCurrentTaskToDelayedList>
    308e:	00 00       	nop
    3090:	2a 96       	adiw	r28, 0x0a	; 10
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	de bf       	out	0x3e, r29	; 62
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	1f 91       	pop	r17
    309c:	0f 91       	pop	r16
    309e:	08 95       	ret

000030a0 <vTaskPlaceOnEventListRestricted>:
    30a0:	cf 93       	push	r28
    30a2:	df 93       	push	r29
    30a4:	cd b7       	in	r28, 0x3d	; 61
    30a6:	de b7       	in	r29, 0x3e	; 62
    30a8:	27 97       	sbiw	r28, 0x07	; 7
    30aa:	cd bf       	out	0x3d, r28	; 61
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	89 83       	std	Y+1, r24	; 0x01
    30b0:	9a 83       	std	Y+2, r25	; 0x02
    30b2:	4b 83       	std	Y+3, r20	; 0x03
    30b4:	5c 83       	std	Y+4, r21	; 0x04
    30b6:	6d 83       	std	Y+5, r22	; 0x05
    30b8:	7e 83       	std	Y+6, r23	; 0x06
    30ba:	2f 83       	std	Y+7, r18	; 0x07
    30bc:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    30c0:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    30c4:	9c 01       	movw	r18, r24
    30c6:	22 5f       	subi	r18, 0xF2	; 242
    30c8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
    30cc:	9a 81       	ldd	r25, Y+2	; 0x02
    30ce:	b9 01       	movw	r22, r18
    30d0:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    30d4:	8f 81       	ldd	r24, Y+7	; 0x07
    30d6:	88 23       	and	r24, r24
    30d8:	39 f0       	breq	.+14     	; 0x30e8 <vTaskPlaceOnEventListRestricted+0x48>
    30da:	8f ef       	ldi	r24, 0xFF	; 255
    30dc:	9f ef       	ldi	r25, 0xFF	; 255
    30de:	dc 01       	movw	r26, r24
    30e0:	8b 83       	std	Y+3, r24	; 0x03
    30e2:	9c 83       	std	Y+4, r25	; 0x04
    30e4:	ad 83       	std	Y+5, r26	; 0x05
    30e6:	be 83       	std	Y+6, r27	; 0x06
    30e8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ea:	9c 81       	ldd	r25, Y+4	; 0x04
    30ec:	ad 81       	ldd	r26, Y+5	; 0x05
    30ee:	be 81       	ldd	r27, Y+6	; 0x06
    30f0:	4f 81       	ldd	r20, Y+7	; 0x07
    30f2:	bc 01       	movw	r22, r24
    30f4:	cd 01       	movw	r24, r26
    30f6:	0e 94 15 1b 	call	0x362a	; 0x362a <prvAddCurrentTaskToDelayedList>
    30fa:	00 00       	nop
    30fc:	27 96       	adiw	r28, 0x07	; 7
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	de bf       	out	0x3e, r29	; 62
    3102:	df 91       	pop	r29
    3104:	cf 91       	pop	r28
    3106:	08 95       	ret

00003108 <xTaskRemoveFromEventList>:
    3108:	cf 93       	push	r28
    310a:	df 93       	push	r29
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
    3110:	25 97       	sbiw	r28, 0x05	; 5
    3112:	cd bf       	out	0x3d, r28	; 61
    3114:	de bf       	out	0x3e, r29	; 62
    3116:	8c 83       	std	Y+4, r24	; 0x04
    3118:	9d 83       	std	Y+5, r25	; 0x05
    311a:	8c 81       	ldd	r24, Y+4	; 0x04
    311c:	9d 81       	ldd	r25, Y+5	; 0x05
    311e:	fc 01       	movw	r30, r24
    3120:	87 81       	ldd	r24, Z+7	; 0x07
    3122:	90 85       	ldd	r25, Z+8	; 0x08
    3124:	fc 01       	movw	r30, r24
    3126:	80 85       	ldd	r24, Z+8	; 0x08
    3128:	91 85       	ldd	r25, Z+9	; 0x09
    312a:	8a 83       	std	Y+2, r24	; 0x02
    312c:	9b 83       	std	Y+3, r25	; 0x03
    312e:	8a 81       	ldd	r24, Y+2	; 0x02
    3130:	9b 81       	ldd	r25, Y+3	; 0x03
    3132:	0e 96       	adiw	r24, 0x0e	; 14
    3134:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    3138:	80 91 b3 2c 	lds	r24, 0x2CB3	; 0x802cb3 <uxSchedulerSuspended>
    313c:	88 23       	and	r24, r24
    313e:	51 f5       	brne	.+84     	; 0x3194 <xTaskRemoveFromEventList+0x8c>
    3140:	8a 81       	ldd	r24, Y+2	; 0x02
    3142:	9b 81       	ldd	r25, Y+3	; 0x03
    3144:	02 96       	adiw	r24, 0x02	; 2
    3146:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    314a:	8a 81       	ldd	r24, Y+2	; 0x02
    314c:	9b 81       	ldd	r25, Y+3	; 0x03
    314e:	fc 01       	movw	r30, r24
    3150:	92 8d       	ldd	r25, Z+26	; 0x1a
    3152:	80 91 a7 2c 	lds	r24, 0x2CA7	; 0x802ca7 <uxTopReadyPriority>
    3156:	89 17       	cp	r24, r25
    3158:	30 f4       	brcc	.+12     	; 0x3166 <xTaskRemoveFromEventList+0x5e>
    315a:	8a 81       	ldd	r24, Y+2	; 0x02
    315c:	9b 81       	ldd	r25, Y+3	; 0x03
    315e:	fc 01       	movw	r30, r24
    3160:	82 8d       	ldd	r24, Z+26	; 0x1a
    3162:	80 93 a7 2c 	sts	0x2CA7, r24	; 0x802ca7 <uxTopReadyPriority>
    3166:	8a 81       	ldd	r24, Y+2	; 0x02
    3168:	9b 81       	ldd	r25, Y+3	; 0x03
    316a:	ac 01       	movw	r20, r24
    316c:	4e 5f       	subi	r20, 0xFE	; 254
    316e:	5f 4f       	sbci	r21, 0xFF	; 255
    3170:	8a 81       	ldd	r24, Y+2	; 0x02
    3172:	9b 81       	ldd	r25, Y+3	; 0x03
    3174:	fc 01       	movw	r30, r24
    3176:	82 8d       	ldd	r24, Z+26	; 0x1a
    3178:	28 2f       	mov	r18, r24
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	6b e0       	ldi	r22, 0x0B	; 11
    317e:	62 9f       	mul	r22, r18
    3180:	c0 01       	movw	r24, r0
    3182:	63 9f       	mul	r22, r19
    3184:	90 0d       	add	r25, r0
    3186:	11 24       	eor	r1, r1
    3188:	8a 5b       	subi	r24, 0xBA	; 186
    318a:	93 4d       	sbci	r25, 0xD3	; 211
    318c:	ba 01       	movw	r22, r20
    318e:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    3192:	08 c0       	rjmp	.+16     	; 0x31a4 <xTaskRemoveFromEventList+0x9c>
    3194:	8a 81       	ldd	r24, Y+2	; 0x02
    3196:	9b 81       	ldd	r25, Y+3	; 0x03
    3198:	0e 96       	adiw	r24, 0x0e	; 14
    319a:	bc 01       	movw	r22, r24
    319c:	8c e8       	ldi	r24, 0x8C	; 140
    319e:	9c e2       	ldi	r25, 0x2C	; 44
    31a0:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    31a4:	8a 81       	ldd	r24, Y+2	; 0x02
    31a6:	9b 81       	ldd	r25, Y+3	; 0x03
    31a8:	fc 01       	movw	r30, r24
    31aa:	22 8d       	ldd	r18, Z+26	; 0x1a
    31ac:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    31b0:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    31b4:	fc 01       	movw	r30, r24
    31b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    31b8:	82 17       	cp	r24, r18
    31ba:	30 f4       	brcc	.+12     	; 0x31c8 <xTaskRemoveFromEventList+0xc0>
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	89 83       	std	Y+1, r24	; 0x01
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	80 93 aa 2c 	sts	0x2CAA, r24	; 0x802caa <xYieldPending>
    31c6:	01 c0       	rjmp	.+2      	; 0x31ca <xTaskRemoveFromEventList+0xc2>
    31c8:	19 82       	std	Y+1, r1	; 0x01
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	25 96       	adiw	r28, 0x05	; 5
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	df 91       	pop	r29
    31d4:	cf 91       	pop	r28
    31d6:	08 95       	ret

000031d8 <vTaskRemoveFromUnorderedEventList>:
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	28 97       	sbiw	r28, 0x08	; 8
    31e2:	cd bf       	out	0x3d, r28	; 61
    31e4:	de bf       	out	0x3e, r29	; 62
    31e6:	8b 83       	std	Y+3, r24	; 0x03
    31e8:	9c 83       	std	Y+4, r25	; 0x04
    31ea:	4d 83       	std	Y+5, r20	; 0x05
    31ec:	5e 83       	std	Y+6, r21	; 0x06
    31ee:	6f 83       	std	Y+7, r22	; 0x07
    31f0:	78 87       	std	Y+8, r23	; 0x08
    31f2:	8d 81       	ldd	r24, Y+5	; 0x05
    31f4:	9e 81       	ldd	r25, Y+6	; 0x06
    31f6:	af 81       	ldd	r26, Y+7	; 0x07
    31f8:	b8 85       	ldd	r27, Y+8	; 0x08
    31fa:	b0 68       	ori	r27, 0x80	; 128
    31fc:	2b 81       	ldd	r18, Y+3	; 0x03
    31fe:	3c 81       	ldd	r19, Y+4	; 0x04
    3200:	f9 01       	movw	r30, r18
    3202:	80 83       	st	Z, r24
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	a2 83       	std	Z+2, r26	; 0x02
    3208:	b3 83       	std	Z+3, r27	; 0x03
    320a:	8b 81       	ldd	r24, Y+3	; 0x03
    320c:	9c 81       	ldd	r25, Y+4	; 0x04
    320e:	fc 01       	movw	r30, r24
    3210:	80 85       	ldd	r24, Z+8	; 0x08
    3212:	91 85       	ldd	r25, Z+9	; 0x09
    3214:	89 83       	std	Y+1, r24	; 0x01
    3216:	9a 83       	std	Y+2, r25	; 0x02
    3218:	8b 81       	ldd	r24, Y+3	; 0x03
    321a:	9c 81       	ldd	r25, Y+4	; 0x04
    321c:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	9a 81       	ldd	r25, Y+2	; 0x02
    3224:	02 96       	adiw	r24, 0x02	; 2
    3226:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	9a 81       	ldd	r25, Y+2	; 0x02
    322e:	fc 01       	movw	r30, r24
    3230:	92 8d       	ldd	r25, Z+26	; 0x1a
    3232:	80 91 a7 2c 	lds	r24, 0x2CA7	; 0x802ca7 <uxTopReadyPriority>
    3236:	89 17       	cp	r24, r25
    3238:	30 f4       	brcc	.+12     	; 0x3246 <vTaskRemoveFromUnorderedEventList+0x6e>
    323a:	89 81       	ldd	r24, Y+1	; 0x01
    323c:	9a 81       	ldd	r25, Y+2	; 0x02
    323e:	fc 01       	movw	r30, r24
    3240:	82 8d       	ldd	r24, Z+26	; 0x1a
    3242:	80 93 a7 2c 	sts	0x2CA7, r24	; 0x802ca7 <uxTopReadyPriority>
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	9a 81       	ldd	r25, Y+2	; 0x02
    324a:	ac 01       	movw	r20, r24
    324c:	4e 5f       	subi	r20, 0xFE	; 254
    324e:	5f 4f       	sbci	r21, 0xFF	; 255
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	9a 81       	ldd	r25, Y+2	; 0x02
    3254:	fc 01       	movw	r30, r24
    3256:	82 8d       	ldd	r24, Z+26	; 0x1a
    3258:	28 2f       	mov	r18, r24
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	6b e0       	ldi	r22, 0x0B	; 11
    325e:	62 9f       	mul	r22, r18
    3260:	c0 01       	movw	r24, r0
    3262:	63 9f       	mul	r22, r19
    3264:	90 0d       	add	r25, r0
    3266:	11 24       	eor	r1, r1
    3268:	8a 5b       	subi	r24, 0xBA	; 186
    326a:	93 4d       	sbci	r25, 0xD3	; 211
    326c:	ba 01       	movw	r22, r20
    326e:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	9a 81       	ldd	r25, Y+2	; 0x02
    3276:	fc 01       	movw	r30, r24
    3278:	22 8d       	ldd	r18, Z+26	; 0x1a
    327a:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    327e:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    3282:	fc 01       	movw	r30, r24
    3284:	82 8d       	ldd	r24, Z+26	; 0x1a
    3286:	82 17       	cp	r24, r18
    3288:	18 f4       	brcc	.+6      	; 0x3290 <vTaskRemoveFromUnorderedEventList+0xb8>
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	80 93 aa 2c 	sts	0x2CAA, r24	; 0x802caa <xYieldPending>
    3290:	00 00       	nop
    3292:	28 96       	adiw	r28, 0x08	; 8
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	de bf       	out	0x3e, r29	; 62
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	08 95       	ret

0000329e <vTaskInternalSetTimeOutState>:
    329e:	cf 93       	push	r28
    32a0:	df 93       	push	r29
    32a2:	1f 92       	push	r1
    32a4:	1f 92       	push	r1
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
    32aa:	89 83       	std	Y+1, r24	; 0x01
    32ac:	9a 83       	std	Y+2, r25	; 0x02
    32ae:	20 91 ab 2c 	lds	r18, 0x2CAB	; 0x802cab <xNumOfOverflows>
    32b2:	89 81       	ldd	r24, Y+1	; 0x01
    32b4:	9a 81       	ldd	r25, Y+2	; 0x02
    32b6:	fc 01       	movw	r30, r24
    32b8:	20 83       	st	Z, r18
    32ba:	80 91 a3 2c 	lds	r24, 0x2CA3	; 0x802ca3 <xTickCount>
    32be:	90 91 a4 2c 	lds	r25, 0x2CA4	; 0x802ca4 <xTickCount+0x1>
    32c2:	a0 91 a5 2c 	lds	r26, 0x2CA5	; 0x802ca5 <xTickCount+0x2>
    32c6:	b0 91 a6 2c 	lds	r27, 0x2CA6	; 0x802ca6 <xTickCount+0x3>
    32ca:	29 81       	ldd	r18, Y+1	; 0x01
    32cc:	3a 81       	ldd	r19, Y+2	; 0x02
    32ce:	f9 01       	movw	r30, r18
    32d0:	81 83       	std	Z+1, r24	; 0x01
    32d2:	92 83       	std	Z+2, r25	; 0x02
    32d4:	a3 83       	std	Z+3, r26	; 0x03
    32d6:	b4 83       	std	Z+4, r27	; 0x04
    32d8:	00 00       	nop
    32da:	0f 90       	pop	r0
    32dc:	0f 90       	pop	r0
    32de:	df 91       	pop	r29
    32e0:	cf 91       	pop	r28
    32e2:	08 95       	ret

000032e4 <xTaskCheckForTimeOut>:
    32e4:	ef 92       	push	r14
    32e6:	ff 92       	push	r15
    32e8:	0f 93       	push	r16
    32ea:	1f 93       	push	r17
    32ec:	cf 93       	push	r28
    32ee:	df 93       	push	r29
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    32f4:	2d 97       	sbiw	r28, 0x0d	; 13
    32f6:	cd bf       	out	0x3d, r28	; 61
    32f8:	de bf       	out	0x3e, r29	; 62
    32fa:	8a 87       	std	Y+10, r24	; 0x0a
    32fc:	9b 87       	std	Y+11, r25	; 0x0b
    32fe:	6c 87       	std	Y+12, r22	; 0x0c
    3300:	7d 87       	std	Y+13, r23	; 0x0d
    3302:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3306:	ff 93       	push	r31
    3308:	f8 7f       	andi	r31, 0xF8	; 248
    330a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    330e:	80 91 a3 2c 	lds	r24, 0x2CA3	; 0x802ca3 <xTickCount>
    3312:	90 91 a4 2c 	lds	r25, 0x2CA4	; 0x802ca4 <xTickCount+0x1>
    3316:	a0 91 a5 2c 	lds	r26, 0x2CA5	; 0x802ca5 <xTickCount+0x2>
    331a:	b0 91 a6 2c 	lds	r27, 0x2CA6	; 0x802ca6 <xTickCount+0x3>
    331e:	8a 83       	std	Y+2, r24	; 0x02
    3320:	9b 83       	std	Y+3, r25	; 0x03
    3322:	ac 83       	std	Y+4, r26	; 0x04
    3324:	bd 83       	std	Y+5, r27	; 0x05
    3326:	8a 85       	ldd	r24, Y+10	; 0x0a
    3328:	9b 85       	ldd	r25, Y+11	; 0x0b
    332a:	fc 01       	movw	r30, r24
    332c:	81 81       	ldd	r24, Z+1	; 0x01
    332e:	92 81       	ldd	r25, Z+2	; 0x02
    3330:	a3 81       	ldd	r26, Z+3	; 0x03
    3332:	b4 81       	ldd	r27, Z+4	; 0x04
    3334:	2a 81       	ldd	r18, Y+2	; 0x02
    3336:	3b 81       	ldd	r19, Y+3	; 0x03
    3338:	4c 81       	ldd	r20, Y+4	; 0x04
    333a:	5d 81       	ldd	r21, Y+5	; 0x05
    333c:	79 01       	movw	r14, r18
    333e:	8a 01       	movw	r16, r20
    3340:	e8 1a       	sub	r14, r24
    3342:	f9 0a       	sbc	r15, r25
    3344:	0a 0b       	sbc	r16, r26
    3346:	1b 0b       	sbc	r17, r27
    3348:	d8 01       	movw	r26, r16
    334a:	c7 01       	movw	r24, r14
    334c:	8e 83       	std	Y+6, r24	; 0x06
    334e:	9f 83       	std	Y+7, r25	; 0x07
    3350:	a8 87       	std	Y+8, r26	; 0x08
    3352:	b9 87       	std	Y+9, r27	; 0x09
    3354:	8c 85       	ldd	r24, Y+12	; 0x0c
    3356:	9d 85       	ldd	r25, Y+13	; 0x0d
    3358:	fc 01       	movw	r30, r24
    335a:	80 81       	ld	r24, Z
    335c:	91 81       	ldd	r25, Z+1	; 0x01
    335e:	a2 81       	ldd	r26, Z+2	; 0x02
    3360:	b3 81       	ldd	r27, Z+3	; 0x03
    3362:	8f 3f       	cpi	r24, 0xFF	; 255
    3364:	9f 4f       	sbci	r25, 0xFF	; 255
    3366:	af 4f       	sbci	r26, 0xFF	; 255
    3368:	bf 4f       	sbci	r27, 0xFF	; 255
    336a:	11 f4       	brne	.+4      	; 0x3370 <xTaskCheckForTimeOut+0x8c>
    336c:	19 82       	std	Y+1, r1	; 0x01
    336e:	54 c0       	rjmp	.+168    	; 0x3418 <xTaskCheckForTimeOut+0x134>
    3370:	8a 85       	ldd	r24, Y+10	; 0x0a
    3372:	9b 85       	ldd	r25, Y+11	; 0x0b
    3374:	fc 01       	movw	r30, r24
    3376:	90 81       	ld	r25, Z
    3378:	80 91 ab 2c 	lds	r24, 0x2CAB	; 0x802cab <xNumOfOverflows>
    337c:	98 17       	cp	r25, r24
    337e:	99 f0       	breq	.+38     	; 0x33a6 <xTaskCheckForTimeOut+0xc2>
    3380:	8a 85       	ldd	r24, Y+10	; 0x0a
    3382:	9b 85       	ldd	r25, Y+11	; 0x0b
    3384:	fc 01       	movw	r30, r24
    3386:	21 81       	ldd	r18, Z+1	; 0x01
    3388:	32 81       	ldd	r19, Z+2	; 0x02
    338a:	43 81       	ldd	r20, Z+3	; 0x03
    338c:	54 81       	ldd	r21, Z+4	; 0x04
    338e:	8a 81       	ldd	r24, Y+2	; 0x02
    3390:	9b 81       	ldd	r25, Y+3	; 0x03
    3392:	ac 81       	ldd	r26, Y+4	; 0x04
    3394:	bd 81       	ldd	r27, Y+5	; 0x05
    3396:	82 17       	cp	r24, r18
    3398:	93 07       	cpc	r25, r19
    339a:	a4 07       	cpc	r26, r20
    339c:	b5 07       	cpc	r27, r21
    339e:	18 f0       	brcs	.+6      	; 0x33a6 <xTaskCheckForTimeOut+0xc2>
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	89 83       	std	Y+1, r24	; 0x01
    33a4:	39 c0       	rjmp	.+114    	; 0x3418 <xTaskCheckForTimeOut+0x134>
    33a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    33a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    33aa:	fc 01       	movw	r30, r24
    33ac:	20 81       	ld	r18, Z
    33ae:	31 81       	ldd	r19, Z+1	; 0x01
    33b0:	42 81       	ldd	r20, Z+2	; 0x02
    33b2:	53 81       	ldd	r21, Z+3	; 0x03
    33b4:	8e 81       	ldd	r24, Y+6	; 0x06
    33b6:	9f 81       	ldd	r25, Y+7	; 0x07
    33b8:	a8 85       	ldd	r26, Y+8	; 0x08
    33ba:	b9 85       	ldd	r27, Y+9	; 0x09
    33bc:	82 17       	cp	r24, r18
    33be:	93 07       	cpc	r25, r19
    33c0:	a4 07       	cpc	r26, r20
    33c2:	b5 07       	cpc	r27, r21
    33c4:	00 f5       	brcc	.+64     	; 0x3406 <xTaskCheckForTimeOut+0x122>
    33c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    33c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    33ca:	fc 01       	movw	r30, r24
    33cc:	20 81       	ld	r18, Z
    33ce:	31 81       	ldd	r19, Z+1	; 0x01
    33d0:	42 81       	ldd	r20, Z+2	; 0x02
    33d2:	53 81       	ldd	r21, Z+3	; 0x03
    33d4:	8e 81       	ldd	r24, Y+6	; 0x06
    33d6:	9f 81       	ldd	r25, Y+7	; 0x07
    33d8:	a8 85       	ldd	r26, Y+8	; 0x08
    33da:	b9 85       	ldd	r27, Y+9	; 0x09
    33dc:	79 01       	movw	r14, r18
    33de:	8a 01       	movw	r16, r20
    33e0:	e8 1a       	sub	r14, r24
    33e2:	f9 0a       	sbc	r15, r25
    33e4:	0a 0b       	sbc	r16, r26
    33e6:	1b 0b       	sbc	r17, r27
    33e8:	d8 01       	movw	r26, r16
    33ea:	c7 01       	movw	r24, r14
    33ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    33ee:	3d 85       	ldd	r19, Y+13	; 0x0d
    33f0:	f9 01       	movw	r30, r18
    33f2:	80 83       	st	Z, r24
    33f4:	91 83       	std	Z+1, r25	; 0x01
    33f6:	a2 83       	std	Z+2, r26	; 0x02
    33f8:	b3 83       	std	Z+3, r27	; 0x03
    33fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    33fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    33fe:	0e 94 4f 19 	call	0x329e	; 0x329e <vTaskInternalSetTimeOutState>
    3402:	19 82       	std	Y+1, r1	; 0x01
    3404:	09 c0       	rjmp	.+18     	; 0x3418 <xTaskCheckForTimeOut+0x134>
    3406:	8c 85       	ldd	r24, Y+12	; 0x0c
    3408:	9d 85       	ldd	r25, Y+13	; 0x0d
    340a:	fc 01       	movw	r30, r24
    340c:	10 82       	st	Z, r1
    340e:	11 82       	std	Z+1, r1	; 0x01
    3410:	12 82       	std	Z+2, r1	; 0x02
    3412:	13 82       	std	Z+3, r1	; 0x03
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	89 83       	std	Y+1, r24	; 0x01
    3418:	ff 91       	pop	r31
    341a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	2d 96       	adiw	r28, 0x0d	; 13
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	df 91       	pop	r29
    3428:	cf 91       	pop	r28
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	ff 90       	pop	r15
    3430:	ef 90       	pop	r14
    3432:	08 95       	ret

00003434 <vTaskMissedYield>:
    3434:	cf 93       	push	r28
    3436:	df 93       	push	r29
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	80 93 aa 2c 	sts	0x2CAA, r24	; 0x802caa <xYieldPending>
    3442:	00 00       	nop
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	08 95       	ret

0000344a <prvIdleTask>:
    344a:	cf 93       	push	r28
    344c:	df 93       	push	r29
    344e:	1f 92       	push	r1
    3450:	1f 92       	push	r1
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    3456:	89 83       	std	Y+1, r24	; 0x01
    3458:	9a 83       	std	Y+2, r25	; 0x02
    345a:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <prvCheckTasksWaitingTermination>
    345e:	80 91 46 2c 	lds	r24, 0x2C46	; 0x802c46 <pxReadyTasksLists>
    3462:	82 30       	cpi	r24, 0x02	; 2
    3464:	10 f0       	brcs	.+4      	; 0x346a <prvIdleTask+0x20>
    3466:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    346a:	0e 94 14 21 	call	0x4228	; 0x4228 <vApplicationIdleHook>
    346e:	f5 cf       	rjmp	.-22     	; 0x345a <prvIdleTask+0x10>

00003470 <prvInitialiseTaskLists>:
    3470:	cf 93       	push	r28
    3472:	df 93       	push	r29
    3474:	1f 92       	push	r1
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
    347a:	19 82       	std	Y+1, r1	; 0x01
    347c:	10 c0       	rjmp	.+32     	; 0x349e <prvInitialiseTaskLists+0x2e>
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	28 2f       	mov	r18, r24
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	4b e0       	ldi	r20, 0x0B	; 11
    3486:	42 9f       	mul	r20, r18
    3488:	c0 01       	movw	r24, r0
    348a:	43 9f       	mul	r20, r19
    348c:	90 0d       	add	r25, r0
    348e:	11 24       	eor	r1, r1
    3490:	8a 5b       	subi	r24, 0xBA	; 186
    3492:	93 4d       	sbci	r25, 0xD3	; 211
    3494:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    3498:	89 81       	ldd	r24, Y+1	; 0x01
    349a:	8f 5f       	subi	r24, 0xFF	; 255
    349c:	89 83       	std	Y+1, r24	; 0x01
    349e:	89 81       	ldd	r24, Y+1	; 0x01
    34a0:	84 30       	cpi	r24, 0x04	; 4
    34a2:	68 f3       	brcs	.-38     	; 0x347e <prvInitialiseTaskLists+0xe>
    34a4:	82 e7       	ldi	r24, 0x72	; 114
    34a6:	9c e2       	ldi	r25, 0x2C	; 44
    34a8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    34ac:	8d e7       	ldi	r24, 0x7D	; 125
    34ae:	9c e2       	ldi	r25, 0x2C	; 44
    34b0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    34b4:	8c e8       	ldi	r24, 0x8C	; 140
    34b6:	9c e2       	ldi	r25, 0x2C	; 44
    34b8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    34bc:	87 e9       	ldi	r24, 0x97	; 151
    34be:	9c e2       	ldi	r25, 0x2C	; 44
    34c0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    34c4:	82 e7       	ldi	r24, 0x72	; 114
    34c6:	9c e2       	ldi	r25, 0x2C	; 44
    34c8:	80 93 88 2c 	sts	0x2C88, r24	; 0x802c88 <pxDelayedTaskList>
    34cc:	90 93 89 2c 	sts	0x2C89, r25	; 0x802c89 <pxDelayedTaskList+0x1>
    34d0:	8d e7       	ldi	r24, 0x7D	; 125
    34d2:	9c e2       	ldi	r25, 0x2C	; 44
    34d4:	80 93 8a 2c 	sts	0x2C8A, r24	; 0x802c8a <pxOverflowDelayedTaskList>
    34d8:	90 93 8b 2c 	sts	0x2C8B, r25	; 0x802c8b <pxOverflowDelayedTaskList+0x1>
    34dc:	00 00       	nop
    34de:	0f 90       	pop	r0
    34e0:	df 91       	pop	r29
    34e2:	cf 91       	pop	r28
    34e4:	08 95       	ret

000034e6 <prvCheckTasksWaitingTermination>:
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
    34ee:	00 00       	nop
    34f0:	df 91       	pop	r29
    34f2:	cf 91       	pop	r28
    34f4:	08 95       	ret

000034f6 <prvResetNextTaskUnblockTime>:
    34f6:	cf 93       	push	r28
    34f8:	df 93       	push	r29
    34fa:	1f 92       	push	r1
    34fc:	1f 92       	push	r1
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62
    3502:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <pxDelayedTaskList>
    3506:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <pxDelayedTaskList+0x1>
    350a:	fc 01       	movw	r30, r24
    350c:	80 81       	ld	r24, Z
    350e:	88 23       	and	r24, r24
    3510:	61 f4       	brne	.+24     	; 0x352a <prvResetNextTaskUnblockTime+0x34>
    3512:	8f ef       	ldi	r24, 0xFF	; 255
    3514:	9f ef       	ldi	r25, 0xFF	; 255
    3516:	dc 01       	movw	r26, r24
    3518:	80 93 ad 2c 	sts	0x2CAD, r24	; 0x802cad <xNextTaskUnblockTime>
    351c:	90 93 ae 2c 	sts	0x2CAE, r25	; 0x802cae <xNextTaskUnblockTime+0x1>
    3520:	a0 93 af 2c 	sts	0x2CAF, r26	; 0x802caf <xNextTaskUnblockTime+0x2>
    3524:	b0 93 b0 2c 	sts	0x2CB0, r27	; 0x802cb0 <xNextTaskUnblockTime+0x3>
    3528:	1b c0       	rjmp	.+54     	; 0x3560 <prvResetNextTaskUnblockTime+0x6a>
    352a:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <pxDelayedTaskList>
    352e:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <pxDelayedTaskList+0x1>
    3532:	fc 01       	movw	r30, r24
    3534:	87 81       	ldd	r24, Z+7	; 0x07
    3536:	90 85       	ldd	r25, Z+8	; 0x08
    3538:	fc 01       	movw	r30, r24
    353a:	80 85       	ldd	r24, Z+8	; 0x08
    353c:	91 85       	ldd	r25, Z+9	; 0x09
    353e:	89 83       	std	Y+1, r24	; 0x01
    3540:	9a 83       	std	Y+2, r25	; 0x02
    3542:	89 81       	ldd	r24, Y+1	; 0x01
    3544:	9a 81       	ldd	r25, Y+2	; 0x02
    3546:	fc 01       	movw	r30, r24
    3548:	82 81       	ldd	r24, Z+2	; 0x02
    354a:	93 81       	ldd	r25, Z+3	; 0x03
    354c:	a4 81       	ldd	r26, Z+4	; 0x04
    354e:	b5 81       	ldd	r27, Z+5	; 0x05
    3550:	80 93 ad 2c 	sts	0x2CAD, r24	; 0x802cad <xNextTaskUnblockTime>
    3554:	90 93 ae 2c 	sts	0x2CAE, r25	; 0x802cae <xNextTaskUnblockTime+0x1>
    3558:	a0 93 af 2c 	sts	0x2CAF, r26	; 0x802caf <xNextTaskUnblockTime+0x2>
    355c:	b0 93 b0 2c 	sts	0x2CB0, r27	; 0x802cb0 <xNextTaskUnblockTime+0x3>
    3560:	00 00       	nop
    3562:	0f 90       	pop	r0
    3564:	0f 90       	pop	r0
    3566:	df 91       	pop	r29
    3568:	cf 91       	pop	r28
    356a:	08 95       	ret

0000356c <xTaskGetSchedulerState>:
    356c:	cf 93       	push	r28
    356e:	df 93       	push	r29
    3570:	1f 92       	push	r1
    3572:	cd b7       	in	r28, 0x3d	; 61
    3574:	de b7       	in	r29, 0x3e	; 62
    3576:	80 91 a8 2c 	lds	r24, 0x2CA8	; 0x802ca8 <xSchedulerRunning>
    357a:	88 23       	and	r24, r24
    357c:	19 f4       	brne	.+6      	; 0x3584 <xTaskGetSchedulerState+0x18>
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	89 83       	std	Y+1, r24	; 0x01
    3582:	08 c0       	rjmp	.+16     	; 0x3594 <xTaskGetSchedulerState+0x28>
    3584:	80 91 b3 2c 	lds	r24, 0x2CB3	; 0x802cb3 <uxSchedulerSuspended>
    3588:	88 23       	and	r24, r24
    358a:	19 f4       	brne	.+6      	; 0x3592 <xTaskGetSchedulerState+0x26>
    358c:	82 e0       	ldi	r24, 0x02	; 2
    358e:	89 83       	std	Y+1, r24	; 0x01
    3590:	01 c0       	rjmp	.+2      	; 0x3594 <xTaskGetSchedulerState+0x28>
    3592:	19 82       	std	Y+1, r1	; 0x01
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	0f 90       	pop	r0
    3598:	df 91       	pop	r29
    359a:	cf 91       	pop	r28
    359c:	08 95       	ret

0000359e <uxTaskResetEventItemValue>:
    359e:	ef 92       	push	r14
    35a0:	ff 92       	push	r15
    35a2:	0f 93       	push	r16
    35a4:	1f 93       	push	r17
    35a6:	cf 93       	push	r28
    35a8:	df 93       	push	r29
    35aa:	00 d0       	rcall	.+0      	; 0x35ac <uxTaskResetEventItemValue+0xe>
    35ac:	1f 92       	push	r1
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    35b2:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    35b6:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    35ba:	fc 01       	movw	r30, r24
    35bc:	86 85       	ldd	r24, Z+14	; 0x0e
    35be:	97 85       	ldd	r25, Z+15	; 0x0f
    35c0:	a0 89       	ldd	r26, Z+16	; 0x10
    35c2:	b1 89       	ldd	r27, Z+17	; 0x11
    35c4:	89 83       	std	Y+1, r24	; 0x01
    35c6:	9a 83       	std	Y+2, r25	; 0x02
    35c8:	ab 83       	std	Y+3, r26	; 0x03
    35ca:	bc 83       	std	Y+4, r27	; 0x04
    35cc:	60 91 44 2c 	lds	r22, 0x2C44	; 0x802c44 <pxCurrentTCB>
    35d0:	70 91 45 2c 	lds	r23, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    35d4:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    35d8:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    35dc:	fc 01       	movw	r30, r24
    35de:	82 8d       	ldd	r24, Z+26	; 0x1a
    35e0:	88 2f       	mov	r24, r24
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	a0 e0       	ldi	r26, 0x00	; 0
    35e6:	b0 e0       	ldi	r27, 0x00	; 0
    35e8:	24 e0       	ldi	r18, 0x04	; 4
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	40 e0       	ldi	r20, 0x00	; 0
    35ee:	50 e0       	ldi	r21, 0x00	; 0
    35f0:	79 01       	movw	r14, r18
    35f2:	8a 01       	movw	r16, r20
    35f4:	e8 1a       	sub	r14, r24
    35f6:	f9 0a       	sbc	r15, r25
    35f8:	0a 0b       	sbc	r16, r26
    35fa:	1b 0b       	sbc	r17, r27
    35fc:	d8 01       	movw	r26, r16
    35fe:	c7 01       	movw	r24, r14
    3600:	fb 01       	movw	r30, r22
    3602:	86 87       	std	Z+14, r24	; 0x0e
    3604:	97 87       	std	Z+15, r25	; 0x0f
    3606:	a0 8b       	std	Z+16, r26	; 0x10
    3608:	b1 8b       	std	Z+17, r27	; 0x11
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	9a 81       	ldd	r25, Y+2	; 0x02
    360e:	ab 81       	ldd	r26, Y+3	; 0x03
    3610:	bc 81       	ldd	r27, Y+4	; 0x04
    3612:	bc 01       	movw	r22, r24
    3614:	cd 01       	movw	r24, r26
    3616:	24 96       	adiw	r28, 0x04	; 4
    3618:	cd bf       	out	0x3d, r28	; 61
    361a:	de bf       	out	0x3e, r29	; 62
    361c:	df 91       	pop	r29
    361e:	cf 91       	pop	r28
    3620:	1f 91       	pop	r17
    3622:	0f 91       	pop	r16
    3624:	ff 90       	pop	r15
    3626:	ef 90       	pop	r14
    3628:	08 95       	ret

0000362a <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    362a:	cf 93       	push	r28
    362c:	df 93       	push	r29
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62
    3632:	2d 97       	sbiw	r28, 0x0d	; 13
    3634:	cd bf       	out	0x3d, r28	; 61
    3636:	de bf       	out	0x3e, r29	; 62
    3638:	69 87       	std	Y+9, r22	; 0x09
    363a:	7a 87       	std	Y+10, r23	; 0x0a
    363c:	8b 87       	std	Y+11, r24	; 0x0b
    363e:	9c 87       	std	Y+12, r25	; 0x0c
    3640:	4d 87       	std	Y+13, r20	; 0x0d
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3642:	80 91 a3 2c 	lds	r24, 0x2CA3	; 0x802ca3 <xTickCount>
    3646:	90 91 a4 2c 	lds	r25, 0x2CA4	; 0x802ca4 <xTickCount+0x1>
    364a:	a0 91 a5 2c 	lds	r26, 0x2CA5	; 0x802ca5 <xTickCount+0x2>
    364e:	b0 91 a6 2c 	lds	r27, 0x2CA6	; 0x802ca6 <xTickCount+0x3>
    3652:	89 83       	std	Y+1, r24	; 0x01
    3654:	9a 83       	std	Y+2, r25	; 0x02
    3656:	ab 83       	std	Y+3, r26	; 0x03
    3658:	bc 83       	std	Y+4, r27	; 0x04
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    365a:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    365e:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    3662:	02 96       	adiw	r24, 0x02	; 2
    3664:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    3668:	89 85       	ldd	r24, Y+9	; 0x09
    366a:	9a 85       	ldd	r25, Y+10	; 0x0a
    366c:	ab 85       	ldd	r26, Y+11	; 0x0b
    366e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3670:	8f 3f       	cpi	r24, 0xFF	; 255
    3672:	9f 4f       	sbci	r25, 0xFF	; 255
    3674:	af 4f       	sbci	r26, 0xFF	; 255
    3676:	bf 4f       	sbci	r27, 0xFF	; 255
    3678:	71 f4       	brne	.+28     	; 0x3696 <prvAddCurrentTaskToDelayedList+0x6c>
    367a:	8d 85       	ldd	r24, Y+13	; 0x0d
    367c:	88 23       	and	r24, r24
    367e:	59 f0       	breq	.+22     	; 0x3696 <prvAddCurrentTaskToDelayedList+0x6c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3680:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    3684:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    3688:	02 96       	adiw	r24, 0x02	; 2
    368a:	bc 01       	movw	r22, r24
    368c:	87 e9       	ldi	r24, 0x97	; 151
    368e:	9c e2       	ldi	r25, 0x2C	; 44
    3690:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3694:	64 c0       	rjmp	.+200    	; 0x375e <prvAddCurrentTaskToDelayedList+0x134>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    3696:	29 81       	ldd	r18, Y+1	; 0x01
    3698:	3a 81       	ldd	r19, Y+2	; 0x02
    369a:	4b 81       	ldd	r20, Y+3	; 0x03
    369c:	5c 81       	ldd	r21, Y+4	; 0x04
    369e:	89 85       	ldd	r24, Y+9	; 0x09
    36a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a2:	ab 85       	ldd	r26, Y+11	; 0x0b
    36a4:	bc 85       	ldd	r27, Y+12	; 0x0c
    36a6:	82 0f       	add	r24, r18
    36a8:	93 1f       	adc	r25, r19
    36aa:	a4 1f       	adc	r26, r20
    36ac:	b5 1f       	adc	r27, r21
    36ae:	8d 83       	std	Y+5, r24	; 0x05
    36b0:	9e 83       	std	Y+6, r25	; 0x06
    36b2:	af 83       	std	Y+7, r26	; 0x07
    36b4:	b8 87       	std	Y+8, r27	; 0x08

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    36b6:	20 91 44 2c 	lds	r18, 0x2C44	; 0x802c44 <pxCurrentTCB>
    36ba:	30 91 45 2c 	lds	r19, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    36be:	8d 81       	ldd	r24, Y+5	; 0x05
    36c0:	9e 81       	ldd	r25, Y+6	; 0x06
    36c2:	af 81       	ldd	r26, Y+7	; 0x07
    36c4:	b8 85       	ldd	r27, Y+8	; 0x08
    36c6:	f9 01       	movw	r30, r18
    36c8:	82 83       	std	Z+2, r24	; 0x02
    36ca:	93 83       	std	Z+3, r25	; 0x03
    36cc:	a4 83       	std	Z+4, r26	; 0x04
    36ce:	b5 83       	std	Z+5, r27	; 0x05

			if( xTimeToWake < xConstTickCount )
    36d0:	2d 81       	ldd	r18, Y+5	; 0x05
    36d2:	3e 81       	ldd	r19, Y+6	; 0x06
    36d4:	4f 81       	ldd	r20, Y+7	; 0x07
    36d6:	58 85       	ldd	r21, Y+8	; 0x08
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	9a 81       	ldd	r25, Y+2	; 0x02
    36dc:	ab 81       	ldd	r26, Y+3	; 0x03
    36de:	bc 81       	ldd	r27, Y+4	; 0x04
    36e0:	28 17       	cp	r18, r24
    36e2:	39 07       	cpc	r19, r25
    36e4:	4a 07       	cpc	r20, r26
    36e6:	5b 07       	cpc	r21, r27
    36e8:	78 f4       	brcc	.+30     	; 0x3708 <prvAddCurrentTaskToDelayedList+0xde>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    36ea:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    36ee:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    36f2:	9c 01       	movw	r18, r24
    36f4:	2e 5f       	subi	r18, 0xFE	; 254
    36f6:	3f 4f       	sbci	r19, 0xFF	; 255
    36f8:	80 91 8a 2c 	lds	r24, 0x2C8A	; 0x802c8a <pxOverflowDelayedTaskList>
    36fc:	90 91 8b 2c 	lds	r25, 0x2C8B	; 0x802c8b <pxOverflowDelayedTaskList+0x1>
    3700:	b9 01       	movw	r22, r18
    3702:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3706:	2b c0       	rjmp	.+86     	; 0x375e <prvAddCurrentTaskToDelayedList+0x134>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3708:	80 91 44 2c 	lds	r24, 0x2C44	; 0x802c44 <pxCurrentTCB>
    370c:	90 91 45 2c 	lds	r25, 0x2C45	; 0x802c45 <pxCurrentTCB+0x1>
    3710:	9c 01       	movw	r18, r24
    3712:	2e 5f       	subi	r18, 0xFE	; 254
    3714:	3f 4f       	sbci	r19, 0xFF	; 255
    3716:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <pxDelayedTaskList>
    371a:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <pxDelayedTaskList+0x1>
    371e:	b9 01       	movw	r22, r18
    3720:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    3724:	80 91 ad 2c 	lds	r24, 0x2CAD	; 0x802cad <xNextTaskUnblockTime>
    3728:	90 91 ae 2c 	lds	r25, 0x2CAE	; 0x802cae <xNextTaskUnblockTime+0x1>
    372c:	a0 91 af 2c 	lds	r26, 0x2CAF	; 0x802caf <xNextTaskUnblockTime+0x2>
    3730:	b0 91 b0 2c 	lds	r27, 0x2CB0	; 0x802cb0 <xNextTaskUnblockTime+0x3>
    3734:	2d 81       	ldd	r18, Y+5	; 0x05
    3736:	3e 81       	ldd	r19, Y+6	; 0x06
    3738:	4f 81       	ldd	r20, Y+7	; 0x07
    373a:	58 85       	ldd	r21, Y+8	; 0x08
    373c:	28 17       	cp	r18, r24
    373e:	39 07       	cpc	r19, r25
    3740:	4a 07       	cpc	r20, r26
    3742:	5b 07       	cpc	r21, r27
    3744:	60 f4       	brcc	.+24     	; 0x375e <prvAddCurrentTaskToDelayedList+0x134>
				{
					xNextTaskUnblockTime = xTimeToWake;
    3746:	8d 81       	ldd	r24, Y+5	; 0x05
    3748:	9e 81       	ldd	r25, Y+6	; 0x06
    374a:	af 81       	ldd	r26, Y+7	; 0x07
    374c:	b8 85       	ldd	r27, Y+8	; 0x08
    374e:	80 93 ad 2c 	sts	0x2CAD, r24	; 0x802cad <xNextTaskUnblockTime>
    3752:	90 93 ae 2c 	sts	0x2CAE, r25	; 0x802cae <xNextTaskUnblockTime+0x1>
    3756:	a0 93 af 2c 	sts	0x2CAF, r26	; 0x802caf <xNextTaskUnblockTime+0x2>
    375a:	b0 93 b0 2c 	sts	0x2CB0, r27	; 0x802cb0 <xNextTaskUnblockTime+0x3>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    375e:	00 00       	nop
    3760:	2d 96       	adiw	r28, 0x0d	; 13
    3762:	cd bf       	out	0x3d, r28	; 61
    3764:	de bf       	out	0x3e, r29	; 62
    3766:	df 91       	pop	r29
    3768:	cf 91       	pop	r28
    376a:	08 95       	ret

0000376c <xTimerCreateTimerTask>:
	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
}
    376c:	ef 92       	push	r14
    376e:	ff 92       	push	r15
    3770:	0f 93       	push	r16
    3772:	cf 93       	push	r28
    3774:	df 93       	push	r29
    3776:	1f 92       	push	r1
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	19 82       	std	Y+1, r1	; 0x01
    377e:	0e 94 47 20 	call	0x408e	; 0x408e <prvCheckForValidListAndQueue>
    3782:	80 91 ce 2c 	lds	r24, 0x2CCE	; 0x802cce <xTimerQueue>
    3786:	90 91 cf 2c 	lds	r25, 0x2CCF	; 0x802ccf <xTimerQueue+0x1>
    378a:	89 2b       	or	r24, r25
    378c:	91 f0       	breq	.+36     	; 0x37b2 <xTimerCreateTimerTask+0x46>
    378e:	0f 2e       	mov	r0, r31
    3790:	f0 ed       	ldi	r31, 0xD0	; 208
    3792:	ef 2e       	mov	r14, r31
    3794:	fc e2       	ldi	r31, 0x2C	; 44
    3796:	ff 2e       	mov	r15, r31
    3798:	f0 2d       	mov	r31, r0
    379a:	03 e0       	ldi	r16, 0x03	; 3
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	48 ec       	ldi	r20, 0xC8	; 200
    37a2:	50 e0       	ldi	r21, 0x00	; 0
    37a4:	69 e0       	ldi	r22, 0x09	; 9
    37a6:	70 e2       	ldi	r23, 0x20	; 32
    37a8:	8c ec       	ldi	r24, 0xCC	; 204
    37aa:	9c e1       	ldi	r25, 0x1C	; 28
    37ac:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
    37b0:	89 83       	std	Y+1, r24	; 0x01
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	0f 90       	pop	r0
    37b6:	df 91       	pop	r29
    37b8:	cf 91       	pop	r28
    37ba:	0f 91       	pop	r16
    37bc:	ff 90       	pop	r15
    37be:	ef 90       	pop	r14
    37c0:	08 95       	ret

000037c2 <xTimerGenericCommand>:
    37c2:	cf 92       	push	r12
    37c4:	df 92       	push	r13
    37c6:	ef 92       	push	r14
    37c8:	ff 92       	push	r15
    37ca:	0f 93       	push	r16
    37cc:	1f 93       	push	r17
    37ce:	cf 93       	push	r28
    37d0:	df 93       	push	r29
    37d2:	cd b7       	in	r28, 0x3d	; 61
    37d4:	de b7       	in	r29, 0x3e	; 62
    37d6:	67 97       	sbiw	r28, 0x17	; 23
    37d8:	cd bf       	out	0x3d, r28	; 61
    37da:	de bf       	out	0x3e, r29	; 62
    37dc:	8b 87       	std	Y+11, r24	; 0x0b
    37de:	9c 87       	std	Y+12, r25	; 0x0c
    37e0:	6d 87       	std	Y+13, r22	; 0x0d
    37e2:	2e 87       	std	Y+14, r18	; 0x0e
    37e4:	3f 87       	std	Y+15, r19	; 0x0f
    37e6:	48 8b       	std	Y+16, r20	; 0x10
    37e8:	59 8b       	std	Y+17, r21	; 0x11
    37ea:	0a 8b       	std	Y+18, r16	; 0x12
    37ec:	1b 8b       	std	Y+19, r17	; 0x13
    37ee:	cc 8a       	std	Y+20, r12	; 0x14
    37f0:	dd 8a       	std	Y+21, r13	; 0x15
    37f2:	ee 8a       	std	Y+22, r14	; 0x16
    37f4:	ff 8a       	std	Y+23, r15	; 0x17
    37f6:	19 82       	std	Y+1, r1	; 0x01
    37f8:	80 91 ce 2c 	lds	r24, 0x2CCE	; 0x802cce <xTimerQueue>
    37fc:	90 91 cf 2c 	lds	r25, 0x2CCF	; 0x802ccf <xTimerQueue+0x1>
    3800:	89 2b       	or	r24, r25
    3802:	09 f4       	brne	.+2      	; 0x3806 <xTimerGenericCommand+0x44>
    3804:	44 c0       	rjmp	.+136    	; 0x388e <xTimerGenericCommand+0xcc>
    3806:	8d 85       	ldd	r24, Y+13	; 0x0d
    3808:	8a 83       	std	Y+2, r24	; 0x02
    380a:	8e 85       	ldd	r24, Y+14	; 0x0e
    380c:	9f 85       	ldd	r25, Y+15	; 0x0f
    380e:	a8 89       	ldd	r26, Y+16	; 0x10
    3810:	b9 89       	ldd	r27, Y+17	; 0x11
    3812:	8b 83       	std	Y+3, r24	; 0x03
    3814:	9c 83       	std	Y+4, r25	; 0x04
    3816:	ad 83       	std	Y+5, r26	; 0x05
    3818:	be 83       	std	Y+6, r27	; 0x06
    381a:	8b 85       	ldd	r24, Y+11	; 0x0b
    381c:	9c 85       	ldd	r25, Y+12	; 0x0c
    381e:	8f 83       	std	Y+7, r24	; 0x07
    3820:	98 87       	std	Y+8, r25	; 0x08
    3822:	8d 85       	ldd	r24, Y+13	; 0x0d
    3824:	86 30       	cpi	r24, 0x06	; 6
    3826:	34 f5       	brge	.+76     	; 0x3874 <xTimerGenericCommand+0xb2>
    3828:	0e 94 b6 1a 	call	0x356c	; 0x356c <xTaskGetSchedulerState>
    382c:	82 30       	cpi	r24, 0x02	; 2
    382e:	99 f4       	brne	.+38     	; 0x3856 <xTimerGenericCommand+0x94>
    3830:	e0 91 ce 2c 	lds	r30, 0x2CCE	; 0x802cce <xTimerQueue>
    3834:	f0 91 cf 2c 	lds	r31, 0x2CCF	; 0x802ccf <xTimerQueue+0x1>
    3838:	8c 89       	ldd	r24, Y+20	; 0x14
    383a:	9d 89       	ldd	r25, Y+21	; 0x15
    383c:	ae 89       	ldd	r26, Y+22	; 0x16
    383e:	bf 89       	ldd	r27, Y+23	; 0x17
    3840:	be 01       	movw	r22, r28
    3842:	6e 5f       	subi	r22, 0xFE	; 254
    3844:	7f 4f       	sbci	r23, 0xFF	; 255
    3846:	00 e0       	ldi	r16, 0x00	; 0
    3848:	9c 01       	movw	r18, r24
    384a:	ad 01       	movw	r20, r26
    384c:	cf 01       	movw	r24, r30
    384e:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xQueueGenericSend>
    3852:	89 83       	std	Y+1, r24	; 0x01
    3854:	1c c0       	rjmp	.+56     	; 0x388e <xTimerGenericCommand+0xcc>
    3856:	80 91 ce 2c 	lds	r24, 0x2CCE	; 0x802cce <xTimerQueue>
    385a:	90 91 cf 2c 	lds	r25, 0x2CCF	; 0x802ccf <xTimerQueue+0x1>
    385e:	be 01       	movw	r22, r28
    3860:	6e 5f       	subi	r22, 0xFE	; 254
    3862:	7f 4f       	sbci	r23, 0xFF	; 255
    3864:	00 e0       	ldi	r16, 0x00	; 0
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	a9 01       	movw	r20, r18
    386c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xQueueGenericSend>
    3870:	89 83       	std	Y+1, r24	; 0x01
    3872:	0d c0       	rjmp	.+26     	; 0x388e <xTimerGenericCommand+0xcc>
    3874:	80 91 ce 2c 	lds	r24, 0x2CCE	; 0x802cce <xTimerQueue>
    3878:	90 91 cf 2c 	lds	r25, 0x2CCF	; 0x802ccf <xTimerQueue+0x1>
    387c:	4a 89       	ldd	r20, Y+18	; 0x12
    387e:	5b 89       	ldd	r21, Y+19	; 0x13
    3880:	be 01       	movw	r22, r28
    3882:	6e 5f       	subi	r22, 0xFE	; 254
    3884:	7f 4f       	sbci	r23, 0xFF	; 255
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <xQueueGenericSendFromISR>
    388c:	89 83       	std	Y+1, r24	; 0x01
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	67 96       	adiw	r28, 0x17	; 23
    3892:	cd bf       	out	0x3d, r28	; 61
    3894:	de bf       	out	0x3e, r29	; 62
    3896:	df 91       	pop	r29
    3898:	cf 91       	pop	r28
    389a:	1f 91       	pop	r17
    389c:	0f 91       	pop	r16
    389e:	ff 90       	pop	r15
    38a0:	ef 90       	pop	r14
    38a2:	df 90       	pop	r13
    38a4:	cf 90       	pop	r12
    38a6:	08 95       	ret

000038a8 <prvProcessExpiredTimer>:
    38a8:	cf 92       	push	r12
    38aa:	df 92       	push	r13
    38ac:	ef 92       	push	r14
    38ae:	ff 92       	push	r15
    38b0:	0f 93       	push	r16
    38b2:	1f 93       	push	r17
    38b4:	cf 93       	push	r28
    38b6:	df 93       	push	r29
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
    38bc:	2b 97       	sbiw	r28, 0x0b	; 11
    38be:	cd bf       	out	0x3d, r28	; 61
    38c0:	de bf       	out	0x3e, r29	; 62
    38c2:	6c 83       	std	Y+4, r22	; 0x04
    38c4:	7d 83       	std	Y+5, r23	; 0x05
    38c6:	8e 83       	std	Y+6, r24	; 0x06
    38c8:	9f 83       	std	Y+7, r25	; 0x07
    38ca:	28 87       	std	Y+8, r18	; 0x08
    38cc:	39 87       	std	Y+9, r19	; 0x09
    38ce:	4a 87       	std	Y+10, r20	; 0x0a
    38d0:	5b 87       	std	Y+11, r21	; 0x0b
    38d2:	80 91 ca 2c 	lds	r24, 0x2CCA	; 0x802cca <pxCurrentTimerList>
    38d6:	90 91 cb 2c 	lds	r25, 0x2CCB	; 0x802ccb <pxCurrentTimerList+0x1>
    38da:	fc 01       	movw	r30, r24
    38dc:	87 81       	ldd	r24, Z+7	; 0x07
    38de:	90 85       	ldd	r25, Z+8	; 0x08
    38e0:	fc 01       	movw	r30, r24
    38e2:	80 85       	ldd	r24, Z+8	; 0x08
    38e4:	91 85       	ldd	r25, Z+9	; 0x09
    38e6:	89 83       	std	Y+1, r24	; 0x01
    38e8:	9a 83       	std	Y+2, r25	; 0x02
    38ea:	89 81       	ldd	r24, Y+1	; 0x01
    38ec:	9a 81       	ldd	r25, Y+2	; 0x02
    38ee:	02 96       	adiw	r24, 0x02	; 2
    38f0:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	9a 81       	ldd	r25, Y+2	; 0x02
    38f8:	fc 01       	movw	r30, r24
    38fa:	82 89       	ldd	r24, Z+18	; 0x12
    38fc:	81 30       	cpi	r24, 0x01	; 1
    38fe:	b1 f5       	brne	.+108    	; 0x396c <prvProcessExpiredTimer+0xc4>
    3900:	89 81       	ldd	r24, Y+1	; 0x01
    3902:	9a 81       	ldd	r25, Y+2	; 0x02
    3904:	fc 01       	movw	r30, r24
    3906:	26 85       	ldd	r18, Z+14	; 0x0e
    3908:	37 85       	ldd	r19, Z+15	; 0x0f
    390a:	40 89       	ldd	r20, Z+16	; 0x10
    390c:	51 89       	ldd	r21, Z+17	; 0x11
    390e:	8c 81       	ldd	r24, Y+4	; 0x04
    3910:	9d 81       	ldd	r25, Y+5	; 0x05
    3912:	ae 81       	ldd	r26, Y+6	; 0x06
    3914:	bf 81       	ldd	r27, Y+7	; 0x07
    3916:	82 0f       	add	r24, r18
    3918:	93 1f       	adc	r25, r19
    391a:	a4 1f       	adc	r26, r20
    391c:	b5 1f       	adc	r27, r21
    391e:	ec 80       	ldd	r14, Y+4	; 0x04
    3920:	fd 80       	ldd	r15, Y+5	; 0x05
    3922:	0e 81       	ldd	r16, Y+6	; 0x06
    3924:	1f 81       	ldd	r17, Y+7	; 0x07
    3926:	28 85       	ldd	r18, Y+8	; 0x08
    3928:	39 85       	ldd	r19, Y+9	; 0x09
    392a:	4a 85       	ldd	r20, Y+10	; 0x0a
    392c:	5b 85       	ldd	r21, Y+11	; 0x0b
    392e:	e9 81       	ldd	r30, Y+1	; 0x01
    3930:	fa 81       	ldd	r31, Y+2	; 0x02
    3932:	67 01       	movw	r12, r14
    3934:	78 01       	movw	r14, r16
    3936:	89 01       	movw	r16, r18
    3938:	9a 01       	movw	r18, r20
    393a:	ac 01       	movw	r20, r24
    393c:	bd 01       	movw	r22, r26
    393e:	cf 01       	movw	r24, r30
    3940:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <prvInsertTimerInActiveList>
    3944:	88 23       	and	r24, r24
    3946:	91 f0       	breq	.+36     	; 0x396c <prvProcessExpiredTimer+0xc4>
    3948:	8c 81       	ldd	r24, Y+4	; 0x04
    394a:	9d 81       	ldd	r25, Y+5	; 0x05
    394c:	ae 81       	ldd	r26, Y+6	; 0x06
    394e:	bf 81       	ldd	r27, Y+7	; 0x07
    3950:	e9 81       	ldd	r30, Y+1	; 0x01
    3952:	fa 81       	ldd	r31, Y+2	; 0x02
    3954:	c1 2c       	mov	r12, r1
    3956:	d1 2c       	mov	r13, r1
    3958:	76 01       	movw	r14, r12
    395a:	00 e0       	ldi	r16, 0x00	; 0
    395c:	10 e0       	ldi	r17, 0x00	; 0
    395e:	9c 01       	movw	r18, r24
    3960:	ad 01       	movw	r20, r26
    3962:	60 e0       	ldi	r22, 0x00	; 0
    3964:	cf 01       	movw	r24, r30
    3966:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <xTimerGenericCommand>
    396a:	8b 83       	std	Y+3, r24	; 0x03
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	9a 81       	ldd	r25, Y+2	; 0x02
    3970:	fc 01       	movw	r30, r24
    3972:	25 89       	ldd	r18, Z+21	; 0x15
    3974:	36 89       	ldd	r19, Z+22	; 0x16
    3976:	89 81       	ldd	r24, Y+1	; 0x01
    3978:	9a 81       	ldd	r25, Y+2	; 0x02
    397a:	f9 01       	movw	r30, r18
    397c:	19 95       	eicall
    397e:	00 00       	nop
    3980:	2b 96       	adiw	r28, 0x0b	; 11
    3982:	cd bf       	out	0x3d, r28	; 61
    3984:	de bf       	out	0x3e, r29	; 62
    3986:	df 91       	pop	r29
    3988:	cf 91       	pop	r28
    398a:	1f 91       	pop	r17
    398c:	0f 91       	pop	r16
    398e:	ff 90       	pop	r15
    3990:	ef 90       	pop	r14
    3992:	df 90       	pop	r13
    3994:	cf 90       	pop	r12
    3996:	08 95       	ret

00003998 <prvTimerTask>:
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	27 97       	sbiw	r28, 0x07	; 7
    39a2:	cd bf       	out	0x3d, r28	; 61
    39a4:	de bf       	out	0x3e, r29	; 62
    39a6:	8e 83       	std	Y+6, r24	; 0x06
    39a8:	9f 83       	std	Y+7, r25	; 0x07
    39aa:	ce 01       	movw	r24, r28
    39ac:	05 96       	adiw	r24, 0x05	; 5
    39ae:	0e 94 67 1d 	call	0x3ace	; 0x3ace <prvGetNextExpireTime>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	89 83       	std	Y+1, r24	; 0x01
    39b8:	9a 83       	std	Y+2, r25	; 0x02
    39ba:	ab 83       	std	Y+3, r26	; 0x03
    39bc:	bc 83       	std	Y+4, r27	; 0x04
    39be:	2d 81       	ldd	r18, Y+5	; 0x05
    39c0:	89 81       	ldd	r24, Y+1	; 0x01
    39c2:	9a 81       	ldd	r25, Y+2	; 0x02
    39c4:	ab 81       	ldd	r26, Y+3	; 0x03
    39c6:	bc 81       	ldd	r27, Y+4	; 0x04
    39c8:	42 2f       	mov	r20, r18
    39ca:	bc 01       	movw	r22, r24
    39cc:	cd 01       	movw	r24, r26
    39ce:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <prvProcessTimerOrBlockTask>
    39d2:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <prvProcessReceivedCommands>
    39d6:	e9 cf       	rjmp	.-46     	; 0x39aa <prvTimerTask+0x12>

000039d8 <prvProcessTimerOrBlockTask>:
    39d8:	ef 92       	push	r14
    39da:	ff 92       	push	r15
    39dc:	0f 93       	push	r16
    39de:	1f 93       	push	r17
    39e0:	cf 93       	push	r28
    39e2:	df 93       	push	r29
    39e4:	cd b7       	in	r28, 0x3d	; 61
    39e6:	de b7       	in	r29, 0x3e	; 62
    39e8:	2a 97       	sbiw	r28, 0x0a	; 10
    39ea:	cd bf       	out	0x3d, r28	; 61
    39ec:	de bf       	out	0x3e, r29	; 62
    39ee:	6e 83       	std	Y+6, r22	; 0x06
    39f0:	7f 83       	std	Y+7, r23	; 0x07
    39f2:	88 87       	std	Y+8, r24	; 0x08
    39f4:	99 87       	std	Y+9, r25	; 0x09
    39f6:	4a 87       	std	Y+10, r20	; 0x0a
    39f8:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <vTaskSuspendAll>
    39fc:	ce 01       	movw	r24, r28
    39fe:	05 96       	adiw	r24, 0x05	; 5
    3a00:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <prvSampleTimeNow>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	89 83       	std	Y+1, r24	; 0x01
    3a0a:	9a 83       	std	Y+2, r25	; 0x02
    3a0c:	ab 83       	std	Y+3, r26	; 0x03
    3a0e:	bc 83       	std	Y+4, r27	; 0x04
    3a10:	8d 81       	ldd	r24, Y+5	; 0x05
    3a12:	88 23       	and	r24, r24
    3a14:	09 f0       	breq	.+2      	; 0x3a18 <prvProcessTimerOrBlockTask+0x40>
    3a16:	4e c0       	rjmp	.+156    	; 0x3ab4 <prvProcessTimerOrBlockTask+0xdc>
    3a18:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a1a:	88 23       	and	r24, r24
    3a1c:	e1 f4       	brne	.+56     	; 0x3a56 <prvProcessTimerOrBlockTask+0x7e>
    3a1e:	2e 81       	ldd	r18, Y+6	; 0x06
    3a20:	3f 81       	ldd	r19, Y+7	; 0x07
    3a22:	48 85       	ldd	r20, Y+8	; 0x08
    3a24:	59 85       	ldd	r21, Y+9	; 0x09
    3a26:	89 81       	ldd	r24, Y+1	; 0x01
    3a28:	9a 81       	ldd	r25, Y+2	; 0x02
    3a2a:	ab 81       	ldd	r26, Y+3	; 0x03
    3a2c:	bc 81       	ldd	r27, Y+4	; 0x04
    3a2e:	82 17       	cp	r24, r18
    3a30:	93 07       	cpc	r25, r19
    3a32:	a4 07       	cpc	r26, r20
    3a34:	b5 07       	cpc	r27, r21
    3a36:	78 f0       	brcs	.+30     	; 0x3a56 <prvProcessTimerOrBlockTask+0x7e>
    3a38:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskResumeAll>
    3a3c:	29 81       	ldd	r18, Y+1	; 0x01
    3a3e:	3a 81       	ldd	r19, Y+2	; 0x02
    3a40:	4b 81       	ldd	r20, Y+3	; 0x03
    3a42:	5c 81       	ldd	r21, Y+4	; 0x04
    3a44:	8e 81       	ldd	r24, Y+6	; 0x06
    3a46:	9f 81       	ldd	r25, Y+7	; 0x07
    3a48:	a8 85       	ldd	r26, Y+8	; 0x08
    3a4a:	b9 85       	ldd	r27, Y+9	; 0x09
    3a4c:	bc 01       	movw	r22, r24
    3a4e:	cd 01       	movw	r24, r26
    3a50:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <prvProcessExpiredTimer>
    3a54:	31 c0       	rjmp	.+98     	; 0x3ab8 <prvProcessTimerOrBlockTask+0xe0>
    3a56:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a58:	88 23       	and	r24, r24
    3a5a:	59 f0       	breq	.+22     	; 0x3a72 <prvProcessTimerOrBlockTask+0x9a>
    3a5c:	80 91 cc 2c 	lds	r24, 0x2CCC	; 0x802ccc <pxOverflowTimerList>
    3a60:	90 91 cd 2c 	lds	r25, 0x2CCD	; 0x802ccd <pxOverflowTimerList+0x1>
    3a64:	fc 01       	movw	r30, r24
    3a66:	90 81       	ld	r25, Z
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	99 23       	and	r25, r25
    3a6c:	09 f0       	breq	.+2      	; 0x3a70 <prvProcessTimerOrBlockTask+0x98>
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	8a 87       	std	Y+10, r24	; 0x0a
    3a72:	2e 81       	ldd	r18, Y+6	; 0x06
    3a74:	3f 81       	ldd	r19, Y+7	; 0x07
    3a76:	48 85       	ldd	r20, Y+8	; 0x08
    3a78:	59 85       	ldd	r21, Y+9	; 0x09
    3a7a:	89 81       	ldd	r24, Y+1	; 0x01
    3a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7e:	ab 81       	ldd	r26, Y+3	; 0x03
    3a80:	bc 81       	ldd	r27, Y+4	; 0x04
    3a82:	79 01       	movw	r14, r18
    3a84:	8a 01       	movw	r16, r20
    3a86:	e8 1a       	sub	r14, r24
    3a88:	f9 0a       	sbc	r15, r25
    3a8a:	0a 0b       	sbc	r16, r26
    3a8c:	1b 0b       	sbc	r17, r27
    3a8e:	d8 01       	movw	r26, r16
    3a90:	c7 01       	movw	r24, r14
    3a92:	e0 91 ce 2c 	lds	r30, 0x2CCE	; 0x802cce <xTimerQueue>
    3a96:	f0 91 cf 2c 	lds	r31, 0x2CCF	; 0x802ccf <xTimerQueue+0x1>
    3a9a:	2a 85       	ldd	r18, Y+10	; 0x0a
    3a9c:	ac 01       	movw	r20, r24
    3a9e:	bd 01       	movw	r22, r26
    3aa0:	cf 01       	movw	r24, r30
    3aa2:	0e 94 99 11 	call	0x2332	; 0x2332 <vQueueWaitForMessageRestricted>
    3aa6:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskResumeAll>
    3aaa:	88 23       	and	r24, r24
    3aac:	29 f4       	brne	.+10     	; 0x3ab8 <prvProcessTimerOrBlockTask+0xe0>
    3aae:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    3ab2:	02 c0       	rjmp	.+4      	; 0x3ab8 <prvProcessTimerOrBlockTask+0xe0>
    3ab4:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xTaskResumeAll>
    3ab8:	00 00       	nop
    3aba:	2a 96       	adiw	r28, 0x0a	; 10
    3abc:	cd bf       	out	0x3d, r28	; 61
    3abe:	de bf       	out	0x3e, r29	; 62
    3ac0:	df 91       	pop	r29
    3ac2:	cf 91       	pop	r28
    3ac4:	1f 91       	pop	r17
    3ac6:	0f 91       	pop	r16
    3ac8:	ff 90       	pop	r15
    3aca:	ef 90       	pop	r14
    3acc:	08 95       	ret

00003ace <prvGetNextExpireTime>:
    3ace:	cf 93       	push	r28
    3ad0:	df 93       	push	r29
    3ad2:	00 d0       	rcall	.+0      	; 0x3ad4 <prvGetNextExpireTime+0x6>
    3ad4:	00 d0       	rcall	.+0      	; 0x3ad6 <prvGetNextExpireTime+0x8>
    3ad6:	cd b7       	in	r28, 0x3d	; 61
    3ad8:	de b7       	in	r29, 0x3e	; 62
    3ada:	8d 83       	std	Y+5, r24	; 0x05
    3adc:	9e 83       	std	Y+6, r25	; 0x06
    3ade:	80 91 ca 2c 	lds	r24, 0x2CCA	; 0x802cca <pxCurrentTimerList>
    3ae2:	90 91 cb 2c 	lds	r25, 0x2CCB	; 0x802ccb <pxCurrentTimerList+0x1>
    3ae6:	fc 01       	movw	r30, r24
    3ae8:	90 81       	ld	r25, Z
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	99 23       	and	r25, r25
    3aee:	09 f0       	breq	.+2      	; 0x3af2 <prvGetNextExpireTime+0x24>
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	28 2f       	mov	r18, r24
    3af4:	8d 81       	ldd	r24, Y+5	; 0x05
    3af6:	9e 81       	ldd	r25, Y+6	; 0x06
    3af8:	fc 01       	movw	r30, r24
    3afa:	20 83       	st	Z, r18
    3afc:	8d 81       	ldd	r24, Y+5	; 0x05
    3afe:	9e 81       	ldd	r25, Y+6	; 0x06
    3b00:	fc 01       	movw	r30, r24
    3b02:	80 81       	ld	r24, Z
    3b04:	88 23       	and	r24, r24
    3b06:	89 f4       	brne	.+34     	; 0x3b2a <prvGetNextExpireTime+0x5c>
    3b08:	80 91 ca 2c 	lds	r24, 0x2CCA	; 0x802cca <pxCurrentTimerList>
    3b0c:	90 91 cb 2c 	lds	r25, 0x2CCB	; 0x802ccb <pxCurrentTimerList+0x1>
    3b10:	fc 01       	movw	r30, r24
    3b12:	87 81       	ldd	r24, Z+7	; 0x07
    3b14:	90 85       	ldd	r25, Z+8	; 0x08
    3b16:	fc 01       	movw	r30, r24
    3b18:	80 81       	ld	r24, Z
    3b1a:	91 81       	ldd	r25, Z+1	; 0x01
    3b1c:	a2 81       	ldd	r26, Z+2	; 0x02
    3b1e:	b3 81       	ldd	r27, Z+3	; 0x03
    3b20:	89 83       	std	Y+1, r24	; 0x01
    3b22:	9a 83       	std	Y+2, r25	; 0x02
    3b24:	ab 83       	std	Y+3, r26	; 0x03
    3b26:	bc 83       	std	Y+4, r27	; 0x04
    3b28:	04 c0       	rjmp	.+8      	; 0x3b32 <prvGetNextExpireTime+0x64>
    3b2a:	19 82       	std	Y+1, r1	; 0x01
    3b2c:	1a 82       	std	Y+2, r1	; 0x02
    3b2e:	1b 82       	std	Y+3, r1	; 0x03
    3b30:	1c 82       	std	Y+4, r1	; 0x04
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	9a 81       	ldd	r25, Y+2	; 0x02
    3b36:	ab 81       	ldd	r26, Y+3	; 0x03
    3b38:	bc 81       	ldd	r27, Y+4	; 0x04
    3b3a:	bc 01       	movw	r22, r24
    3b3c:	cd 01       	movw	r24, r26
    3b3e:	26 96       	adiw	r28, 0x06	; 6
    3b40:	cd bf       	out	0x3d, r28	; 61
    3b42:	de bf       	out	0x3e, r29	; 62
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	08 95       	ret

00003b4a <prvSampleTimeNow>:
    3b4a:	cf 93       	push	r28
    3b4c:	df 93       	push	r29
    3b4e:	00 d0       	rcall	.+0      	; 0x3b50 <prvSampleTimeNow+0x6>
    3b50:	00 d0       	rcall	.+0      	; 0x3b52 <prvSampleTimeNow+0x8>
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62
    3b56:	8d 83       	std	Y+5, r24	; 0x05
    3b58:	9e 83       	std	Y+6, r25	; 0x06
    3b5a:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <xTaskGetTickCount>
    3b5e:	dc 01       	movw	r26, r24
    3b60:	cb 01       	movw	r24, r22
    3b62:	89 83       	std	Y+1, r24	; 0x01
    3b64:	9a 83       	std	Y+2, r25	; 0x02
    3b66:	ab 83       	std	Y+3, r26	; 0x03
    3b68:	bc 83       	std	Y+4, r27	; 0x04
    3b6a:	80 91 d2 2c 	lds	r24, 0x2CD2	; 0x802cd2 <xLastTime.4745>
    3b6e:	90 91 d3 2c 	lds	r25, 0x2CD3	; 0x802cd3 <xLastTime.4745+0x1>
    3b72:	a0 91 d4 2c 	lds	r26, 0x2CD4	; 0x802cd4 <xLastTime.4745+0x2>
    3b76:	b0 91 d5 2c 	lds	r27, 0x2CD5	; 0x802cd5 <xLastTime.4745+0x3>
    3b7a:	29 81       	ldd	r18, Y+1	; 0x01
    3b7c:	3a 81       	ldd	r19, Y+2	; 0x02
    3b7e:	4b 81       	ldd	r20, Y+3	; 0x03
    3b80:	5c 81       	ldd	r21, Y+4	; 0x04
    3b82:	28 17       	cp	r18, r24
    3b84:	39 07       	cpc	r19, r25
    3b86:	4a 07       	cpc	r20, r26
    3b88:	5b 07       	cpc	r21, r27
    3b8a:	40 f4       	brcc	.+16     	; 0x3b9c <prvSampleTimeNow+0x52>
    3b8c:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <prvSwitchTimerLists>
    3b90:	8d 81       	ldd	r24, Y+5	; 0x05
    3b92:	9e 81       	ldd	r25, Y+6	; 0x06
    3b94:	21 e0       	ldi	r18, 0x01	; 1
    3b96:	fc 01       	movw	r30, r24
    3b98:	20 83       	st	Z, r18
    3b9a:	04 c0       	rjmp	.+8      	; 0x3ba4 <prvSampleTimeNow+0x5a>
    3b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba0:	fc 01       	movw	r30, r24
    3ba2:	10 82       	st	Z, r1
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
    3ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba8:	ab 81       	ldd	r26, Y+3	; 0x03
    3baa:	bc 81       	ldd	r27, Y+4	; 0x04
    3bac:	80 93 d2 2c 	sts	0x2CD2, r24	; 0x802cd2 <xLastTime.4745>
    3bb0:	90 93 d3 2c 	sts	0x2CD3, r25	; 0x802cd3 <xLastTime.4745+0x1>
    3bb4:	a0 93 d4 2c 	sts	0x2CD4, r26	; 0x802cd4 <xLastTime.4745+0x2>
    3bb8:	b0 93 d5 2c 	sts	0x2CD5, r27	; 0x802cd5 <xLastTime.4745+0x3>
    3bbc:	89 81       	ldd	r24, Y+1	; 0x01
    3bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc0:	ab 81       	ldd	r26, Y+3	; 0x03
    3bc2:	bc 81       	ldd	r27, Y+4	; 0x04
    3bc4:	bc 01       	movw	r22, r24
    3bc6:	cd 01       	movw	r24, r26
    3bc8:	26 96       	adiw	r28, 0x06	; 6
    3bca:	cd bf       	out	0x3d, r28	; 61
    3bcc:	de bf       	out	0x3e, r29	; 62
    3bce:	df 91       	pop	r29
    3bd0:	cf 91       	pop	r28
    3bd2:	08 95       	ret

00003bd4 <prvInsertTimerInActiveList>:
    3bd4:	cf 92       	push	r12
    3bd6:	df 92       	push	r13
    3bd8:	ef 92       	push	r14
    3bda:	ff 92       	push	r15
    3bdc:	0f 93       	push	r16
    3bde:	1f 93       	push	r17
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
    3be8:	2f 97       	sbiw	r28, 0x0f	; 15
    3bea:	cd bf       	out	0x3d, r28	; 61
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	8a 83       	std	Y+2, r24	; 0x02
    3bf0:	9b 83       	std	Y+3, r25	; 0x03
    3bf2:	4c 83       	std	Y+4, r20	; 0x04
    3bf4:	5d 83       	std	Y+5, r21	; 0x05
    3bf6:	6e 83       	std	Y+6, r22	; 0x06
    3bf8:	7f 83       	std	Y+7, r23	; 0x07
    3bfa:	08 87       	std	Y+8, r16	; 0x08
    3bfc:	19 87       	std	Y+9, r17	; 0x09
    3bfe:	2a 87       	std	Y+10, r18	; 0x0a
    3c00:	3b 87       	std	Y+11, r19	; 0x0b
    3c02:	cc 86       	std	Y+12, r12	; 0x0c
    3c04:	dd 86       	std	Y+13, r13	; 0x0d
    3c06:	ee 86       	std	Y+14, r14	; 0x0e
    3c08:	ff 86       	std	Y+15, r15	; 0x0f
    3c0a:	19 82       	std	Y+1, r1	; 0x01
    3c0c:	2a 81       	ldd	r18, Y+2	; 0x02
    3c0e:	3b 81       	ldd	r19, Y+3	; 0x03
    3c10:	8c 81       	ldd	r24, Y+4	; 0x04
    3c12:	9d 81       	ldd	r25, Y+5	; 0x05
    3c14:	ae 81       	ldd	r26, Y+6	; 0x06
    3c16:	bf 81       	ldd	r27, Y+7	; 0x07
    3c18:	f9 01       	movw	r30, r18
    3c1a:	82 83       	std	Z+2, r24	; 0x02
    3c1c:	93 83       	std	Z+3, r25	; 0x03
    3c1e:	a4 83       	std	Z+4, r26	; 0x04
    3c20:	b5 83       	std	Z+5, r27	; 0x05
    3c22:	8a 81       	ldd	r24, Y+2	; 0x02
    3c24:	9b 81       	ldd	r25, Y+3	; 0x03
    3c26:	2a 81       	ldd	r18, Y+2	; 0x02
    3c28:	3b 81       	ldd	r19, Y+3	; 0x03
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	22 87       	std	Z+10, r18	; 0x0a
    3c2e:	33 87       	std	Z+11, r19	; 0x0b
    3c30:	2c 81       	ldd	r18, Y+4	; 0x04
    3c32:	3d 81       	ldd	r19, Y+5	; 0x05
    3c34:	4e 81       	ldd	r20, Y+6	; 0x06
    3c36:	5f 81       	ldd	r21, Y+7	; 0x07
    3c38:	88 85       	ldd	r24, Y+8	; 0x08
    3c3a:	99 85       	ldd	r25, Y+9	; 0x09
    3c3c:	aa 85       	ldd	r26, Y+10	; 0x0a
    3c3e:	bb 85       	ldd	r27, Y+11	; 0x0b
    3c40:	82 17       	cp	r24, r18
    3c42:	93 07       	cpc	r25, r19
    3c44:	a4 07       	cpc	r26, r20
    3c46:	b5 07       	cpc	r27, r21
    3c48:	40 f1       	brcs	.+80     	; 0x3c9a <prvInsertTimerInActiveList+0xc6>
    3c4a:	28 85       	ldd	r18, Y+8	; 0x08
    3c4c:	39 85       	ldd	r19, Y+9	; 0x09
    3c4e:	4a 85       	ldd	r20, Y+10	; 0x0a
    3c50:	5b 85       	ldd	r21, Y+11	; 0x0b
    3c52:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c54:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c56:	ae 85       	ldd	r26, Y+14	; 0x0e
    3c58:	bf 85       	ldd	r27, Y+15	; 0x0f
    3c5a:	28 1b       	sub	r18, r24
    3c5c:	39 0b       	sbc	r19, r25
    3c5e:	4a 0b       	sbc	r20, r26
    3c60:	5b 0b       	sbc	r21, r27
    3c62:	8a 81       	ldd	r24, Y+2	; 0x02
    3c64:	9b 81       	ldd	r25, Y+3	; 0x03
    3c66:	fc 01       	movw	r30, r24
    3c68:	86 85       	ldd	r24, Z+14	; 0x0e
    3c6a:	97 85       	ldd	r25, Z+15	; 0x0f
    3c6c:	a0 89       	ldd	r26, Z+16	; 0x10
    3c6e:	b1 89       	ldd	r27, Z+17	; 0x11
    3c70:	28 17       	cp	r18, r24
    3c72:	39 07       	cpc	r19, r25
    3c74:	4a 07       	cpc	r20, r26
    3c76:	5b 07       	cpc	r21, r27
    3c78:	18 f0       	brcs	.+6      	; 0x3c80 <prvInsertTimerInActiveList+0xac>
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	89 83       	std	Y+1, r24	; 0x01
    3c7e:	36 c0       	rjmp	.+108    	; 0x3cec <prvInsertTimerInActiveList+0x118>
    3c80:	8a 81       	ldd	r24, Y+2	; 0x02
    3c82:	9b 81       	ldd	r25, Y+3	; 0x03
    3c84:	9c 01       	movw	r18, r24
    3c86:	2e 5f       	subi	r18, 0xFE	; 254
    3c88:	3f 4f       	sbci	r19, 0xFF	; 255
    3c8a:	80 91 cc 2c 	lds	r24, 0x2CCC	; 0x802ccc <pxOverflowTimerList>
    3c8e:	90 91 cd 2c 	lds	r25, 0x2CCD	; 0x802ccd <pxOverflowTimerList+0x1>
    3c92:	b9 01       	movw	r22, r18
    3c94:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>
    3c98:	29 c0       	rjmp	.+82     	; 0x3cec <prvInsertTimerInActiveList+0x118>
    3c9a:	28 85       	ldd	r18, Y+8	; 0x08
    3c9c:	39 85       	ldd	r19, Y+9	; 0x09
    3c9e:	4a 85       	ldd	r20, Y+10	; 0x0a
    3ca0:	5b 85       	ldd	r21, Y+11	; 0x0b
    3ca2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ca4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ca6:	ae 85       	ldd	r26, Y+14	; 0x0e
    3ca8:	bf 85       	ldd	r27, Y+15	; 0x0f
    3caa:	28 17       	cp	r18, r24
    3cac:	39 07       	cpc	r19, r25
    3cae:	4a 07       	cpc	r20, r26
    3cb0:	5b 07       	cpc	r21, r27
    3cb2:	80 f4       	brcc	.+32     	; 0x3cd4 <prvInsertTimerInActiveList+0x100>
    3cb4:	2c 81       	ldd	r18, Y+4	; 0x04
    3cb6:	3d 81       	ldd	r19, Y+5	; 0x05
    3cb8:	4e 81       	ldd	r20, Y+6	; 0x06
    3cba:	5f 81       	ldd	r21, Y+7	; 0x07
    3cbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cbe:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cc0:	ae 85       	ldd	r26, Y+14	; 0x0e
    3cc2:	bf 85       	ldd	r27, Y+15	; 0x0f
    3cc4:	28 17       	cp	r18, r24
    3cc6:	39 07       	cpc	r19, r25
    3cc8:	4a 07       	cpc	r20, r26
    3cca:	5b 07       	cpc	r21, r27
    3ccc:	18 f0       	brcs	.+6      	; 0x3cd4 <prvInsertTimerInActiveList+0x100>
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	89 83       	std	Y+1, r24	; 0x01
    3cd2:	0c c0       	rjmp	.+24     	; 0x3cec <prvInsertTimerInActiveList+0x118>
    3cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    3cd8:	9c 01       	movw	r18, r24
    3cda:	2e 5f       	subi	r18, 0xFE	; 254
    3cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    3cde:	80 91 ca 2c 	lds	r24, 0x2CCA	; 0x802cca <pxCurrentTimerList>
    3ce2:	90 91 cb 2c 	lds	r25, 0x2CCB	; 0x802ccb <pxCurrentTimerList+0x1>
    3ce6:	b9 01       	movw	r22, r18
    3ce8:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>
    3cec:	89 81       	ldd	r24, Y+1	; 0x01
    3cee:	2f 96       	adiw	r28, 0x0f	; 15
    3cf0:	cd bf       	out	0x3d, r28	; 61
    3cf2:	de bf       	out	0x3e, r29	; 62
    3cf4:	df 91       	pop	r29
    3cf6:	cf 91       	pop	r28
    3cf8:	1f 91       	pop	r17
    3cfa:	0f 91       	pop	r16
    3cfc:	ff 90       	pop	r15
    3cfe:	ef 90       	pop	r14
    3d00:	df 90       	pop	r13
    3d02:	cf 90       	pop	r12
    3d04:	08 95       	ret

00003d06 <prvProcessReceivedCommands>:
    3d06:	cf 92       	push	r12
    3d08:	df 92       	push	r13
    3d0a:	ef 92       	push	r14
    3d0c:	ff 92       	push	r15
    3d0e:	0f 93       	push	r16
    3d10:	1f 93       	push	r17
    3d12:	cf 93       	push	r28
    3d14:	df 93       	push	r29
    3d16:	cd b7       	in	r28, 0x3d	; 61
    3d18:	de b7       	in	r29, 0x3e	; 62
    3d1a:	65 97       	sbiw	r28, 0x15	; 21
    3d1c:	cd bf       	out	0x3d, r28	; 61
    3d1e:	de bf       	out	0x3e, r29	; 62
    3d20:	e0 c0       	rjmp	.+448    	; 0x3ee2 <prvProcessReceivedCommands+0x1dc>
    3d22:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d24:	88 23       	and	r24, r24
    3d26:	fc f4       	brge	.+62     	; 0x3d66 <prvProcessReceivedCommands+0x60>
    3d28:	ce 01       	movw	r24, r28
    3d2a:	0a 96       	adiw	r24, 0x0a	; 10
    3d2c:	01 96       	adiw	r24, 0x01	; 1
    3d2e:	89 83       	std	Y+1, r24	; 0x01
    3d30:	9a 83       	std	Y+2, r25	; 0x02
    3d32:	89 81       	ldd	r24, Y+1	; 0x01
    3d34:	9a 81       	ldd	r25, Y+2	; 0x02
    3d36:	fc 01       	movw	r30, r24
    3d38:	20 81       	ld	r18, Z
    3d3a:	31 81       	ldd	r19, Z+1	; 0x01
    3d3c:	89 81       	ldd	r24, Y+1	; 0x01
    3d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d40:	fc 01       	movw	r30, r24
    3d42:	84 81       	ldd	r24, Z+4	; 0x04
    3d44:	95 81       	ldd	r25, Z+5	; 0x05
    3d46:	a6 81       	ldd	r26, Z+6	; 0x06
    3d48:	b7 81       	ldd	r27, Z+7	; 0x07
    3d4a:	49 81       	ldd	r20, Y+1	; 0x01
    3d4c:	5a 81       	ldd	r21, Y+2	; 0x02
    3d4e:	fa 01       	movw	r30, r20
    3d50:	02 80       	ldd	r0, Z+2	; 0x02
    3d52:	f3 81       	ldd	r31, Z+3	; 0x03
    3d54:	e0 2d       	mov	r30, r0
    3d56:	ec 8b       	std	Y+20, r30	; 0x14
    3d58:	fd 8b       	std	Y+21, r31	; 0x15
    3d5a:	ac 01       	movw	r20, r24
    3d5c:	bd 01       	movw	r22, r26
    3d5e:	8c 89       	ldd	r24, Y+20	; 0x14
    3d60:	9d 89       	ldd	r25, Y+21	; 0x15
    3d62:	f9 01       	movw	r30, r18
    3d64:	19 95       	eicall
    3d66:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d68:	88 23       	and	r24, r24
    3d6a:	0c f4       	brge	.+2      	; 0x3d6e <prvProcessReceivedCommands+0x68>
    3d6c:	ba c0       	rjmp	.+372    	; 0x3ee2 <prvProcessReceivedCommands+0x1dc>
    3d6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d70:	98 89       	ldd	r25, Y+16	; 0x10
    3d72:	8b 83       	std	Y+3, r24	; 0x03
    3d74:	9c 83       	std	Y+4, r25	; 0x04
    3d76:	8b 81       	ldd	r24, Y+3	; 0x03
    3d78:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7a:	fc 01       	movw	r30, r24
    3d7c:	84 85       	ldd	r24, Z+12	; 0x0c
    3d7e:	95 85       	ldd	r25, Z+13	; 0x0d
    3d80:	89 2b       	or	r24, r25
    3d82:	29 f0       	breq	.+10     	; 0x3d8e <prvProcessReceivedCommands+0x88>
    3d84:	8b 81       	ldd	r24, Y+3	; 0x03
    3d86:	9c 81       	ldd	r25, Y+4	; 0x04
    3d88:	02 96       	adiw	r24, 0x02	; 2
    3d8a:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    3d8e:	ce 01       	movw	r24, r28
    3d90:	43 96       	adiw	r24, 0x13	; 19
    3d92:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <prvSampleTimeNow>
    3d96:	dc 01       	movw	r26, r24
    3d98:	cb 01       	movw	r24, r22
    3d9a:	8d 83       	std	Y+5, r24	; 0x05
    3d9c:	9e 83       	std	Y+6, r25	; 0x06
    3d9e:	af 83       	std	Y+7, r26	; 0x07
    3da0:	b8 87       	std	Y+8, r27	; 0x08
    3da2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3da4:	08 2e       	mov	r0, r24
    3da6:	00 0c       	add	r0, r0
    3da8:	99 0b       	sbc	r25, r25
    3daa:	09 2e       	mov	r0, r25
    3dac:	00 0c       	add	r0, r0
    3dae:	aa 0b       	sbc	r26, r26
    3db0:	bb 0b       	sbc	r27, r27
    3db2:	40 e0       	ldi	r20, 0x00	; 0
    3db4:	50 e0       	ldi	r21, 0x00	; 0
    3db6:	29 e0       	ldi	r18, 0x09	; 9
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	84 1b       	sub	r24, r20
    3dbc:	95 0b       	sbc	r25, r21
    3dbe:	28 17       	cp	r18, r24
    3dc0:	39 07       	cpc	r19, r25
    3dc2:	08 f4       	brcc	.+2      	; 0x3dc6 <prvProcessReceivedCommands+0xc0>
    3dc4:	8d c0       	rjmp	.+282    	; 0x3ee0 <prvProcessReceivedCommands+0x1da>
    3dc6:	fc 01       	movw	r30, r24
    3dc8:	88 27       	eor	r24, r24
    3dca:	e2 50       	subi	r30, 0x02	; 2
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd0:	0c 94 89 32 	jmp	0x6512	; 0x6512 <__tablejump2__>
    3dd4:	eb 84       	ldd	r14, Y+11	; 0x0b
    3dd6:	fc 84       	ldd	r15, Y+12	; 0x0c
    3dd8:	0d 85       	ldd	r16, Y+13	; 0x0d
    3dda:	1e 85       	ldd	r17, Y+14	; 0x0e
    3ddc:	2b 85       	ldd	r18, Y+11	; 0x0b
    3dde:	3c 85       	ldd	r19, Y+12	; 0x0c
    3de0:	4d 85       	ldd	r20, Y+13	; 0x0d
    3de2:	5e 85       	ldd	r21, Y+14	; 0x0e
    3de4:	8b 81       	ldd	r24, Y+3	; 0x03
    3de6:	9c 81       	ldd	r25, Y+4	; 0x04
    3de8:	fc 01       	movw	r30, r24
    3dea:	86 85       	ldd	r24, Z+14	; 0x0e
    3dec:	97 85       	ldd	r25, Z+15	; 0x0f
    3dee:	a0 89       	ldd	r26, Z+16	; 0x10
    3df0:	b1 89       	ldd	r27, Z+17	; 0x11
    3df2:	82 0f       	add	r24, r18
    3df4:	93 1f       	adc	r25, r19
    3df6:	a4 1f       	adc	r26, r20
    3df8:	b5 1f       	adc	r27, r21
    3dfa:	2d 81       	ldd	r18, Y+5	; 0x05
    3dfc:	3e 81       	ldd	r19, Y+6	; 0x06
    3dfe:	4f 81       	ldd	r20, Y+7	; 0x07
    3e00:	58 85       	ldd	r21, Y+8	; 0x08
    3e02:	eb 81       	ldd	r30, Y+3	; 0x03
    3e04:	fc 81       	ldd	r31, Y+4	; 0x04
    3e06:	67 01       	movw	r12, r14
    3e08:	78 01       	movw	r14, r16
    3e0a:	89 01       	movw	r16, r18
    3e0c:	9a 01       	movw	r18, r20
    3e0e:	ac 01       	movw	r20, r24
    3e10:	bd 01       	movw	r22, r26
    3e12:	cf 01       	movw	r24, r30
    3e14:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <prvInsertTimerInActiveList>
    3e18:	88 23       	and	r24, r24
    3e1a:	09 f4       	brne	.+2      	; 0x3e1e <prvProcessReceivedCommands+0x118>
    3e1c:	62 c0       	rjmp	.+196    	; 0x3ee2 <prvProcessReceivedCommands+0x1dc>
    3e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e20:	9c 81       	ldd	r25, Y+4	; 0x04
    3e22:	fc 01       	movw	r30, r24
    3e24:	25 89       	ldd	r18, Z+21	; 0x15
    3e26:	36 89       	ldd	r19, Z+22	; 0x16
    3e28:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e2c:	f9 01       	movw	r30, r18
    3e2e:	19 95       	eicall
    3e30:	8b 81       	ldd	r24, Y+3	; 0x03
    3e32:	9c 81       	ldd	r25, Y+4	; 0x04
    3e34:	fc 01       	movw	r30, r24
    3e36:	82 89       	ldd	r24, Z+18	; 0x12
    3e38:	81 30       	cpi	r24, 0x01	; 1
    3e3a:	09 f0       	breq	.+2      	; 0x3e3e <prvProcessReceivedCommands+0x138>
    3e3c:	52 c0       	rjmp	.+164    	; 0x3ee2 <prvProcessReceivedCommands+0x1dc>
    3e3e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e40:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e42:	4d 85       	ldd	r20, Y+13	; 0x0d
    3e44:	5e 85       	ldd	r21, Y+14	; 0x0e
    3e46:	8b 81       	ldd	r24, Y+3	; 0x03
    3e48:	9c 81       	ldd	r25, Y+4	; 0x04
    3e4a:	fc 01       	movw	r30, r24
    3e4c:	86 85       	ldd	r24, Z+14	; 0x0e
    3e4e:	97 85       	ldd	r25, Z+15	; 0x0f
    3e50:	a0 89       	ldd	r26, Z+16	; 0x10
    3e52:	b1 89       	ldd	r27, Z+17	; 0x11
    3e54:	82 0f       	add	r24, r18
    3e56:	93 1f       	adc	r25, r19
    3e58:	a4 1f       	adc	r26, r20
    3e5a:	b5 1f       	adc	r27, r21
    3e5c:	eb 81       	ldd	r30, Y+3	; 0x03
    3e5e:	fc 81       	ldd	r31, Y+4	; 0x04
    3e60:	c1 2c       	mov	r12, r1
    3e62:	d1 2c       	mov	r13, r1
    3e64:	76 01       	movw	r14, r12
    3e66:	00 e0       	ldi	r16, 0x00	; 0
    3e68:	10 e0       	ldi	r17, 0x00	; 0
    3e6a:	9c 01       	movw	r18, r24
    3e6c:	ad 01       	movw	r20, r26
    3e6e:	60 e0       	ldi	r22, 0x00	; 0
    3e70:	cf 01       	movw	r24, r30
    3e72:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <xTimerGenericCommand>
    3e76:	89 87       	std	Y+9, r24	; 0x09
    3e78:	34 c0       	rjmp	.+104    	; 0x3ee2 <prvProcessReceivedCommands+0x1dc>
    3e7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e7e:	ad 85       	ldd	r26, Y+13	; 0x0d
    3e80:	be 85       	ldd	r27, Y+14	; 0x0e
    3e82:	2b 81       	ldd	r18, Y+3	; 0x03
    3e84:	3c 81       	ldd	r19, Y+4	; 0x04
    3e86:	f9 01       	movw	r30, r18
    3e88:	86 87       	std	Z+14, r24	; 0x0e
    3e8a:	97 87       	std	Z+15, r25	; 0x0f
    3e8c:	a0 8b       	std	Z+16, r26	; 0x10
    3e8e:	b1 8b       	std	Z+17, r27	; 0x11
    3e90:	8b 81       	ldd	r24, Y+3	; 0x03
    3e92:	9c 81       	ldd	r25, Y+4	; 0x04
    3e94:	fc 01       	movw	r30, r24
    3e96:	26 85       	ldd	r18, Z+14	; 0x0e
    3e98:	37 85       	ldd	r19, Z+15	; 0x0f
    3e9a:	40 89       	ldd	r20, Z+16	; 0x10
    3e9c:	51 89       	ldd	r21, Z+17	; 0x11
    3e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea2:	af 81       	ldd	r26, Y+7	; 0x07
    3ea4:	b8 85       	ldd	r27, Y+8	; 0x08
    3ea6:	82 0f       	add	r24, r18
    3ea8:	93 1f       	adc	r25, r19
    3eaa:	a4 1f       	adc	r26, r20
    3eac:	b5 1f       	adc	r27, r21
    3eae:	ed 80       	ldd	r14, Y+5	; 0x05
    3eb0:	fe 80       	ldd	r15, Y+6	; 0x06
    3eb2:	0f 81       	ldd	r16, Y+7	; 0x07
    3eb4:	18 85       	ldd	r17, Y+8	; 0x08
    3eb6:	2d 81       	ldd	r18, Y+5	; 0x05
    3eb8:	3e 81       	ldd	r19, Y+6	; 0x06
    3eba:	4f 81       	ldd	r20, Y+7	; 0x07
    3ebc:	58 85       	ldd	r21, Y+8	; 0x08
    3ebe:	eb 81       	ldd	r30, Y+3	; 0x03
    3ec0:	fc 81       	ldd	r31, Y+4	; 0x04
    3ec2:	67 01       	movw	r12, r14
    3ec4:	78 01       	movw	r14, r16
    3ec6:	89 01       	movw	r16, r18
    3ec8:	9a 01       	movw	r18, r20
    3eca:	ac 01       	movw	r20, r24
    3ecc:	bd 01       	movw	r22, r26
    3ece:	cf 01       	movw	r24, r30
    3ed0:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <prvInsertTimerInActiveList>
    3ed4:	06 c0       	rjmp	.+12     	; 0x3ee2 <prvProcessReceivedCommands+0x1dc>
    3ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eda:	0e 94 db 07 	call	0xfb6	; 0xfb6 <vPortFree>
    3ede:	01 c0       	rjmp	.+2      	; 0x3ee2 <prvProcessReceivedCommands+0x1dc>
    3ee0:	00 00       	nop
    3ee2:	80 91 ce 2c 	lds	r24, 0x2CCE	; 0x802cce <xTimerQueue>
    3ee6:	90 91 cf 2c 	lds	r25, 0x2CCF	; 0x802ccf <xTimerQueue+0x1>
    3eea:	be 01       	movw	r22, r28
    3eec:	66 5f       	subi	r22, 0xF6	; 246
    3eee:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	a9 01       	movw	r20, r18
    3ef6:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <xQueueReceive>
    3efa:	88 23       	and	r24, r24
    3efc:	09 f0       	breq	.+2      	; 0x3f00 <prvProcessReceivedCommands+0x1fa>
    3efe:	11 cf       	rjmp	.-478    	; 0x3d22 <prvProcessReceivedCommands+0x1c>
    3f00:	00 00       	nop
    3f02:	65 96       	adiw	r28, 0x15	; 21
    3f04:	cd bf       	out	0x3d, r28	; 61
    3f06:	de bf       	out	0x3e, r29	; 62
    3f08:	df 91       	pop	r29
    3f0a:	cf 91       	pop	r28
    3f0c:	1f 91       	pop	r17
    3f0e:	0f 91       	pop	r16
    3f10:	ff 90       	pop	r15
    3f12:	ef 90       	pop	r14
    3f14:	df 90       	pop	r13
    3f16:	cf 90       	pop	r12
    3f18:	08 95       	ret

00003f1a <prvSwitchTimerLists>:
    3f1a:	cf 92       	push	r12
    3f1c:	df 92       	push	r13
    3f1e:	ef 92       	push	r14
    3f20:	ff 92       	push	r15
    3f22:	0f 93       	push	r16
    3f24:	1f 93       	push	r17
    3f26:	cf 93       	push	r28
    3f28:	df 93       	push	r29
    3f2a:	cd b7       	in	r28, 0x3d	; 61
    3f2c:	de b7       	in	r29, 0x3e	; 62
    3f2e:	2d 97       	sbiw	r28, 0x0d	; 13
    3f30:	cd bf       	out	0x3d, r28	; 61
    3f32:	de bf       	out	0x3e, r29	; 62
    3f34:	82 c0       	rjmp	.+260    	; 0x403a <__stack+0x3b>
    3f36:	80 91 ca 2c 	lds	r24, 0x2CCA	; 0x802cca <pxCurrentTimerList>
    3f3a:	90 91 cb 2c 	lds	r25, 0x2CCB	; 0x802ccb <pxCurrentTimerList+0x1>
    3f3e:	fc 01       	movw	r30, r24
    3f40:	87 81       	ldd	r24, Z+7	; 0x07
    3f42:	90 85       	ldd	r25, Z+8	; 0x08
    3f44:	fc 01       	movw	r30, r24
    3f46:	80 81       	ld	r24, Z
    3f48:	91 81       	ldd	r25, Z+1	; 0x01
    3f4a:	a2 81       	ldd	r26, Z+2	; 0x02
    3f4c:	b3 81       	ldd	r27, Z+3	; 0x03
    3f4e:	89 83       	std	Y+1, r24	; 0x01
    3f50:	9a 83       	std	Y+2, r25	; 0x02
    3f52:	ab 83       	std	Y+3, r26	; 0x03
    3f54:	bc 83       	std	Y+4, r27	; 0x04
    3f56:	80 91 ca 2c 	lds	r24, 0x2CCA	; 0x802cca <pxCurrentTimerList>
    3f5a:	90 91 cb 2c 	lds	r25, 0x2CCB	; 0x802ccb <pxCurrentTimerList+0x1>
    3f5e:	fc 01       	movw	r30, r24
    3f60:	87 81       	ldd	r24, Z+7	; 0x07
    3f62:	90 85       	ldd	r25, Z+8	; 0x08
    3f64:	fc 01       	movw	r30, r24
    3f66:	80 85       	ldd	r24, Z+8	; 0x08
    3f68:	91 85       	ldd	r25, Z+9	; 0x09
    3f6a:	8d 83       	std	Y+5, r24	; 0x05
    3f6c:	9e 83       	std	Y+6, r25	; 0x06
    3f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f70:	9e 81       	ldd	r25, Y+6	; 0x06
    3f72:	02 96       	adiw	r24, 0x02	; 2
    3f74:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    3f78:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f7c:	fc 01       	movw	r30, r24
    3f7e:	25 89       	ldd	r18, Z+21	; 0x15
    3f80:	36 89       	ldd	r19, Z+22	; 0x16
    3f82:	8d 81       	ldd	r24, Y+5	; 0x05
    3f84:	9e 81       	ldd	r25, Y+6	; 0x06
    3f86:	f9 01       	movw	r30, r18
    3f88:	19 95       	eicall
    3f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f8e:	fc 01       	movw	r30, r24
    3f90:	82 89       	ldd	r24, Z+18	; 0x12
    3f92:	81 30       	cpi	r24, 0x01	; 1
    3f94:	09 f0       	breq	.+2      	; 0x3f98 <prvSwitchTimerLists+0x7e>
    3f96:	51 c0       	rjmp	.+162    	; 0x403a <__stack+0x3b>
    3f98:	8d 81       	ldd	r24, Y+5	; 0x05
    3f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f9c:	fc 01       	movw	r30, r24
    3f9e:	26 85       	ldd	r18, Z+14	; 0x0e
    3fa0:	37 85       	ldd	r19, Z+15	; 0x0f
    3fa2:	40 89       	ldd	r20, Z+16	; 0x10
    3fa4:	51 89       	ldd	r21, Z+17	; 0x11
    3fa6:	89 81       	ldd	r24, Y+1	; 0x01
    3fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    3faa:	ab 81       	ldd	r26, Y+3	; 0x03
    3fac:	bc 81       	ldd	r27, Y+4	; 0x04
    3fae:	82 0f       	add	r24, r18
    3fb0:	93 1f       	adc	r25, r19
    3fb2:	a4 1f       	adc	r26, r20
    3fb4:	b5 1f       	adc	r27, r21
    3fb6:	8f 83       	std	Y+7, r24	; 0x07
    3fb8:	98 87       	std	Y+8, r25	; 0x08
    3fba:	a9 87       	std	Y+9, r26	; 0x09
    3fbc:	ba 87       	std	Y+10, r27	; 0x0a
    3fbe:	2f 81       	ldd	r18, Y+7	; 0x07
    3fc0:	38 85       	ldd	r19, Y+8	; 0x08
    3fc2:	49 85       	ldd	r20, Y+9	; 0x09
    3fc4:	5a 85       	ldd	r21, Y+10	; 0x0a
    3fc6:	89 81       	ldd	r24, Y+1	; 0x01
    3fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fca:	ab 81       	ldd	r26, Y+3	; 0x03
    3fcc:	bc 81       	ldd	r27, Y+4	; 0x04
    3fce:	82 17       	cp	r24, r18
    3fd0:	93 07       	cpc	r25, r19
    3fd2:	a4 07       	cpc	r26, r20
    3fd4:	b5 07       	cpc	r27, r21
    3fd6:	f8 f4       	brcc	.+62     	; 0x4016 <__stack+0x17>
    3fd8:	2d 81       	ldd	r18, Y+5	; 0x05
    3fda:	3e 81       	ldd	r19, Y+6	; 0x06
    3fdc:	8f 81       	ldd	r24, Y+7	; 0x07
    3fde:	98 85       	ldd	r25, Y+8	; 0x08
    3fe0:	a9 85       	ldd	r26, Y+9	; 0x09
    3fe2:	ba 85       	ldd	r27, Y+10	; 0x0a
    3fe4:	f9 01       	movw	r30, r18
    3fe6:	82 83       	std	Z+2, r24	; 0x02
    3fe8:	93 83       	std	Z+3, r25	; 0x03
    3fea:	a4 83       	std	Z+4, r26	; 0x04
    3fec:	b5 83       	std	Z+5, r27	; 0x05
    3fee:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff2:	2d 81       	ldd	r18, Y+5	; 0x05
    3ff4:	3e 81       	ldd	r19, Y+6	; 0x06
    3ff6:	fc 01       	movw	r30, r24
    3ff8:	22 87       	std	Z+10, r18	; 0x0a
    3ffa:	33 87       	std	Z+11, r19	; 0x0b
    3ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    4000:	9c 01       	movw	r18, r24
    4002:	2e 5f       	subi	r18, 0xFE	; 254
    4004:	3f 4f       	sbci	r19, 0xFF	; 255
    4006:	80 91 ca 2c 	lds	r24, 0x2CCA	; 0x802cca <pxCurrentTimerList>
    400a:	90 91 cb 2c 	lds	r25, 0x2CCB	; 0x802ccb <pxCurrentTimerList+0x1>
    400e:	b9 01       	movw	r22, r18
    4010:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>
    4014:	12 c0       	rjmp	.+36     	; 0x403a <__stack+0x3b>
    4016:	89 81       	ldd	r24, Y+1	; 0x01
    4018:	9a 81       	ldd	r25, Y+2	; 0x02
    401a:	ab 81       	ldd	r26, Y+3	; 0x03
    401c:	bc 81       	ldd	r27, Y+4	; 0x04
    401e:	ed 81       	ldd	r30, Y+5	; 0x05
    4020:	fe 81       	ldd	r31, Y+6	; 0x06
    4022:	c1 2c       	mov	r12, r1
    4024:	d1 2c       	mov	r13, r1
    4026:	76 01       	movw	r14, r12
    4028:	00 e0       	ldi	r16, 0x00	; 0
    402a:	10 e0       	ldi	r17, 0x00	; 0
    402c:	9c 01       	movw	r18, r24
    402e:	ad 01       	movw	r20, r26
    4030:	60 e0       	ldi	r22, 0x00	; 0
    4032:	cf 01       	movw	r24, r30
    4034:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <xTimerGenericCommand>
    4038:	8b 87       	std	Y+11, r24	; 0x0b
    403a:	80 91 ca 2c 	lds	r24, 0x2CCA	; 0x802cca <pxCurrentTimerList>
    403e:	90 91 cb 2c 	lds	r25, 0x2CCB	; 0x802ccb <pxCurrentTimerList+0x1>
    4042:	fc 01       	movw	r30, r24
    4044:	80 81       	ld	r24, Z
    4046:	88 23       	and	r24, r24
    4048:	09 f0       	breq	.+2      	; 0x404c <__stack+0x4d>
    404a:	75 cf       	rjmp	.-278    	; 0x3f36 <prvSwitchTimerLists+0x1c>
    404c:	80 91 ca 2c 	lds	r24, 0x2CCA	; 0x802cca <pxCurrentTimerList>
    4050:	90 91 cb 2c 	lds	r25, 0x2CCB	; 0x802ccb <pxCurrentTimerList+0x1>
    4054:	8c 87       	std	Y+12, r24	; 0x0c
    4056:	9d 87       	std	Y+13, r25	; 0x0d
    4058:	80 91 cc 2c 	lds	r24, 0x2CCC	; 0x802ccc <pxOverflowTimerList>
    405c:	90 91 cd 2c 	lds	r25, 0x2CCD	; 0x802ccd <pxOverflowTimerList+0x1>
    4060:	80 93 ca 2c 	sts	0x2CCA, r24	; 0x802cca <pxCurrentTimerList>
    4064:	90 93 cb 2c 	sts	0x2CCB, r25	; 0x802ccb <pxCurrentTimerList+0x1>
    4068:	8c 85       	ldd	r24, Y+12	; 0x0c
    406a:	9d 85       	ldd	r25, Y+13	; 0x0d
    406c:	80 93 cc 2c 	sts	0x2CCC, r24	; 0x802ccc <pxOverflowTimerList>
    4070:	90 93 cd 2c 	sts	0x2CCD, r25	; 0x802ccd <pxOverflowTimerList+0x1>
    4074:	00 00       	nop
    4076:	2d 96       	adiw	r28, 0x0d	; 13
    4078:	cd bf       	out	0x3d, r28	; 61
    407a:	de bf       	out	0x3e, r29	; 62
    407c:	df 91       	pop	r29
    407e:	cf 91       	pop	r28
    4080:	1f 91       	pop	r17
    4082:	0f 91       	pop	r16
    4084:	ff 90       	pop	r15
    4086:	ef 90       	pop	r14
    4088:	df 90       	pop	r13
    408a:	cf 90       	pop	r12
    408c:	08 95       	ret

0000408e <prvCheckForValidListAndQueue>:
    408e:	cf 93       	push	r28
    4090:	df 93       	push	r29
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
    4096:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    409a:	ff 93       	push	r31
    409c:	f8 7f       	andi	r31, 0xF8	; 248
    409e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    40a2:	80 91 ce 2c 	lds	r24, 0x2CCE	; 0x802cce <xTimerQueue>
    40a6:	90 91 cf 2c 	lds	r25, 0x2CCF	; 0x802ccf <xTimerQueue+0x1>
    40aa:	89 2b       	or	r24, r25
    40ac:	e9 f4       	brne	.+58     	; 0x40e8 <prvCheckForValidListAndQueue+0x5a>
    40ae:	84 eb       	ldi	r24, 0xB4	; 180
    40b0:	9c e2       	ldi	r25, 0x2C	; 44
    40b2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    40b6:	8f eb       	ldi	r24, 0xBF	; 191
    40b8:	9c e2       	ldi	r25, 0x2C	; 44
    40ba:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    40be:	84 eb       	ldi	r24, 0xB4	; 180
    40c0:	9c e2       	ldi	r25, 0x2C	; 44
    40c2:	80 93 ca 2c 	sts	0x2CCA, r24	; 0x802cca <pxCurrentTimerList>
    40c6:	90 93 cb 2c 	sts	0x2CCB, r25	; 0x802ccb <pxCurrentTimerList+0x1>
    40ca:	8f eb       	ldi	r24, 0xBF	; 191
    40cc:	9c e2       	ldi	r25, 0x2C	; 44
    40ce:	80 93 cc 2c 	sts	0x2CCC, r24	; 0x802ccc <pxOverflowTimerList>
    40d2:	90 93 cd 2c 	sts	0x2CCD, r25	; 0x802ccd <pxOverflowTimerList+0x1>
    40d6:	40 e0       	ldi	r20, 0x00	; 0
    40d8:	69 e0       	ldi	r22, 0x09	; 9
    40da:	85 e0       	ldi	r24, 0x05	; 5
    40dc:	0e 94 66 0d 	call	0x1acc	; 0x1acc <xQueueGenericCreate>
    40e0:	80 93 ce 2c 	sts	0x2CCE, r24	; 0x802cce <xTimerQueue>
    40e4:	90 93 cf 2c 	sts	0x2CCF, r25	; 0x802ccf <xTimerQueue+0x1>
    40e8:	ff 91       	pop	r31
    40ea:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    40ee:	00 00       	nop
    40f0:	df 91       	pop	r29
    40f2:	cf 91       	pop	r28
    40f4:	08 95       	ret

000040f6 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    40f6:	0f 93       	push	r16
    40f8:	1f 93       	push	r17
    40fa:	cf 93       	push	r28
    40fc:	df 93       	push	r29
    40fe:	cd b7       	in	r28, 0x3d	; 61
    4100:	de b7       	in	r29, 0x3e	; 62
    4102:	64 97       	sbiw	r28, 0x14	; 20
    4104:	cd bf       	out	0x3d, r28	; 61
    4106:	de bf       	out	0x3e, r29	; 62
    4108:	8b 87       	std	Y+11, r24	; 0x0b
    410a:	9c 87       	std	Y+12, r25	; 0x0c
    410c:	6d 87       	std	Y+13, r22	; 0x0d
    410e:	7e 87       	std	Y+14, r23	; 0x0e
    4110:	2f 87       	std	Y+15, r18	; 0x0f
    4112:	38 8b       	std	Y+16, r19	; 0x10
    4114:	49 8b       	std	Y+17, r20	; 0x11
    4116:	5a 8b       	std	Y+18, r21	; 0x12
    4118:	0b 8b       	std	Y+19, r16	; 0x13
    411a:	1c 8b       	std	Y+20, r17	; 0x14
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    411c:	8e ef       	ldi	r24, 0xFE	; 254
    411e:	8a 83       	std	Y+2, r24	; 0x02
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    4120:	8b 85       	ldd	r24, Y+11	; 0x0b
    4122:	9c 85       	ldd	r25, Y+12	; 0x0c
    4124:	8b 83       	std	Y+3, r24	; 0x03
    4126:	9c 83       	std	Y+4, r25	; 0x04
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    4128:	8d 85       	ldd	r24, Y+13	; 0x0d
    412a:	9e 85       	ldd	r25, Y+14	; 0x0e
    412c:	8d 83       	std	Y+5, r24	; 0x05
    412e:	9e 83       	std	Y+6, r25	; 0x06
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    4130:	8f 85       	ldd	r24, Y+15	; 0x0f
    4132:	98 89       	ldd	r25, Y+16	; 0x10
    4134:	a9 89       	ldd	r26, Y+17	; 0x11
    4136:	ba 89       	ldd	r27, Y+18	; 0x12
    4138:	8f 83       	std	Y+7, r24	; 0x07
    413a:	98 87       	std	Y+8, r25	; 0x08
    413c:	a9 87       	std	Y+9, r26	; 0x09
    413e:	ba 87       	std	Y+10, r27	; 0x0a

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    4140:	80 91 ce 2c 	lds	r24, 0x2CCE	; 0x802cce <xTimerQueue>
    4144:	90 91 cf 2c 	lds	r25, 0x2CCF	; 0x802ccf <xTimerQueue+0x1>
    4148:	4b 89       	ldd	r20, Y+19	; 0x13
    414a:	5c 89       	ldd	r21, Y+20	; 0x14
    414c:	be 01       	movw	r22, r28
    414e:	6e 5f       	subi	r22, 0xFE	; 254
    4150:	7f 4f       	sbci	r23, 0xFF	; 255
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <xQueueGenericSendFromISR>
    4158:	89 83       	std	Y+1, r24	; 0x01

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    415a:	89 81       	ldd	r24, Y+1	; 0x01
	}
    415c:	64 96       	adiw	r28, 0x14	; 20
    415e:	cd bf       	out	0x3d, r28	; 61
    4160:	de bf       	out	0x3e, r29	; 62
    4162:	df 91       	pop	r29
    4164:	cf 91       	pop	r28
    4166:	1f 91       	pop	r17
    4168:	0f 91       	pop	r16
    416a:	08 95       	ret

0000416c <vInitClock>:
#include "init.h"
#include "clksys_driver.h"


void vInitClock(void)
{
    416c:	cf 93       	push	r28
    416e:	df 93       	push	r29
    4170:	cd b7       	in	r28, 0x3d	; 61
    4172:	de b7       	in	r29, 0x3e	; 62
	CLKSYS_Enable( OSC_RC2MEN_bm );
    4174:	80 e5       	ldi	r24, 0x50	; 80
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	20 e5       	ldi	r18, 0x50	; 80
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	f9 01       	movw	r30, r18
    417e:	20 81       	ld	r18, Z
    4180:	21 60       	ori	r18, 0x01	; 1
    4182:	fc 01       	movw	r30, r24
    4184:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    4186:	80 e5       	ldi	r24, 0x50	; 80
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	fc 01       	movw	r30, r24
    418c:	81 81       	ldd	r24, Z+1	; 0x01
    418e:	88 2f       	mov	r24, r24
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	81 70       	andi	r24, 0x01	; 1
    4194:	99 27       	eor	r25, r25
    4196:	89 2b       	or	r24, r25
    4198:	b1 f3       	breq	.-20     	; 0x4186 <vInitClock+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    419a:	80 e0       	ldi	r24, 0x00	; 0
    419c:	0e 94 9a 03 	call	0x734	; 0x734 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    41a0:	8e e1       	ldi	r24, 0x1E	; 30
    41a2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    41a6:	60 e0       	ldi	r22, 0x00	; 0
    41a8:	80 e0       	ldi	r24, 0x00	; 0
    41aa:	0e 94 83 03 	call	0x706	; 0x706 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    41ae:	43 e0       	ldi	r20, 0x03	; 3
    41b0:	60 e0       	ldi	r22, 0x00	; 0
    41b2:	80 e4       	ldi	r24, 0x40	; 64
    41b4:	0e 94 2e 03 	call	0x65c	; 0x65c <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    41b8:	80 e5       	ldi	r24, 0x50	; 80
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	20 e5       	ldi	r18, 0x50	; 80
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	f9 01       	movw	r30, r18
    41c2:	20 81       	ld	r18, Z
    41c4:	28 60       	ori	r18, 0x08	; 8
    41c6:	fc 01       	movw	r30, r24
    41c8:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    41ca:	80 e5       	ldi	r24, 0x50	; 80
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	fc 01       	movw	r30, r24
    41d0:	81 81       	ldd	r24, Z+1	; 0x01
    41d2:	88 2f       	mov	r24, r24
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	88 70       	andi	r24, 0x08	; 8
    41d8:	99 27       	eor	r25, r25
    41da:	89 2b       	or	r24, r25
    41dc:	b1 f3       	breq	.-20     	; 0x41ca <vInitClock+0x5e>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    41de:	64 e0       	ldi	r22, 0x04	; 4
    41e0:	80 ec       	ldi	r24, 0xC0	; 192
    41e2:	0e 94 4b 03 	call	0x696	; 0x696 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    41e6:	80 e5       	ldi	r24, 0x50	; 80
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	20 e5       	ldi	r18, 0x50	; 80
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	f9 01       	movw	r30, r18
    41f0:	20 81       	ld	r18, Z
    41f2:	20 61       	ori	r18, 0x10	; 16
    41f4:	fc 01       	movw	r30, r24
    41f6:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    41f8:	60 e0       	ldi	r22, 0x00	; 0
    41fa:	80 e0       	ldi	r24, 0x00	; 0
    41fc:	0e 94 83 03 	call	0x706	; 0x706 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    4200:	80 e5       	ldi	r24, 0x50	; 80
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	fc 01       	movw	r30, r24
    4206:	81 81       	ldd	r24, Z+1	; 0x01
    4208:	88 2f       	mov	r24, r24
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	80 71       	andi	r24, 0x10	; 16
    420e:	99 27       	eor	r25, r25
    4210:	89 2b       	or	r24, r25
    4212:	b1 f3       	breq	.-20     	; 0x4200 <vInitClock+0x94>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    4214:	84 e0       	ldi	r24, 0x04	; 4
    4216:	0e 94 9a 03 	call	0x734	; 0x734 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    421a:	87 e0       	ldi	r24, 0x07	; 7
    421c:	0e 94 63 03 	call	0x6c6	; 0x6c6 <CLKSYS_Disable>
    4220:	00 00       	nop
    4222:	df 91       	pop	r29
    4224:	cf 91       	pop	r28
    4226:	08 95       	ret

00004228 <vApplicationIdleHook>:
TaskHandle_t CalculationTask;
TaskHandle_t ButtonHandlerTask;

EventGroupHandle_t egMyEventGroup;
void vApplicationIdleHook( void )
{	
    4228:	cf 93       	push	r28
    422a:	df 93       	push	r29
    422c:	cd b7       	in	r28, 0x3d	; 61
    422e:	de b7       	in	r29, 0x3e	; 62
	
}
    4230:	00 00       	nop
    4232:	df 91       	pop	r29
    4234:	cf 91       	pop	r28
    4236:	08 95       	ret

00004238 <main>:
int main(void)
{
    4238:	ef 92       	push	r14
    423a:	ff 92       	push	r15
    423c:	0f 93       	push	r16
    423e:	cf 93       	push	r28
    4240:	df 93       	push	r29
    4242:	cd b7       	in	r28, 0x3d	; 61
    4244:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIR = 0x0f;
    4246:	80 ea       	ldi	r24, 0xA0	; 160
    4248:	96 e0       	ldi	r25, 0x06	; 6
    424a:	2f e0       	ldi	r18, 0x0F	; 15
    424c:	fc 01       	movw	r30, r24
    424e:	20 83       	st	Z, r18
	PORTE.DIR = 0x0f;
    4250:	80 e8       	ldi	r24, 0x80	; 128
    4252:	96 e0       	ldi	r25, 0x06	; 6
    4254:	2f e0       	ldi	r18, 0x0F	; 15
    4256:	fc 01       	movw	r30, r24
    4258:	20 83       	st	Z, r18
	PORTF.OUT = 0x0f;
    425a:	80 ea       	ldi	r24, 0xA0	; 160
    425c:	96 e0       	ldi	r25, 0x06	; 6
    425e:	2f e0       	ldi	r18, 0x0F	; 15
    4260:	fc 01       	movw	r30, r24
    4262:	24 83       	std	Z+4, r18	; 0x04
	PORTE.OUT = 0x0f;
    4264:	80 e8       	ldi	r24, 0x80	; 128
    4266:	96 e0       	ldi	r25, 0x06	; 6
    4268:	2f e0       	ldi	r18, 0x0F	; 15
    426a:	fc 01       	movw	r30, r24
    426c:	24 83       	std	Z+4, r18	; 0x04
	
	egMyEventGroup = xEventGroupCreate();	
    426e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <xEventGroupCreate>
    4272:	80 93 07 2d 	sts	0x2D07, r24	; 0x802d07 <egMyEventGroup>
    4276:	90 93 08 2d 	sts	0x2D08, r25	; 0x802d08 <egMyEventGroup+0x1>
	xTaskCreate(vInterface, (const char *) "InterfaceTask", configMINIMAL_STACK_SIZE, NULL, 1, &InterfaceTask);
    427a:	0f 2e       	mov	r0, r31
    427c:	f3 e3       	ldi	r31, 0x33	; 51
    427e:	ef 2e       	mov	r14, r31
    4280:	fd e2       	ldi	r31, 0x2D	; 45
    4282:	ff 2e       	mov	r15, r31
    4284:	f0 2d       	mov	r31, r0
    4286:	01 e0       	ldi	r16, 0x01	; 1
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	30 e0       	ldi	r19, 0x00	; 0
    428c:	48 ec       	ldi	r20, 0xC8	; 200
    428e:	50 e0       	ldi	r21, 0x00	; 0
    4290:	61 e1       	ldi	r22, 0x11	; 17
    4292:	70 e2       	ldi	r23, 0x20	; 32
    4294:	80 e8       	ldi	r24, 0x80	; 128
    4296:	91 e2       	ldi	r25, 0x21	; 33
    4298:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
	xTaskCreate(vCalculation, (const char *) "CalculationTask", configMINIMAL_STACK_SIZE, NULL, 1, &CalculationTask);
    429c:	0f 2e       	mov	r0, r31
    429e:	f5 e3       	ldi	r31, 0x35	; 53
    42a0:	ef 2e       	mov	r14, r31
    42a2:	fd e2       	ldi	r31, 0x2D	; 45
    42a4:	ff 2e       	mov	r15, r31
    42a6:	f0 2d       	mov	r31, r0
    42a8:	01 e0       	ldi	r16, 0x01	; 1
    42aa:	20 e0       	ldi	r18, 0x00	; 0
    42ac:	30 e0       	ldi	r19, 0x00	; 0
    42ae:	48 ec       	ldi	r20, 0xC8	; 200
    42b0:	50 e0       	ldi	r21, 0x00	; 0
    42b2:	6f e1       	ldi	r22, 0x1F	; 31
    42b4:	70 e2       	ldi	r23, 0x20	; 32
    42b6:	86 e8       	ldi	r24, 0x86	; 134
    42b8:	92 e2       	ldi	r25, 0x22	; 34
    42ba:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
	xTaskCreate(vButtonHandler, (const char *) "ButtonHandlerTask", configMINIMAL_STACK_SIZE, NULL, 1, &ButtonHandlerTask);
    42be:	0f 2e       	mov	r0, r31
    42c0:	fd e1       	ldi	r31, 0x1D	; 29
    42c2:	ef 2e       	mov	r14, r31
    42c4:	fd e2       	ldi	r31, 0x2D	; 45
    42c6:	ff 2e       	mov	r15, r31
    42c8:	f0 2d       	mov	r31, r0
    42ca:	01 e0       	ldi	r16, 0x01	; 1
    42cc:	20 e0       	ldi	r18, 0x00	; 0
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	48 ec       	ldi	r20, 0xC8	; 200
    42d2:	50 e0       	ldi	r21, 0x00	; 0
    42d4:	6f e2       	ldi	r22, 0x2F	; 47
    42d6:	70 e2       	ldi	r23, 0x20	; 32
    42d8:	89 e2       	ldi	r24, 0x29	; 41
    42da:	92 e2       	ldi	r25, 0x22	; 34
    42dc:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
	
	vInitClock();
    42e0:	0e 94 b6 20 	call	0x416c	; 0x416c <vInitClock>
	vInitDisplay();
    42e4:	0e 94 f5 24 	call	0x49ea	; 0x49ea <vInitDisplay>
	vDisplayClear();
    42e8:	0e 94 40 27 	call	0x4e80	; 0x4e80 <vDisplayClear>
	vTaskStartScheduler();
    42ec:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vTaskStartScheduler>
	return 0;
    42f0:	80 e0       	ldi	r24, 0x00	; 0
    42f2:	90 e0       	ldi	r25, 0x00	; 0
}
    42f4:	df 91       	pop	r29
    42f6:	cf 91       	pop	r28
    42f8:	0f 91       	pop	r16
    42fa:	ff 90       	pop	r15
    42fc:	ef 90       	pop	r14
    42fe:	08 95       	ret

00004300 <vInterface>:
	
void vInterface(void *pvParameters) 
{
    4300:	0f 93       	push	r16
    4302:	1f 93       	push	r17
    4304:	cf 93       	push	r28
    4306:	df 93       	push	r29
    4308:	1f 92       	push	r1
    430a:	1f 92       	push	r1
    430c:	cd b7       	in	r28, 0x3d	; 61
    430e:	de b7       	in	r29, 0x3e	; 62
    4310:	89 83       	std	Y+1, r24	; 0x01
    4312:	9a 83       	std	Y+2, r25	; 0x02

	
	for(;;)
	 {	
		vTaskDelay ( 500 / portTICK_RATE_MS);
    4314:	64 ef       	ldi	r22, 0xF4	; 244
    4316:	71 e0       	ldi	r23, 0x01	; 1
    4318:	80 e0       	ldi	r24, 0x00	; 0
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	0e 94 ba 13 	call	0x2774	; 0x2774 <vTaskDelay>
		vDisplayWriteStringAtPos(0, 0, "Calculating Pi v1.0b");
    4320:	81 e4       	ldi	r24, 0x41	; 65
    4322:	90 e2       	ldi	r25, 0x20	; 32
    4324:	89 2f       	mov	r24, r25
    4326:	8f 93       	push	r24
    4328:	81 e4       	ldi	r24, 0x41	; 65
    432a:	90 e2       	ldi	r25, 0x20	; 32
    432c:	8f 93       	push	r24
    432e:	1f 92       	push	r1
    4330:	1f 92       	push	r1
    4332:	1f 92       	push	r1
    4334:	1f 92       	push	r1
    4336:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <vDisplayWriteStringAtPos>
    433a:	0f 90       	pop	r0
    433c:	0f 90       	pop	r0
    433e:	0f 90       	pop	r0
    4340:	0f 90       	pop	r0
    4342:	0f 90       	pop	r0
    4344:	0f 90       	pop	r0
		dtostrf(i, 1, 0, i_str);									//Transforming double variable i to a string to be able to print the value correclty on the display.
    4346:	80 91 d6 2c 	lds	r24, 0x2CD6	; 0x802cd6 <i>
    434a:	90 91 d7 2c 	lds	r25, 0x2CD7	; 0x802cd7 <i+0x1>
    434e:	a0 91 d8 2c 	lds	r26, 0x2CD8	; 0x802cd8 <i+0x2>
    4352:	b0 91 d9 2c 	lds	r27, 0x2CD9	; 0x802cd9 <i+0x3>
    4356:	0f e1       	ldi	r16, 0x1F	; 31
    4358:	1d e2       	ldi	r17, 0x2D	; 45
    435a:	20 e0       	ldi	r18, 0x00	; 0
    435c:	41 e0       	ldi	r20, 0x01	; 1
    435e:	bc 01       	movw	r22, r24
    4360:	cd 01       	movw	r24, r26
    4362:	0e 94 91 32 	call	0x6522	; 0x6522 <dtostrf>
		vDisplayWriteStringAtPos(1, 0, "Iterations: %s", i_str);	
    4366:	8f e1       	ldi	r24, 0x1F	; 31
    4368:	9d e2       	ldi	r25, 0x2D	; 45
    436a:	89 2f       	mov	r24, r25
    436c:	8f 93       	push	r24
    436e:	8f e1       	ldi	r24, 0x1F	; 31
    4370:	9d e2       	ldi	r25, 0x2D	; 45
    4372:	8f 93       	push	r24
    4374:	86 e5       	ldi	r24, 0x56	; 86
    4376:	90 e2       	ldi	r25, 0x20	; 32
    4378:	89 2f       	mov	r24, r25
    437a:	8f 93       	push	r24
    437c:	86 e5       	ldi	r24, 0x56	; 86
    437e:	90 e2       	ldi	r25, 0x20	; 32
    4380:	8f 93       	push	r24
    4382:	1f 92       	push	r1
    4384:	1f 92       	push	r1
    4386:	1f 92       	push	r1
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	8f 93       	push	r24
    438c:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <vDisplayWriteStringAtPos>
    4390:	8d b7       	in	r24, 0x3d	; 61
    4392:	9e b7       	in	r25, 0x3e	; 62
    4394:	08 96       	adiw	r24, 0x08	; 8
    4396:	cd bf       	out	0x3d, r28	; 61
    4398:	de bf       	out	0x3e, r29	; 62
		vDisplayWriteStringAtPos(2, 0, "Pi Value: ");
    439a:	85 e6       	ldi	r24, 0x65	; 101
    439c:	90 e2       	ldi	r25, 0x20	; 32
    439e:	89 2f       	mov	r24, r25
    43a0:	8f 93       	push	r24
    43a2:	85 e6       	ldi	r24, 0x65	; 101
    43a4:	90 e2       	ldi	r25, 0x20	; 32
    43a6:	8f 93       	push	r24
    43a8:	1f 92       	push	r1
    43aa:	1f 92       	push	r1
    43ac:	1f 92       	push	r1
    43ae:	82 e0       	ldi	r24, 0x02	; 2
    43b0:	8f 93       	push	r24
    43b2:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <vDisplayWriteStringAtPos>
    43b6:	0f 90       	pop	r0
    43b8:	0f 90       	pop	r0
    43ba:	0f 90       	pop	r0
    43bc:	0f 90       	pop	r0
    43be:	0f 90       	pop	r0
    43c0:	0f 90       	pop	r0
		if (dPi4 != 1.0)
    43c2:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    43c6:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    43ca:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <__data_start+0x2>
    43ce:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <__data_start+0x3>
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	40 e8       	ldi	r20, 0x80	; 128
    43d8:	5f e3       	ldi	r21, 0x3F	; 63
    43da:	bc 01       	movw	r22, r24
    43dc:	cd 01       	movw	r24, r26
    43de:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__cmpsf2>
    43e2:	88 23       	and	r24, r24
    43e4:	a9 f1       	breq	.+106    	; 0x4450 <vInterface+0x150>
		{
		dtostrf(dPi4*4, 1, 7, dPi4_str);							//Transform double variable to a string
    43e6:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    43ea:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    43ee:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <__data_start+0x2>
    43f2:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <__data_start+0x3>
    43f6:	20 e0       	ldi	r18, 0x00	; 0
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	40 e8       	ldi	r20, 0x80	; 128
    43fc:	50 e4       	ldi	r21, 0x40	; 64
    43fe:	bc 01       	movw	r22, r24
    4400:	cd 01       	movw	r24, r26
    4402:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__mulsf3>
    4406:	dc 01       	movw	r26, r24
    4408:	cb 01       	movw	r24, r22
    440a:	09 e0       	ldi	r16, 0x09	; 9
    440c:	1d e2       	ldi	r17, 0x2D	; 45
    440e:	27 e0       	ldi	r18, 0x07	; 7
    4410:	41 e0       	ldi	r20, 0x01	; 1
    4412:	bc 01       	movw	r22, r24
    4414:	cd 01       	movw	r24, r26
    4416:	0e 94 91 32 	call	0x6522	; 0x6522 <dtostrf>
		vDisplayWriteStringAtPos(2, 11, "%s", dPi4_str);
    441a:	89 e0       	ldi	r24, 0x09	; 9
    441c:	9d e2       	ldi	r25, 0x2D	; 45
    441e:	89 2f       	mov	r24, r25
    4420:	8f 93       	push	r24
    4422:	89 e0       	ldi	r24, 0x09	; 9
    4424:	9d e2       	ldi	r25, 0x2D	; 45
    4426:	8f 93       	push	r24
    4428:	80 e7       	ldi	r24, 0x70	; 112
    442a:	90 e2       	ldi	r25, 0x20	; 32
    442c:	89 2f       	mov	r24, r25
    442e:	8f 93       	push	r24
    4430:	80 e7       	ldi	r24, 0x70	; 112
    4432:	90 e2       	ldi	r25, 0x20	; 32
    4434:	8f 93       	push	r24
    4436:	1f 92       	push	r1
    4438:	8b e0       	ldi	r24, 0x0B	; 11
    443a:	8f 93       	push	r24
    443c:	1f 92       	push	r1
    443e:	82 e0       	ldi	r24, 0x02	; 2
    4440:	8f 93       	push	r24
    4442:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <vDisplayWriteStringAtPos>
    4446:	8d b7       	in	r24, 0x3d	; 61
    4448:	9e b7       	in	r25, 0x3e	; 62
    444a:	08 96       	adiw	r24, 0x08	; 8
    444c:	cd bf       	out	0x3d, r28	; 61
    444e:	de bf       	out	0x3e, r29	; 62
		}
	}
    4450:	61 cf       	rjmp	.-318    	; 0x4314 <vInterface+0x14>

00004452 <vButtonHandler>:
}

void vButtonHandler(void *pvParameters)
{
    4452:	cf 93       	push	r28
    4454:	df 93       	push	r29
    4456:	1f 92       	push	r1
    4458:	1f 92       	push	r1
    445a:	cd b7       	in	r28, 0x3d	; 61
    445c:	de b7       	in	r29, 0x3e	; 62
    445e:	89 83       	std	Y+1, r24	; 0x01
    4460:	9a 83       	std	Y+2, r25	; 0x02
	
	initButtons();
    4462:	0e 94 cb 01 	call	0x396	; 0x396 <initButtons>
	for (;;)
	{
		updateButtons();
    4466:	0e 94 e7 01 	call	0x3ce	; 0x3ce <updateButtons>
		if (getButtonPress(BUTTON1)==LONG_PRESSED)
    446a:	80 e0       	ldi	r24, 0x00	; 0
    446c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <getButtonPress>
    4470:	88 23       	and	r24, r24
    4472:	51 f4       	brne	.+20     	; 0x4488 <vButtonHandler+0x36>
		{
			xEventGroupSetBits(egMyEventGroup, START_CALC_EVENT);
    4474:	80 91 07 2d 	lds	r24, 0x2D07	; 0x802d07 <egMyEventGroup>
    4478:	90 91 08 2d 	lds	r25, 0x2D08	; 0x802d08 <egMyEventGroup+0x1>
    447c:	41 e0       	ldi	r20, 0x01	; 1
    447e:	50 e0       	ldi	r21, 0x00	; 0
    4480:	60 e0       	ldi	r22, 0x00	; 0
    4482:	70 e0       	ldi	r23, 0x00	; 0
    4484:	0e 94 00 06 	call	0xc00	; 0xc00 <xEventGroupSetBits>
		}
		if (getButtonPress(BUTTON2)==LONG_PRESSED)
    4488:	81 e0       	ldi	r24, 0x01	; 1
    448a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <getButtonPress>
    448e:	88 23       	and	r24, r24
    4490:	31 f4       	brne	.+12     	; 0x449e <vButtonHandler+0x4c>
		{
			vTaskSuspend(CalculationTask);
    4492:	80 91 35 2d 	lds	r24, 0x2D35	; 0x802d35 <CalculationTask>
    4496:	90 91 36 2d 	lds	r25, 0x2D36	; 0x802d36 <CalculationTask+0x1>
    449a:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <vTaskSuspend>
		}
		if (getButtonPress(BUTTON3)==LONG_PRESSED)
    449e:	82 e0       	ldi	r24, 0x02	; 2
    44a0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <getButtonPress>
    44a4:	88 23       	and	r24, r24
    44a6:	31 f4       	brne	.+12     	; 0x44b4 <vButtonHandler+0x62>
		{
			vTaskResume(CalculationTask);
    44a8:	80 91 35 2d 	lds	r24, 0x2D35	; 0x802d35 <CalculationTask>
    44ac:	90 91 36 2d 	lds	r25, 0x2D36	; 0x802d36 <CalculationTask+0x1>
    44b0:	0e 94 8a 14 	call	0x2914	; 0x2914 <vTaskResume>
		}
		if (getButtonPress(BUTTON4)==LONG_PRESSED)
    44b4:	83 e0       	ldi	r24, 0x03	; 3
    44b6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <getButtonPress>
    44ba:	88 23       	and	r24, r24
    44bc:	a1 f6       	brne	.-88     	; 0x4466 <vButtonHandler+0x14>
		{	
			xEventGroupClearBits(egMyEventGroup, START_CALC_EVENT);
    44be:	80 91 07 2d 	lds	r24, 0x2D07	; 0x802d07 <egMyEventGroup>
    44c2:	90 91 08 2d 	lds	r25, 0x2D08	; 0x802d08 <egMyEventGroup+0x1>
    44c6:	41 e0       	ldi	r20, 0x01	; 1
    44c8:	50 e0       	ldi	r21, 0x00	; 0
    44ca:	60 e0       	ldi	r22, 0x00	; 0
    44cc:	70 e0       	ldi	r23, 0x00	; 0
    44ce:	0e 94 b5 05 	call	0xb6a	; 0xb6a <xEventGroupClearBits>
			vTaskSuspend(CalculationTask);
    44d2:	80 91 35 2d 	lds	r24, 0x2D35	; 0x802d35 <CalculationTask>
    44d6:	90 91 36 2d 	lds	r25, 0x2D36	; 0x802d36 <CalculationTask+0x1>
    44da:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <vTaskSuspend>
			vDisplayClear();
    44de:	0e 94 40 27 	call	0x4e80	; 0x4e80 <vDisplayClear>
			i = 0.0;
    44e2:	10 92 d6 2c 	sts	0x2CD6, r1	; 0x802cd6 <i>
    44e6:	10 92 d7 2c 	sts	0x2CD7, r1	; 0x802cd7 <i+0x1>
    44ea:	10 92 d8 2c 	sts	0x2CD8, r1	; 0x802cd8 <i+0x2>
    44ee:	10 92 d9 2c 	sts	0x2CD9, r1	; 0x802cd9 <i+0x3>
			dPi4 = 1.0;	
    44f2:	80 e0       	ldi	r24, 0x00	; 0
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	a0 e8       	ldi	r26, 0x80	; 128
    44f8:	bf e3       	ldi	r27, 0x3F	; 63
    44fa:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    44fe:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    4502:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <__data_start+0x2>
    4506:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <__data_start+0x3>
		}
	}
    450a:	ad cf       	rjmp	.-166    	; 0x4466 <vButtonHandler+0x14>

0000450c <vCalculation>:
}

void vCalculation(void *pvParameters) 
{
    450c:	cf 92       	push	r12
    450e:	df 92       	push	r13
    4510:	ef 92       	push	r14
    4512:	ff 92       	push	r15
    4514:	0f 93       	push	r16
    4516:	cf 93       	push	r28
    4518:	df 93       	push	r29
    451a:	1f 92       	push	r1
    451c:	1f 92       	push	r1
    451e:	cd b7       	in	r28, 0x3d	; 61
    4520:	de b7       	in	r29, 0x3e	; 62
    4522:	89 83       	std	Y+1, r24	; 0x01
    4524:	9a 83       	std	Y+2, r25	; 0x02
	for (;;)
	{	
		xEventGroupWaitBits(egMyEventGroup, START_CALC_EVENT, pdFALSE, pdFALSE, portMAX_DELAY);
    4526:	80 91 07 2d 	lds	r24, 0x2D07	; 0x802d07 <egMyEventGroup>
    452a:	90 91 08 2d 	lds	r25, 0x2D08	; 0x802d08 <egMyEventGroup+0x1>
    452e:	cc 24       	eor	r12, r12
    4530:	ca 94       	dec	r12
    4532:	dc 2c       	mov	r13, r12
    4534:	76 01       	movw	r14, r12
    4536:	00 e0       	ldi	r16, 0x00	; 0
    4538:	20 e0       	ldi	r18, 0x00	; 0
    453a:	41 e0       	ldi	r20, 0x01	; 1
    453c:	50 e0       	ldi	r21, 0x00	; 0
    453e:	60 e0       	ldi	r22, 0x00	; 0
    4540:	70 e0       	ldi	r23, 0x00	; 0
    4542:	0e 94 7d 04 	call	0x8fa	; 0x8fa <xEventGroupWaitBits>
		for (i=0; i<=1e7; i++) 
    4546:	10 92 d6 2c 	sts	0x2CD6, r1	; 0x802cd6 <i>
    454a:	10 92 d7 2c 	sts	0x2CD7, r1	; 0x802cd7 <i+0x1>
    454e:	10 92 d8 2c 	sts	0x2CD8, r1	; 0x802cd8 <i+0x2>
    4552:	10 92 d9 2c 	sts	0x2CD9, r1	; 0x802cd9 <i+0x3>
    4556:	a0 c0       	rjmp	.+320    	; 0x4698 <vCalculation+0x18c>
		{
			dPi4 = dPi4 - 1.0/(3+i*4) + 1.0/(5+i*4);
    4558:	c0 90 00 20 	lds	r12, 0x2000	; 0x802000 <__data_start>
    455c:	d0 90 01 20 	lds	r13, 0x2001	; 0x802001 <__data_start+0x1>
    4560:	e0 90 02 20 	lds	r14, 0x2002	; 0x802002 <__data_start+0x2>
    4564:	f0 90 03 20 	lds	r15, 0x2003	; 0x802003 <__data_start+0x3>
    4568:	80 91 d6 2c 	lds	r24, 0x2CD6	; 0x802cd6 <i>
    456c:	90 91 d7 2c 	lds	r25, 0x2CD7	; 0x802cd7 <i+0x1>
    4570:	a0 91 d8 2c 	lds	r26, 0x2CD8	; 0x802cd8 <i+0x2>
    4574:	b0 91 d9 2c 	lds	r27, 0x2CD9	; 0x802cd9 <i+0x3>
    4578:	20 e0       	ldi	r18, 0x00	; 0
    457a:	30 e0       	ldi	r19, 0x00	; 0
    457c:	40 e8       	ldi	r20, 0x80	; 128
    457e:	50 e4       	ldi	r21, 0x40	; 64
    4580:	bc 01       	movw	r22, r24
    4582:	cd 01       	movw	r24, r26
    4584:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__mulsf3>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	30 e0       	ldi	r19, 0x00	; 0
    4590:	40 e4       	ldi	r20, 0x40	; 64
    4592:	50 e4       	ldi	r21, 0x40	; 64
    4594:	bc 01       	movw	r22, r24
    4596:	cd 01       	movw	r24, r26
    4598:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__addsf3>
    459c:	dc 01       	movw	r26, r24
    459e:	cb 01       	movw	r24, r22
    45a0:	9c 01       	movw	r18, r24
    45a2:	ad 01       	movw	r20, r26
    45a4:	60 e0       	ldi	r22, 0x00	; 0
    45a6:	70 e0       	ldi	r23, 0x00	; 0
    45a8:	80 e8       	ldi	r24, 0x80	; 128
    45aa:	9f e3       	ldi	r25, 0x3F	; 63
    45ac:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <__divsf3>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	9c 01       	movw	r18, r24
    45b6:	ad 01       	movw	r20, r26
    45b8:	c7 01       	movw	r24, r14
    45ba:	b6 01       	movw	r22, r12
    45bc:	0e 94 ab 2c 	call	0x5956	; 0x5956 <__subsf3>
    45c0:	dc 01       	movw	r26, r24
    45c2:	cb 01       	movw	r24, r22
    45c4:	6c 01       	movw	r12, r24
    45c6:	7d 01       	movw	r14, r26
    45c8:	80 91 d6 2c 	lds	r24, 0x2CD6	; 0x802cd6 <i>
    45cc:	90 91 d7 2c 	lds	r25, 0x2CD7	; 0x802cd7 <i+0x1>
    45d0:	a0 91 d8 2c 	lds	r26, 0x2CD8	; 0x802cd8 <i+0x2>
    45d4:	b0 91 d9 2c 	lds	r27, 0x2CD9	; 0x802cd9 <i+0x3>
    45d8:	20 e0       	ldi	r18, 0x00	; 0
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	40 e8       	ldi	r20, 0x80	; 128
    45de:	50 e4       	ldi	r21, 0x40	; 64
    45e0:	bc 01       	movw	r22, r24
    45e2:	cd 01       	movw	r24, r26
    45e4:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__mulsf3>
    45e8:	dc 01       	movw	r26, r24
    45ea:	cb 01       	movw	r24, r22
    45ec:	20 e0       	ldi	r18, 0x00	; 0
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	40 ea       	ldi	r20, 0xA0	; 160
    45f2:	50 e4       	ldi	r21, 0x40	; 64
    45f4:	bc 01       	movw	r22, r24
    45f6:	cd 01       	movw	r24, r26
    45f8:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__addsf3>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	9c 01       	movw	r18, r24
    4602:	ad 01       	movw	r20, r26
    4604:	60 e0       	ldi	r22, 0x00	; 0
    4606:	70 e0       	ldi	r23, 0x00	; 0
    4608:	80 e8       	ldi	r24, 0x80	; 128
    460a:	9f e3       	ldi	r25, 0x3F	; 63
    460c:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <__divsf3>
    4610:	dc 01       	movw	r26, r24
    4612:	cb 01       	movw	r24, r22
    4614:	9c 01       	movw	r18, r24
    4616:	ad 01       	movw	r20, r26
    4618:	c7 01       	movw	r24, r14
    461a:	b6 01       	movw	r22, r12
    461c:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__addsf3>
    4620:	dc 01       	movw	r26, r24
    4622:	cb 01       	movw	r24, r22
    4624:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    4628:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    462c:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <__data_start+0x2>
    4630:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <__data_start+0x3>
			if (i==1e7)
    4634:	80 91 d6 2c 	lds	r24, 0x2CD6	; 0x802cd6 <i>
    4638:	90 91 d7 2c 	lds	r25, 0x2CD7	; 0x802cd7 <i+0x1>
    463c:	a0 91 d8 2c 	lds	r26, 0x2CD8	; 0x802cd8 <i+0x2>
    4640:	b0 91 d9 2c 	lds	r27, 0x2CD9	; 0x802cd9 <i+0x3>
    4644:	20 e8       	ldi	r18, 0x80	; 128
    4646:	36 e9       	ldi	r19, 0x96	; 150
    4648:	48 e1       	ldi	r20, 0x18	; 24
    464a:	5b e4       	ldi	r21, 0x4B	; 75
    464c:	bc 01       	movw	r22, r24
    464e:	cd 01       	movw	r24, r26
    4650:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__cmpsf2>
    4654:	88 23       	and	r24, r24
    4656:	31 f4       	brne	.+12     	; 0x4664 <vCalculation+0x158>
			{
				vTaskSuspend(CalculationTask);
    4658:	80 91 35 2d 	lds	r24, 0x2D35	; 0x802d35 <CalculationTask>
    465c:	90 91 36 2d 	lds	r25, 0x2D36	; 0x802d36 <CalculationTask+0x1>
    4660:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <vTaskSuspend>
void vCalculation(void *pvParameters) 
{
	for (;;)
	{	
		xEventGroupWaitBits(egMyEventGroup, START_CALC_EVENT, pdFALSE, pdFALSE, portMAX_DELAY);
		for (i=0; i<=1e7; i++) 
    4664:	80 91 d6 2c 	lds	r24, 0x2CD6	; 0x802cd6 <i>
    4668:	90 91 d7 2c 	lds	r25, 0x2CD7	; 0x802cd7 <i+0x1>
    466c:	a0 91 d8 2c 	lds	r26, 0x2CD8	; 0x802cd8 <i+0x2>
    4670:	b0 91 d9 2c 	lds	r27, 0x2CD9	; 0x802cd9 <i+0x3>
    4674:	20 e0       	ldi	r18, 0x00	; 0
    4676:	30 e0       	ldi	r19, 0x00	; 0
    4678:	40 e8       	ldi	r20, 0x80	; 128
    467a:	5f e3       	ldi	r21, 0x3F	; 63
    467c:	bc 01       	movw	r22, r24
    467e:	cd 01       	movw	r24, r26
    4680:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__addsf3>
    4684:	dc 01       	movw	r26, r24
    4686:	cb 01       	movw	r24, r22
    4688:	80 93 d6 2c 	sts	0x2CD6, r24	; 0x802cd6 <i>
    468c:	90 93 d7 2c 	sts	0x2CD7, r25	; 0x802cd7 <i+0x1>
    4690:	a0 93 d8 2c 	sts	0x2CD8, r26	; 0x802cd8 <i+0x2>
    4694:	b0 93 d9 2c 	sts	0x2CD9, r27	; 0x802cd9 <i+0x3>
    4698:	80 91 d6 2c 	lds	r24, 0x2CD6	; 0x802cd6 <i>
    469c:	90 91 d7 2c 	lds	r25, 0x2CD7	; 0x802cd7 <i+0x1>
    46a0:	a0 91 d8 2c 	lds	r26, 0x2CD8	; 0x802cd8 <i+0x2>
    46a4:	b0 91 d9 2c 	lds	r27, 0x2CD9	; 0x802cd9 <i+0x3>
    46a8:	20 e8       	ldi	r18, 0x80	; 128
    46aa:	36 e9       	ldi	r19, 0x96	; 150
    46ac:	48 e1       	ldi	r20, 0x18	; 24
    46ae:	5b e4       	ldi	r21, 0x4B	; 75
    46b0:	bc 01       	movw	r22, r24
    46b2:	cd 01       	movw	r24, r26
    46b4:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__cmpsf2>
    46b8:	18 16       	cp	r1, r24
    46ba:	0c f0       	brlt	.+2      	; 0x46be <vCalculation+0x1b2>
    46bc:	4d cf       	rjmp	.-358    	; 0x4558 <vCalculation+0x4c>
			if (i==1e7)
			{
				vTaskSuspend(CalculationTask);
			}
		}
	}
    46be:	33 cf       	rjmp	.-410    	; 0x4526 <vCalculation+0x1a>

000046c0 <__vector_108>:
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
 }
    46c0:	1f 92       	push	r1
    46c2:	0f 92       	push	r0
    46c4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    46c8:	0f 92       	push	r0
    46ca:	11 24       	eor	r1, r1
    46cc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    46d0:	0f 92       	push	r0
    46d2:	2f 93       	push	r18
    46d4:	3f 93       	push	r19
    46d6:	4f 93       	push	r20
    46d8:	5f 93       	push	r21
    46da:	6f 93       	push	r22
    46dc:	7f 93       	push	r23
    46de:	8f 93       	push	r24
    46e0:	9f 93       	push	r25
    46e2:	af 93       	push	r26
    46e4:	bf 93       	push	r27
    46e6:	ef 93       	push	r30
    46e8:	ff 93       	push	r31
    46ea:	cf 93       	push	r28
    46ec:	df 93       	push	r29
    46ee:	1f 92       	push	r1
    46f0:	cd b7       	in	r28, 0x3d	; 61
    46f2:	de b7       	in	r29, 0x3e	; 62
    46f4:	19 82       	std	Y+1, r1	; 0x01
    46f6:	80 91 39 2d 	lds	r24, 0x2D39	; 0x802d39 <egDisplayTiming>
    46fa:	90 91 3a 2d 	lds	r25, 0x2D3A	; 0x802d3a <egDisplayTiming+0x1>
    46fe:	9e 01       	movw	r18, r28
    4700:	2f 5f       	subi	r18, 0xFF	; 255
    4702:	3f 4f       	sbci	r19, 0xFF	; 255
    4704:	41 e0       	ldi	r20, 0x01	; 1
    4706:	50 e0       	ldi	r21, 0x00	; 0
    4708:	60 e0       	ldi	r22, 0x00	; 0
    470a:	70 e0       	ldi	r23, 0x00	; 0
    470c:	0e 94 6d 07 	call	0xeda	; 0xeda <xEventGroupSetBitsFromISR>
    4710:	60 e0       	ldi	r22, 0x00	; 0
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	9b e0       	ldi	r25, 0x0B	; 11
    4716:	0e 94 bc 03 	call	0x778	; 0x778 <TC0_ConfigClockSource>
    471a:	80 e0       	ldi	r24, 0x00	; 0
    471c:	9b e0       	ldi	r25, 0x0B	; 11
    471e:	fc 01       	movw	r30, r24
    4720:	16 82       	std	Z+6, r1	; 0x06
    4722:	00 00       	nop
    4724:	0f 90       	pop	r0
    4726:	df 91       	pop	r29
    4728:	cf 91       	pop	r28
    472a:	ff 91       	pop	r31
    472c:	ef 91       	pop	r30
    472e:	bf 91       	pop	r27
    4730:	af 91       	pop	r26
    4732:	9f 91       	pop	r25
    4734:	8f 91       	pop	r24
    4736:	7f 91       	pop	r23
    4738:	6f 91       	pop	r22
    473a:	5f 91       	pop	r21
    473c:	4f 91       	pop	r20
    473e:	3f 91       	pop	r19
    4740:	2f 91       	pop	r18
    4742:	0f 90       	pop	r0
    4744:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4748:	0f 90       	pop	r0
    474a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    474e:	0f 90       	pop	r0
    4750:	1f 90       	pop	r1
    4752:	18 95       	reti

00004754 <delayUS>:
    4754:	cf 92       	push	r12
    4756:	df 92       	push	r13
    4758:	ef 92       	push	r14
    475a:	ff 92       	push	r15
    475c:	0f 93       	push	r16
    475e:	cf 93       	push	r28
    4760:	df 93       	push	r29
    4762:	00 d0       	rcall	.+0      	; 0x4764 <delayUS+0x10>
    4764:	1f 92       	push	r1
    4766:	cd b7       	in	r28, 0x3d	; 61
    4768:	de b7       	in	r29, 0x3e	; 62
    476a:	69 83       	std	Y+1, r22	; 0x01
    476c:	7a 83       	std	Y+2, r23	; 0x02
    476e:	8b 83       	std	Y+3, r24	; 0x03
    4770:	9c 83       	std	Y+4, r25	; 0x04
    4772:	89 81       	ldd	r24, Y+1	; 0x01
    4774:	9a 81       	ldd	r25, Y+2	; 0x02
    4776:	ab 81       	ldd	r26, Y+3	; 0x03
    4778:	bc 81       	ldd	r27, Y+4	; 0x04
    477a:	02 97       	sbiw	r24, 0x02	; 2
    477c:	a1 05       	cpc	r26, r1
    477e:	b1 05       	cpc	r27, r1
    4780:	40 f4       	brcc	.+16     	; 0x4792 <delayUS+0x3e>
    4782:	82 e0       	ldi	r24, 0x02	; 2
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	a0 e0       	ldi	r26, 0x00	; 0
    4788:	b0 e0       	ldi	r27, 0x00	; 0
    478a:	89 83       	std	Y+1, r24	; 0x01
    478c:	9a 83       	std	Y+2, r25	; 0x02
    478e:	ab 83       	std	Y+3, r26	; 0x03
    4790:	bc 83       	std	Y+4, r27	; 0x04
    4792:	80 e0       	ldi	r24, 0x00	; 0
    4794:	9b e0       	ldi	r25, 0x0B	; 11
    4796:	21 e0       	ldi	r18, 0x01	; 1
    4798:	fc 01       	movw	r30, r24
    479a:	26 83       	std	Z+6, r18	; 0x06
    479c:	80 e0       	ldi	r24, 0x00	; 0
    479e:	9b e0       	ldi	r25, 0x0B	; 11
    47a0:	fc 01       	movw	r30, r24
    47a2:	10 a2       	std	Z+32, r1	; 0x20
    47a4:	11 a2       	std	Z+33, r1	; 0x21
    47a6:	60 e0       	ldi	r22, 0x00	; 0
    47a8:	80 e0       	ldi	r24, 0x00	; 0
    47aa:	9b e0       	ldi	r25, 0x0B	; 11
    47ac:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <TC0_ConfigWGM>
    47b0:	89 81       	ldd	r24, Y+1	; 0x01
    47b2:	9a 81       	ldd	r25, Y+2	; 0x02
    47b4:	ab 81       	ldd	r26, Y+3	; 0x03
    47b6:	bc 81       	ldd	r27, Y+4	; 0x04
    47b8:	8e 3f       	cpi	r24, 0xFE	; 254
    47ba:	9f 4f       	sbci	r25, 0xFF	; 255
    47bc:	a1 05       	cpc	r26, r1
    47be:	b1 05       	cpc	r27, r1
    47c0:	98 f4       	brcc	.+38     	; 0x47e8 <delayUS+0x94>
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	3b e0       	ldi	r19, 0x0B	; 11
    47c6:	89 81       	ldd	r24, Y+1	; 0x01
    47c8:	9a 81       	ldd	r25, Y+2	; 0x02
    47ca:	ab 81       	ldd	r26, Y+3	; 0x03
    47cc:	bc 81       	ldd	r27, Y+4	; 0x04
    47ce:	b6 95       	lsr	r27
    47d0:	a7 95       	ror	r26
    47d2:	97 95       	ror	r25
    47d4:	87 95       	ror	r24
    47d6:	f9 01       	movw	r30, r18
    47d8:	86 a3       	std	Z+38, r24	; 0x26
    47da:	97 a3       	std	Z+39, r25	; 0x27
    47dc:	65 e0       	ldi	r22, 0x05	; 5
    47de:	80 e0       	ldi	r24, 0x00	; 0
    47e0:	9b e0       	ldi	r25, 0x0B	; 11
    47e2:	0e 94 bc 03 	call	0x778	; 0x778 <TC0_ConfigClockSource>
    47e6:	1f c0       	rjmp	.+62     	; 0x4826 <delayUS+0xd2>
    47e8:	89 81       	ldd	r24, Y+1	; 0x01
    47ea:	9a 81       	ldd	r25, Y+2	; 0x02
    47ec:	ab 81       	ldd	r26, Y+3	; 0x03
    47ee:	bc 81       	ldd	r27, Y+4	; 0x04
    47f0:	80 34       	cpi	r24, 0x40	; 64
    47f2:	92 44       	sbci	r25, 0x42	; 66
    47f4:	af 40       	sbci	r26, 0x0F	; 15
    47f6:	b1 05       	cpc	r27, r1
    47f8:	b0 f4       	brcc	.+44     	; 0x4826 <delayUS+0xd2>
    47fa:	20 e0       	ldi	r18, 0x00	; 0
    47fc:	3b e0       	ldi	r19, 0x0B	; 11
    47fe:	89 81       	ldd	r24, Y+1	; 0x01
    4800:	9a 81       	ldd	r25, Y+2	; 0x02
    4802:	ab 81       	ldd	r26, Y+3	; 0x03
    4804:	bc 81       	ldd	r27, Y+4	; 0x04
    4806:	68 94       	set
    4808:	14 f8       	bld	r1, 4
    480a:	b6 95       	lsr	r27
    480c:	a7 95       	ror	r26
    480e:	97 95       	ror	r25
    4810:	87 95       	ror	r24
    4812:	16 94       	lsr	r1
    4814:	d1 f7       	brne	.-12     	; 0x480a <delayUS+0xb6>
    4816:	f9 01       	movw	r30, r18
    4818:	86 a3       	std	Z+38, r24	; 0x26
    481a:	97 a3       	std	Z+39, r25	; 0x27
    481c:	67 e0       	ldi	r22, 0x07	; 7
    481e:	80 e0       	ldi	r24, 0x00	; 0
    4820:	9b e0       	ldi	r25, 0x0B	; 11
    4822:	0e 94 bc 03 	call	0x778	; 0x778 <TC0_ConfigClockSource>
    4826:	80 91 39 2d 	lds	r24, 0x2D39	; 0x802d39 <egDisplayTiming>
    482a:	90 91 3a 2d 	lds	r25, 0x2D3A	; 0x802d3a <egDisplayTiming+0x1>
    482e:	0f 2e       	mov	r0, r31
    4830:	f4 ef       	ldi	r31, 0xF4	; 244
    4832:	cf 2e       	mov	r12, r31
    4834:	dd 24       	eor	r13, r13
    4836:	d3 94       	inc	r13
    4838:	e1 2c       	mov	r14, r1
    483a:	f1 2c       	mov	r15, r1
    483c:	f0 2d       	mov	r31, r0
    483e:	00 e0       	ldi	r16, 0x00	; 0
    4840:	21 e0       	ldi	r18, 0x01	; 1
    4842:	41 e0       	ldi	r20, 0x01	; 1
    4844:	50 e0       	ldi	r21, 0x00	; 0
    4846:	60 e0       	ldi	r22, 0x00	; 0
    4848:	70 e0       	ldi	r23, 0x00	; 0
    484a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <xEventGroupWaitBits>
    484e:	00 00       	nop
    4850:	24 96       	adiw	r28, 0x04	; 4
    4852:	cd bf       	out	0x3d, r28	; 61
    4854:	de bf       	out	0x3e, r29	; 62
    4856:	df 91       	pop	r29
    4858:	cf 91       	pop	r28
    485a:	0f 91       	pop	r16
    485c:	ff 90       	pop	r15
    485e:	ef 90       	pop	r14
    4860:	df 90       	pop	r13
    4862:	cf 90       	pop	r12
    4864:	08 95       	ret

00004866 <setPort>:
    4866:	cf 93       	push	r28
    4868:	df 93       	push	r29
    486a:	1f 92       	push	r1
    486c:	cd b7       	in	r28, 0x3d	; 61
    486e:	de b7       	in	r29, 0x3e	; 62
    4870:	89 83       	std	Y+1, r24	; 0x01
    4872:	89 81       	ldd	r24, Y+1	; 0x01
    4874:	8f 70       	andi	r24, 0x0F	; 15
    4876:	89 83       	std	Y+1, r24	; 0x01
    4878:	89 81       	ldd	r24, Y+1	; 0x01
    487a:	82 95       	swap	r24
    487c:	80 7f       	andi	r24, 0xF0	; 240
    487e:	89 83       	std	Y+1, r24	; 0x01
    4880:	80 e0       	ldi	r24, 0x00	; 0
    4882:	96 e0       	ldi	r25, 0x06	; 6
    4884:	20 e0       	ldi	r18, 0x00	; 0
    4886:	36 e0       	ldi	r19, 0x06	; 6
    4888:	f9 01       	movw	r30, r18
    488a:	34 81       	ldd	r19, Z+4	; 0x04
    488c:	29 81       	ldd	r18, Y+1	; 0x01
    488e:	2f 60       	ori	r18, 0x0F	; 15
    4890:	23 23       	and	r18, r19
    4892:	fc 01       	movw	r30, r24
    4894:	24 83       	std	Z+4, r18	; 0x04
    4896:	80 e0       	ldi	r24, 0x00	; 0
    4898:	96 e0       	ldi	r25, 0x06	; 6
    489a:	20 e0       	ldi	r18, 0x00	; 0
    489c:	36 e0       	ldi	r19, 0x06	; 6
    489e:	f9 01       	movw	r30, r18
    48a0:	34 81       	ldd	r19, Z+4	; 0x04
    48a2:	29 81       	ldd	r18, Y+1	; 0x01
    48a4:	23 2b       	or	r18, r19
    48a6:	fc 01       	movw	r30, r24
    48a8:	24 83       	std	Z+4, r18	; 0x04
    48aa:	00 00       	nop
    48ac:	0f 90       	pop	r0
    48ae:	df 91       	pop	r29
    48b0:	cf 91       	pop	r28
    48b2:	08 95       	ret

000048b4 <setRS>:
    48b4:	cf 93       	push	r28
    48b6:	df 93       	push	r29
    48b8:	1f 92       	push	r1
    48ba:	cd b7       	in	r28, 0x3d	; 61
    48bc:	de b7       	in	r29, 0x3e	; 62
    48be:	89 83       	std	Y+1, r24	; 0x01
    48c0:	89 81       	ldd	r24, Y+1	; 0x01
    48c2:	88 23       	and	r24, r24
    48c4:	31 f0       	breq	.+12     	; 0x48d2 <setRS+0x1e>
    48c6:	80 e6       	ldi	r24, 0x60	; 96
    48c8:	96 e0       	ldi	r25, 0x06	; 6
    48ca:	21 e0       	ldi	r18, 0x01	; 1
    48cc:	fc 01       	movw	r30, r24
    48ce:	25 83       	std	Z+5, r18	; 0x05
    48d0:	05 c0       	rjmp	.+10     	; 0x48dc <setRS+0x28>
    48d2:	80 e6       	ldi	r24, 0x60	; 96
    48d4:	96 e0       	ldi	r25, 0x06	; 6
    48d6:	21 e0       	ldi	r18, 0x01	; 1
    48d8:	fc 01       	movw	r30, r24
    48da:	26 83       	std	Z+6, r18	; 0x06
    48dc:	00 00       	nop
    48de:	0f 90       	pop	r0
    48e0:	df 91       	pop	r29
    48e2:	cf 91       	pop	r28
    48e4:	08 95       	ret

000048e6 <setRW>:
    48e6:	cf 93       	push	r28
    48e8:	df 93       	push	r29
    48ea:	1f 92       	push	r1
    48ec:	cd b7       	in	r28, 0x3d	; 61
    48ee:	de b7       	in	r29, 0x3e	; 62
    48f0:	89 83       	std	Y+1, r24	; 0x01
    48f2:	89 81       	ldd	r24, Y+1	; 0x01
    48f4:	88 23       	and	r24, r24
    48f6:	31 f0       	breq	.+12     	; 0x4904 <setRW+0x1e>
    48f8:	80 e6       	ldi	r24, 0x60	; 96
    48fa:	96 e0       	ldi	r25, 0x06	; 6
    48fc:	22 e0       	ldi	r18, 0x02	; 2
    48fe:	fc 01       	movw	r30, r24
    4900:	25 83       	std	Z+5, r18	; 0x05
    4902:	05 c0       	rjmp	.+10     	; 0x490e <setRW+0x28>
    4904:	80 e6       	ldi	r24, 0x60	; 96
    4906:	96 e0       	ldi	r25, 0x06	; 6
    4908:	22 e0       	ldi	r18, 0x02	; 2
    490a:	fc 01       	movw	r30, r24
    490c:	26 83       	std	Z+6, r18	; 0x06
    490e:	00 00       	nop
    4910:	0f 90       	pop	r0
    4912:	df 91       	pop	r29
    4914:	cf 91       	pop	r28
    4916:	08 95       	ret

00004918 <setE>:
    4918:	cf 93       	push	r28
    491a:	df 93       	push	r29
    491c:	1f 92       	push	r1
    491e:	cd b7       	in	r28, 0x3d	; 61
    4920:	de b7       	in	r29, 0x3e	; 62
    4922:	89 83       	std	Y+1, r24	; 0x01
    4924:	89 81       	ldd	r24, Y+1	; 0x01
    4926:	88 23       	and	r24, r24
    4928:	31 f0       	breq	.+12     	; 0x4936 <setE+0x1e>
    492a:	80 e6       	ldi	r24, 0x60	; 96
    492c:	96 e0       	ldi	r25, 0x06	; 6
    492e:	24 e0       	ldi	r18, 0x04	; 4
    4930:	fc 01       	movw	r30, r24
    4932:	25 83       	std	Z+5, r18	; 0x05
    4934:	05 c0       	rjmp	.+10     	; 0x4940 <setE+0x28>
    4936:	80 e6       	ldi	r24, 0x60	; 96
    4938:	96 e0       	ldi	r25, 0x06	; 6
    493a:	24 e0       	ldi	r18, 0x04	; 4
    493c:	fc 01       	movw	r30, r24
    493e:	26 83       	std	Z+6, r18	; 0x06
    4940:	00 00       	nop
    4942:	0f 90       	pop	r0
    4944:	df 91       	pop	r29
    4946:	cf 91       	pop	r28
    4948:	08 95       	ret

0000494a <Nybble>:
    494a:	cf 93       	push	r28
    494c:	df 93       	push	r29
    494e:	cd b7       	in	r28, 0x3d	; 61
    4950:	de b7       	in	r29, 0x3e	; 62
    4952:	81 e0       	ldi	r24, 0x01	; 1
    4954:	0e 94 8c 24 	call	0x4918	; 0x4918 <setE>
    4958:	61 e0       	ldi	r22, 0x01	; 1
    495a:	70 e0       	ldi	r23, 0x00	; 0
    495c:	80 e0       	ldi	r24, 0x00	; 0
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	0e 94 aa 23 	call	0x4754	; 0x4754 <delayUS>
    4964:	80 e0       	ldi	r24, 0x00	; 0
    4966:	0e 94 8c 24 	call	0x4918	; 0x4918 <setE>
    496a:	00 00       	nop
    496c:	df 91       	pop	r29
    496e:	cf 91       	pop	r28
    4970:	08 95       	ret

00004972 <command>:
    4972:	cf 93       	push	r28
    4974:	df 93       	push	r29
    4976:	1f 92       	push	r1
    4978:	cd b7       	in	r28, 0x3d	; 61
    497a:	de b7       	in	r29, 0x3e	; 62
    497c:	89 83       	std	Y+1, r24	; 0x01
    497e:	89 81       	ldd	r24, Y+1	; 0x01
    4980:	82 95       	swap	r24
    4982:	8f 70       	andi	r24, 0x0F	; 15
    4984:	0e 94 33 24 	call	0x4866	; 0x4866 <setPort>
    4988:	80 e0       	ldi	r24, 0x00	; 0
    498a:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <setRS>
    498e:	80 e0       	ldi	r24, 0x00	; 0
    4990:	0e 94 73 24 	call	0x48e6	; 0x48e6 <setRW>
    4994:	0e 94 a5 24 	call	0x494a	; 0x494a <Nybble>
    4998:	89 81       	ldd	r24, Y+1	; 0x01
    499a:	8f 70       	andi	r24, 0x0F	; 15
    499c:	0e 94 33 24 	call	0x4866	; 0x4866 <setPort>
    49a0:	0e 94 a5 24 	call	0x494a	; 0x494a <Nybble>
    49a4:	00 00       	nop
    49a6:	0f 90       	pop	r0
    49a8:	df 91       	pop	r29
    49aa:	cf 91       	pop	r28
    49ac:	08 95       	ret

000049ae <write>:
    49ae:	cf 93       	push	r28
    49b0:	df 93       	push	r29
    49b2:	1f 92       	push	r1
    49b4:	cd b7       	in	r28, 0x3d	; 61
    49b6:	de b7       	in	r29, 0x3e	; 62
    49b8:	89 83       	std	Y+1, r24	; 0x01
    49ba:	89 81       	ldd	r24, Y+1	; 0x01
    49bc:	82 95       	swap	r24
    49be:	8f 70       	andi	r24, 0x0F	; 15
    49c0:	0e 94 33 24 	call	0x4866	; 0x4866 <setPort>
    49c4:	81 e0       	ldi	r24, 0x01	; 1
    49c6:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <setRS>
    49ca:	80 e0       	ldi	r24, 0x00	; 0
    49cc:	0e 94 73 24 	call	0x48e6	; 0x48e6 <setRW>
    49d0:	0e 94 a5 24 	call	0x494a	; 0x494a <Nybble>
    49d4:	89 81       	ldd	r24, Y+1	; 0x01
    49d6:	8f 70       	andi	r24, 0x0F	; 15
    49d8:	0e 94 33 24 	call	0x4866	; 0x4866 <setPort>
    49dc:	0e 94 a5 24 	call	0x494a	; 0x494a <Nybble>
    49e0:	00 00       	nop
    49e2:	0f 90       	pop	r0
    49e4:	df 91       	pop	r29
    49e6:	cf 91       	pop	r28
    49e8:	08 95       	ret

000049ea <vInitDisplay>:
 
 void vInitDisplay() {
    49ea:	ef 92       	push	r14
    49ec:	ff 92       	push	r15
    49ee:	0f 93       	push	r16
    49f0:	cf 93       	push	r28
    49f2:	df 93       	push	r29
    49f4:	cd b7       	in	r28, 0x3d	; 61
    49f6:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm;
    49f8:	80 e0       	ldi	r24, 0x00	; 0
    49fa:	96 e0       	ldi	r25, 0x06	; 6
    49fc:	20 e1       	ldi	r18, 0x10	; 16
    49fe:	fc 01       	movw	r30, r24
    4a00:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN5_bm;
    4a02:	80 e0       	ldi	r24, 0x00	; 0
    4a04:	96 e0       	ldi	r25, 0x06	; 6
    4a06:	20 e2       	ldi	r18, 0x20	; 32
    4a08:	fc 01       	movw	r30, r24
    4a0a:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN6_bm;
    4a0c:	80 e0       	ldi	r24, 0x00	; 0
    4a0e:	96 e0       	ldi	r25, 0x06	; 6
    4a10:	20 e4       	ldi	r18, 0x40	; 64
    4a12:	fc 01       	movw	r30, r24
    4a14:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm;
    4a16:	80 e0       	ldi	r24, 0x00	; 0
    4a18:	96 e0       	ldi	r25, 0x06	; 6
    4a1a:	20 e8       	ldi	r18, 0x80	; 128
    4a1c:	fc 01       	movw	r30, r24
    4a1e:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN0_bm;
    4a20:	80 e6       	ldi	r24, 0x60	; 96
    4a22:	96 e0       	ldi	r25, 0x06	; 6
    4a24:	21 e0       	ldi	r18, 0x01	; 1
    4a26:	fc 01       	movw	r30, r24
    4a28:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN1_bm;
    4a2a:	80 e6       	ldi	r24, 0x60	; 96
    4a2c:	96 e0       	ldi	r25, 0x06	; 6
    4a2e:	22 e0       	ldi	r18, 0x02	; 2
    4a30:	fc 01       	movw	r30, r24
    4a32:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN2_bm;
    4a34:	80 e6       	ldi	r24, 0x60	; 96
    4a36:	96 e0       	ldi	r25, 0x06	; 6
    4a38:	24 e0       	ldi	r18, 0x04	; 4
    4a3a:	fc 01       	movw	r30, r24
    4a3c:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUT &= 0x0F;
    4a3e:	80 e0       	ldi	r24, 0x00	; 0
    4a40:	96 e0       	ldi	r25, 0x06	; 6
    4a42:	20 e0       	ldi	r18, 0x00	; 0
    4a44:	36 e0       	ldi	r19, 0x06	; 6
    4a46:	f9 01       	movw	r30, r18
    4a48:	24 81       	ldd	r18, Z+4	; 0x04
    4a4a:	2f 70       	andi	r18, 0x0F	; 15
    4a4c:	fc 01       	movw	r30, r24
    4a4e:	24 83       	std	Z+4, r18	; 0x04
	PORTD.OUT &= 0xF8;
    4a50:	80 e6       	ldi	r24, 0x60	; 96
    4a52:	96 e0       	ldi	r25, 0x06	; 6
    4a54:	20 e6       	ldi	r18, 0x60	; 96
    4a56:	36 e0       	ldi	r19, 0x06	; 6
    4a58:	f9 01       	movw	r30, r18
    4a5a:	24 81       	ldd	r18, Z+4	; 0x04
    4a5c:	28 7f       	andi	r18, 0xF8	; 248
    4a5e:	fc 01       	movw	r30, r24
    4a60:	24 83       	std	Z+4, r18	; 0x04

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    4a62:	40 e0       	ldi	r20, 0x00	; 0
    4a64:	66 e1       	ldi	r22, 0x16	; 22
    4a66:	88 e0       	ldi	r24, 0x08	; 8
    4a68:	0e 94 66 0d 	call	0x1acc	; 0x1acc <xQueueGenericCreate>
    4a6c:	80 93 37 2d 	sts	0x2D37, r24	; 0x802d37 <displayLineQueue>
    4a70:	90 93 38 2d 	sts	0x2D38, r25	; 0x802d38 <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    4a74:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <xEventGroupCreate>
    4a78:	80 93 39 2d 	sts	0x2D39, r24	; 0x802d39 <egDisplayTiming>
    4a7c:	90 93 3a 2d 	sts	0x2D3A, r25	; 0x802d3a <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 2, NULL);	
    4a80:	e1 2c       	mov	r14, r1
    4a82:	f1 2c       	mov	r15, r1
    4a84:	02 e0       	ldi	r16, 0x02	; 2
    4a86:	20 e0       	ldi	r18, 0x00	; 0
    4a88:	30 e0       	ldi	r19, 0x00	; 0
    4a8a:	4e e5       	ldi	r20, 0x5E	; 94
    4a8c:	51 e0       	ldi	r21, 0x01	; 1
    4a8e:	63 e7       	ldi	r22, 0x73	; 115
    4a90:	70 e2       	ldi	r23, 0x20	; 32
    4a92:	83 ef       	ldi	r24, 0xF3	; 243
    4a94:	95 e2       	ldi	r25, 0x25	; 37
    4a96:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
 }
    4a9a:	00 00       	nop
    4a9c:	df 91       	pop	r29
    4a9e:	cf 91       	pop	r28
    4aa0:	0f 91       	pop	r16
    4aa2:	ff 90       	pop	r15
    4aa4:	ef 90       	pop	r14
    4aa6:	08 95       	ret

00004aa8 <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    4aa8:	cf 93       	push	r28
    4aaa:	df 93       	push	r29
    4aac:	00 d0       	rcall	.+0      	; 0x4aae <_displaySetPos+0x6>
    4aae:	1f 92       	push	r1
    4ab0:	cd b7       	in	r28, 0x3d	; 61
    4ab2:	de b7       	in	r29, 0x3e	; 62
    4ab4:	89 83       	std	Y+1, r24	; 0x01
    4ab6:	9a 83       	std	Y+2, r25	; 0x02
    4ab8:	6b 83       	std	Y+3, r22	; 0x03
    4aba:	7c 83       	std	Y+4, r23	; 0x04
	 switch(line) {
    4abc:	89 81       	ldd	r24, Y+1	; 0x01
    4abe:	9a 81       	ldd	r25, Y+2	; 0x02
    4ac0:	81 30       	cpi	r24, 0x01	; 1
    4ac2:	91 05       	cpc	r25, r1
    4ac4:	89 f0       	breq	.+34     	; 0x4ae8 <_displaySetPos+0x40>
    4ac6:	82 30       	cpi	r24, 0x02	; 2
    4ac8:	91 05       	cpc	r25, r1
    4aca:	1c f4       	brge	.+6      	; 0x4ad2 <_displaySetPos+0x2a>
    4acc:	89 2b       	or	r24, r25
    4ace:	39 f0       	breq	.+14     	; 0x4ade <_displaySetPos+0x36>
    4ad0:	1a c0       	rjmp	.+52     	; 0x4b06 <_displaySetPos+0x5e>
    4ad2:	82 30       	cpi	r24, 0x02	; 2
    4ad4:	91 05       	cpc	r25, r1
    4ad6:	69 f0       	breq	.+26     	; 0x4af2 <_displaySetPos+0x4a>
    4ad8:	03 97       	sbiw	r24, 0x03	; 3
    4ada:	81 f0       	breq	.+32     	; 0x4afc <_displaySetPos+0x54>
    4adc:	14 c0       	rjmp	.+40     	; 0x4b06 <_displaySetPos+0x5e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    4ade:	8b 81       	ldd	r24, Y+3	; 0x03
    4ae0:	80 58       	subi	r24, 0x80	; 128
    4ae2:	0e 94 b9 24 	call	0x4972	; 0x4972 <command>
		 break;
    4ae6:	0f c0       	rjmp	.+30     	; 0x4b06 <_displaySetPos+0x5e>
		 case 1:
		 command(0x80 + 0x40 + pos);
    4ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    4aea:	80 54       	subi	r24, 0x40	; 64
    4aec:	0e 94 b9 24 	call	0x4972	; 0x4972 <command>
		 break;
    4af0:	0a c0       	rjmp	.+20     	; 0x4b06 <_displaySetPos+0x5e>
		 case 2:
		 command(0x80 + 0x14 + pos);
    4af2:	8b 81       	ldd	r24, Y+3	; 0x03
    4af4:	8c 56       	subi	r24, 0x6C	; 108
    4af6:	0e 94 b9 24 	call	0x4972	; 0x4972 <command>
		 break;
    4afa:	05 c0       	rjmp	.+10     	; 0x4b06 <_displaySetPos+0x5e>
		 case 3:
		 command(0x80 + 0x54 + pos);
    4afc:	8b 81       	ldd	r24, Y+3	; 0x03
    4afe:	8c 52       	subi	r24, 0x2C	; 44
    4b00:	0e 94 b9 24 	call	0x4972	; 0x4972 <command>
		 break;
    4b04:	00 00       	nop
	 }
	 delayUS(39);
    4b06:	67 e2       	ldi	r22, 0x27	; 39
    4b08:	70 e0       	ldi	r23, 0x00	; 0
    4b0a:	80 e0       	ldi	r24, 0x00	; 0
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	0e 94 aa 23 	call	0x4754	; 0x4754 <delayUS>
 }
    4b12:	00 00       	nop
    4b14:	24 96       	adiw	r28, 0x04	; 4
    4b16:	cd bf       	out	0x3d, r28	; 61
    4b18:	de bf       	out	0x3e, r29	; 62
    4b1a:	df 91       	pop	r29
    4b1c:	cf 91       	pop	r28
    4b1e:	08 95       	ret

00004b20 <_displayWriteChar>:

 void _displayWriteChar(char c) {
    4b20:	cf 93       	push	r28
    4b22:	df 93       	push	r29
    4b24:	1f 92       	push	r1
    4b26:	cd b7       	in	r28, 0x3d	; 61
    4b28:	de b7       	in	r29, 0x3e	; 62
    4b2a:	89 83       	std	Y+1, r24	; 0x01
	 write(c);
    4b2c:	89 81       	ldd	r24, Y+1	; 0x01
    4b2e:	0e 94 d7 24 	call	0x49ae	; 0x49ae <write>
	 delayUS(43);
    4b32:	6b e2       	ldi	r22, 0x2B	; 43
    4b34:	70 e0       	ldi	r23, 0x00	; 0
    4b36:	80 e0       	ldi	r24, 0x00	; 0
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	0e 94 aa 23 	call	0x4754	; 0x4754 <delayUS>
 }
    4b3e:	00 00       	nop
    4b40:	0f 90       	pop	r0
    4b42:	df 91       	pop	r29
    4b44:	cf 91       	pop	r28
    4b46:	08 95       	ret

00004b48 <_displayWriteString>:
 
 void _displayWriteString(char* s) {
    4b48:	cf 93       	push	r28
    4b4a:	df 93       	push	r29
    4b4c:	00 d0       	rcall	.+0      	; 0x4b4e <_displayWriteString+0x6>
    4b4e:	1f 92       	push	r1
    4b50:	cd b7       	in	r28, 0x3d	; 61
    4b52:	de b7       	in	r29, 0x3e	; 62
    4b54:	8b 83       	std	Y+3, r24	; 0x03
    4b56:	9c 83       	std	Y+4, r25	; 0x04
	 for(int i = 0; i < 20; i++) {
    4b58:	19 82       	std	Y+1, r1	; 0x01
    4b5a:	1a 82       	std	Y+2, r1	; 0x02
    4b5c:	19 c0       	rjmp	.+50     	; 0x4b90 <_displayWriteString+0x48>
		 if(s[i] == '\0') {
    4b5e:	89 81       	ldd	r24, Y+1	; 0x01
    4b60:	9a 81       	ldd	r25, Y+2	; 0x02
    4b62:	2b 81       	ldd	r18, Y+3	; 0x03
    4b64:	3c 81       	ldd	r19, Y+4	; 0x04
    4b66:	82 0f       	add	r24, r18
    4b68:	93 1f       	adc	r25, r19
    4b6a:	fc 01       	movw	r30, r24
    4b6c:	80 81       	ld	r24, Z
    4b6e:	88 23       	and	r24, r24
    4b70:	a1 f0       	breq	.+40     	; 0x4b9a <_displayWriteString+0x52>
			 break;
		 }
		 _displayWriteChar(s[i]);
    4b72:	89 81       	ldd	r24, Y+1	; 0x01
    4b74:	9a 81       	ldd	r25, Y+2	; 0x02
    4b76:	2b 81       	ldd	r18, Y+3	; 0x03
    4b78:	3c 81       	ldd	r19, Y+4	; 0x04
    4b7a:	82 0f       	add	r24, r18
    4b7c:	93 1f       	adc	r25, r19
    4b7e:	fc 01       	movw	r30, r24
    4b80:	80 81       	ld	r24, Z
    4b82:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    4b86:	89 81       	ldd	r24, Y+1	; 0x01
    4b88:	9a 81       	ldd	r25, Y+2	; 0x02
    4b8a:	01 96       	adiw	r24, 0x01	; 1
    4b8c:	89 83       	std	Y+1, r24	; 0x01
    4b8e:	9a 83       	std	Y+2, r25	; 0x02
    4b90:	89 81       	ldd	r24, Y+1	; 0x01
    4b92:	9a 81       	ldd	r25, Y+2	; 0x02
    4b94:	44 97       	sbiw	r24, 0x14	; 20
    4b96:	1c f3       	brlt	.-58     	; 0x4b5e <_displayWriteString+0x16>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    4b98:	01 c0       	rjmp	.+2      	; 0x4b9c <_displayWriteString+0x54>
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
			 break;
    4b9a:	00 00       	nop
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    4b9c:	00 00       	nop
    4b9e:	24 96       	adiw	r28, 0x04	; 4
    4ba0:	cd bf       	out	0x3d, r28	; 61
    4ba2:	de bf       	out	0x3e, r29	; 62
    4ba4:	df 91       	pop	r29
    4ba6:	cf 91       	pop	r28
    4ba8:	08 95       	ret

00004baa <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    4baa:	cf 93       	push	r28
    4bac:	df 93       	push	r29
    4bae:	00 d0       	rcall	.+0      	; 0x4bb0 <_displayWriteStringAtPos+0x6>
    4bb0:	00 d0       	rcall	.+0      	; 0x4bb2 <_displayWriteStringAtPos+0x8>
    4bb2:	cd b7       	in	r28, 0x3d	; 61
    4bb4:	de b7       	in	r29, 0x3e	; 62
    4bb6:	89 83       	std	Y+1, r24	; 0x01
    4bb8:	9a 83       	std	Y+2, r25	; 0x02
    4bba:	6b 83       	std	Y+3, r22	; 0x03
    4bbc:	7c 83       	std	Y+4, r23	; 0x04
    4bbe:	4d 83       	std	Y+5, r20	; 0x05
    4bc0:	5e 83       	std	Y+6, r21	; 0x06
	 _displaySetPos(line, pos);
    4bc2:	2b 81       	ldd	r18, Y+3	; 0x03
    4bc4:	3c 81       	ldd	r19, Y+4	; 0x04
    4bc6:	89 81       	ldd	r24, Y+1	; 0x01
    4bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bca:	b9 01       	movw	r22, r18
    4bcc:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <_displaySetPos>
	 _displayWriteString(s);
    4bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    4bd4:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <_displayWriteString>
 }
    4bd8:	00 00       	nop
    4bda:	26 96       	adiw	r28, 0x06	; 6
    4bdc:	cd bf       	out	0x3d, r28	; 61
    4bde:	de bf       	out	0x3e, r29	; 62
    4be0:	df 91       	pop	r29
    4be2:	cf 91       	pop	r28
    4be4:	08 95       	ret

00004be6 <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    4be6:	cf 93       	push	r28
    4be8:	df 93       	push	r29
    4bea:	cd b7       	in	r28, 0x3d	; 61
    4bec:	de b7       	in	r29, 0x3e	; 62
    4bee:	c0 57       	subi	r28, 0x70	; 112
    4bf0:	d1 09       	sbc	r29, r1
    4bf2:	cd bf       	out	0x3d, r28	; 61
    4bf4:	de bf       	out	0x3e, r29	; 62
    4bf6:	9e 01       	movw	r18, r28
    4bf8:	21 59       	subi	r18, 0x91	; 145
    4bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    4bfc:	f9 01       	movw	r30, r18
    4bfe:	80 83       	st	Z, r24
    4c00:	91 83       	std	Z+1, r25	; 0x01
	 int i = 0;
    4c02:	19 82       	std	Y+1, r1	; 0x01
    4c04:	1a 82       	std	Y+2, r1	; 0x02
	 int j = 0;
    4c06:	1b 82       	std	Y+3, r1	; 0x03
    4c08:	1c 82       	std	Y+4, r1	; 0x04
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    4c0a:	1d 82       	std	Y+5, r1	; 0x05
    4c0c:	1e 82       	std	Y+6, r1	; 0x06
    4c0e:	26 c0       	rjmp	.+76     	; 0x4c5c <vDisplayUpdateTask+0x76>
		for(int j = 0; j < 20; j ++) {
    4c10:	1f 82       	std	Y+7, r1	; 0x07
    4c12:	18 86       	std	Y+8, r1	; 0x08
    4c14:	1a c0       	rjmp	.+52     	; 0x4c4a <vDisplayUpdateTask+0x64>
			displayLines[i][j] = 0x20;
    4c16:	2d 81       	ldd	r18, Y+5	; 0x05
    4c18:	3e 81       	ldd	r19, Y+6	; 0x06
    4c1a:	44 e1       	ldi	r20, 0x14	; 20
    4c1c:	42 9f       	mul	r20, r18
    4c1e:	c0 01       	movw	r24, r0
    4c20:	43 9f       	mul	r20, r19
    4c22:	90 0d       	add	r25, r0
    4c24:	11 24       	eor	r1, r1
    4c26:	9e 01       	movw	r18, r28
    4c28:	2f 5f       	subi	r18, 0xFF	; 255
    4c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c2c:	28 0f       	add	r18, r24
    4c2e:	39 1f       	adc	r19, r25
    4c30:	8f 81       	ldd	r24, Y+7	; 0x07
    4c32:	98 85       	ldd	r25, Y+8	; 0x08
    4c34:	82 0f       	add	r24, r18
    4c36:	93 1f       	adc	r25, r19
    4c38:	08 96       	adiw	r24, 0x08	; 8
    4c3a:	20 e2       	ldi	r18, 0x20	; 32
    4c3c:	fc 01       	movw	r30, r24
    4c3e:	20 83       	st	Z, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    4c40:	8f 81       	ldd	r24, Y+7	; 0x07
    4c42:	98 85       	ldd	r25, Y+8	; 0x08
    4c44:	01 96       	adiw	r24, 0x01	; 1
    4c46:	8f 83       	std	Y+7, r24	; 0x07
    4c48:	98 87       	std	Y+8, r25	; 0x08
    4c4a:	8f 81       	ldd	r24, Y+7	; 0x07
    4c4c:	98 85       	ldd	r25, Y+8	; 0x08
    4c4e:	44 97       	sbiw	r24, 0x14	; 20
    4c50:	14 f3       	brlt	.-60     	; 0x4c16 <vDisplayUpdateTask+0x30>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    4c52:	8d 81       	ldd	r24, Y+5	; 0x05
    4c54:	9e 81       	ldd	r25, Y+6	; 0x06
    4c56:	01 96       	adiw	r24, 0x01	; 1
    4c58:	8d 83       	std	Y+5, r24	; 0x05
    4c5a:	9e 83       	std	Y+6, r25	; 0x06
    4c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    4c60:	04 97       	sbiw	r24, 0x04	; 4
    4c62:	b4 f2       	brlt	.-84     	; 0x4c10 <vDisplayUpdateTask+0x2a>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    4c64:	60 e4       	ldi	r22, 0x40	; 64
    4c66:	7c e9       	ldi	r23, 0x9C	; 156
    4c68:	80 e0       	ldi	r24, 0x00	; 0
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	0e 94 aa 23 	call	0x4754	; 0x4754 <delayUS>
	 setPort(0x03);
    4c70:	83 e0       	ldi	r24, 0x03	; 3
    4c72:	0e 94 33 24 	call	0x4866	; 0x4866 <setPort>
	 delayUS(5000);
    4c76:	68 e8       	ldi	r22, 0x88	; 136
    4c78:	73 e1       	ldi	r23, 0x13	; 19
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	0e 94 aa 23 	call	0x4754	; 0x4754 <delayUS>
	 Nybble();
    4c82:	0e 94 a5 24 	call	0x494a	; 0x494a <Nybble>
	 delayUS(160);
    4c86:	60 ea       	ldi	r22, 0xA0	; 160
    4c88:	70 e0       	ldi	r23, 0x00	; 0
    4c8a:	80 e0       	ldi	r24, 0x00	; 0
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	0e 94 aa 23 	call	0x4754	; 0x4754 <delayUS>
	 Nybble();
    4c92:	0e 94 a5 24 	call	0x494a	; 0x494a <Nybble>
	 delayUS(160);
    4c96:	60 ea       	ldi	r22, 0xA0	; 160
    4c98:	70 e0       	ldi	r23, 0x00	; 0
    4c9a:	80 e0       	ldi	r24, 0x00	; 0
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	0e 94 aa 23 	call	0x4754	; 0x4754 <delayUS>
	 Nybble();
    4ca2:	0e 94 a5 24 	call	0x494a	; 0x494a <Nybble>
	 delayUS(160);
    4ca6:	60 ea       	ldi	r22, 0xA0	; 160
    4ca8:	70 e0       	ldi	r23, 0x00	; 0
    4caa:	80 e0       	ldi	r24, 0x00	; 0
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	0e 94 aa 23 	call	0x4754	; 0x4754 <delayUS>
	 setPort(0x02);
    4cb2:	82 e0       	ldi	r24, 0x02	; 2
    4cb4:	0e 94 33 24 	call	0x4866	; 0x4866 <setPort>
	 Nybble();
    4cb8:	0e 94 a5 24 	call	0x494a	; 0x494a <Nybble>
	 command(0x28);
    4cbc:	88 e2       	ldi	r24, 0x28	; 40
    4cbe:	0e 94 b9 24 	call	0x4972	; 0x4972 <command>
	 command(0x10);
    4cc2:	80 e1       	ldi	r24, 0x10	; 16
    4cc4:	0e 94 b9 24 	call	0x4972	; 0x4972 <command>
	 command(0x0C); //Cursor and Blinking off
    4cc8:	8c e0       	ldi	r24, 0x0C	; 12
    4cca:	0e 94 b9 24 	call	0x4972	; 0x4972 <command>
	 command(0x06);
    4cce:	86 e0       	ldi	r24, 0x06	; 6
    4cd0:	0e 94 b9 24 	call	0x4972	; 0x4972 <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    4cd4:	68 ec       	ldi	r22, 0xC8	; 200
    4cd6:	70 e0       	ldi	r23, 0x00	; 0
    4cd8:	80 e0       	ldi	r24, 0x00	; 0
    4cda:	90 e0       	ldi	r25, 0x00	; 0
    4cdc:	0e 94 ba 13 	call	0x2774	; 0x2774 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    4ce0:	80 91 39 2d 	lds	r24, 0x2D39	; 0x802d39 <egDisplayTiming>
    4ce4:	90 91 3a 2d 	lds	r25, 0x2D3A	; 0x802d3a <egDisplayTiming+0x1>
    4ce8:	40 e0       	ldi	r20, 0x00	; 0
    4cea:	50 e0       	ldi	r21, 0x00	; 0
    4cec:	ba 01       	movw	r22, r20
    4cee:	0e 94 b5 05 	call	0xb6a	; 0xb6a <xEventGroupClearBits>
    4cf2:	dc 01       	movw	r26, r24
    4cf4:	cb 01       	movw	r24, r22
    4cf6:	89 2b       	or	r24, r25
    4cf8:	8a 2b       	or	r24, r26
    4cfa:	8b 2b       	or	r24, r27
    4cfc:	09 f4       	brne	.+2      	; 0x4d00 <vDisplayUpdateTask+0x11a>
    4cfe:	96 c0       	rjmp	.+300    	; 0x4e2c <vDisplayUpdateTask+0x246>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    4d00:	80 91 39 2d 	lds	r24, 0x2D39	; 0x802d39 <egDisplayTiming>
    4d04:	90 91 3a 2d 	lds	r25, 0x2D3A	; 0x802d3a <egDisplayTiming+0x1>
    4d08:	42 e0       	ldi	r20, 0x02	; 2
    4d0a:	50 e0       	ldi	r21, 0x00	; 0
    4d0c:	60 e0       	ldi	r22, 0x00	; 0
    4d0e:	70 e0       	ldi	r23, 0x00	; 0
    4d10:	0e 94 b5 05 	call	0xb6a	; 0xb6a <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    4d14:	19 82       	std	Y+1, r1	; 0x01
    4d16:	1a 82       	std	Y+2, r1	; 0x02
    4d18:	26 c0       	rjmp	.+76     	; 0x4d66 <vDisplayUpdateTask+0x180>
				for(j = 0; j < 20; j ++) {
    4d1a:	1b 82       	std	Y+3, r1	; 0x03
    4d1c:	1c 82       	std	Y+4, r1	; 0x04
    4d1e:	1a c0       	rjmp	.+52     	; 0x4d54 <vDisplayUpdateTask+0x16e>
					displayLines[i][j] = 0x20;
    4d20:	29 81       	ldd	r18, Y+1	; 0x01
    4d22:	3a 81       	ldd	r19, Y+2	; 0x02
    4d24:	44 e1       	ldi	r20, 0x14	; 20
    4d26:	42 9f       	mul	r20, r18
    4d28:	c0 01       	movw	r24, r0
    4d2a:	43 9f       	mul	r20, r19
    4d2c:	90 0d       	add	r25, r0
    4d2e:	11 24       	eor	r1, r1
    4d30:	9e 01       	movw	r18, r28
    4d32:	2f 5f       	subi	r18, 0xFF	; 255
    4d34:	3f 4f       	sbci	r19, 0xFF	; 255
    4d36:	28 0f       	add	r18, r24
    4d38:	39 1f       	adc	r19, r25
    4d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d3e:	82 0f       	add	r24, r18
    4d40:	93 1f       	adc	r25, r19
    4d42:	08 96       	adiw	r24, 0x08	; 8
    4d44:	20 e2       	ldi	r18, 0x20	; 32
    4d46:	fc 01       	movw	r30, r24
    4d48:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    4d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d4e:	01 96       	adiw	r24, 0x01	; 1
    4d50:	8b 83       	std	Y+3, r24	; 0x03
    4d52:	9c 83       	std	Y+4, r25	; 0x04
    4d54:	8b 81       	ldd	r24, Y+3	; 0x03
    4d56:	9c 81       	ldd	r25, Y+4	; 0x04
    4d58:	44 97       	sbiw	r24, 0x14	; 20
    4d5a:	14 f3       	brlt	.-60     	; 0x4d20 <vDisplayUpdateTask+0x13a>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    4d5c:	89 81       	ldd	r24, Y+1	; 0x01
    4d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d60:	01 96       	adiw	r24, 0x01	; 1
    4d62:	89 83       	std	Y+1, r24	; 0x01
    4d64:	9a 83       	std	Y+2, r25	; 0x02
    4d66:	89 81       	ldd	r24, Y+1	; 0x01
    4d68:	9a 81       	ldd	r25, Y+2	; 0x02
    4d6a:	04 97       	sbiw	r24, 0x04	; 4
    4d6c:	b4 f2       	brlt	.-84     	; 0x4d1a <vDisplayUpdateTask+0x134>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    4d6e:	5e c0       	rjmp	.+188    	; 0x4e2c <vDisplayUpdateTask+0x246>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    4d70:	80 91 37 2d 	lds	r24, 0x2D37	; 0x802d37 <displayLineQueue>
    4d74:	90 91 38 2d 	lds	r25, 0x2D38	; 0x802d38 <displayLineQueue+0x1>
    4d78:	be 01       	movw	r22, r28
    4d7a:	67 5a       	subi	r22, 0xA7	; 167
    4d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d7e:	2f ef       	ldi	r18, 0xFF	; 255
    4d80:	3f ef       	ldi	r19, 0xFF	; 255
    4d82:	a9 01       	movw	r20, r18
    4d84:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <xQueueReceive>
    4d88:	88 23       	and	r24, r24
    4d8a:	09 f4       	brne	.+2      	; 0x4d8e <vDisplayUpdateTask+0x1a8>
    4d8c:	4f c0       	rjmp	.+158    	; 0x4e2c <vDisplayUpdateTask+0x246>
				i=0;			
    4d8e:	19 82       	std	Y+1, r1	; 0x01
    4d90:	1a 82       	std	Y+2, r1	; 0x02
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    4d92:	32 c0       	rjmp	.+100    	; 0x4df8 <vDisplayUpdateTask+0x212>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    4d94:	ce 01       	movw	r24, r28
    4d96:	87 5a       	subi	r24, 0xA7	; 167
    4d98:	9f 4f       	sbci	r25, 0xFF	; 255
    4d9a:	fc 01       	movw	r30, r24
    4d9c:	80 81       	ld	r24, Z
    4d9e:	48 2f       	mov	r20, r24
    4da0:	50 e0       	ldi	r21, 0x00	; 0
    4da2:	ce 01       	movw	r24, r28
    4da4:	87 5a       	subi	r24, 0xA7	; 167
    4da6:	9f 4f       	sbci	r25, 0xFF	; 255
    4da8:	fc 01       	movw	r30, r24
    4daa:	81 81       	ldd	r24, Z+1	; 0x01
    4dac:	28 2f       	mov	r18, r24
    4dae:	30 e0       	ldi	r19, 0x00	; 0
    4db0:	89 81       	ldd	r24, Y+1	; 0x01
    4db2:	9a 81       	ldd	r25, Y+2	; 0x02
    4db4:	82 0f       	add	r24, r18
    4db6:	93 1f       	adc	r25, r19
    4db8:	be 01       	movw	r22, r28
    4dba:	67 5a       	subi	r22, 0xA7	; 167
    4dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    4dbe:	29 81       	ldd	r18, Y+1	; 0x01
    4dc0:	3a 81       	ldd	r19, Y+2	; 0x02
    4dc2:	26 0f       	add	r18, r22
    4dc4:	37 1f       	adc	r19, r23
    4dc6:	2e 5f       	subi	r18, 0xFE	; 254
    4dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    4dca:	f9 01       	movw	r30, r18
    4dcc:	60 81       	ld	r22, Z
    4dce:	74 e1       	ldi	r23, 0x14	; 20
    4dd0:	74 9f       	mul	r23, r20
    4dd2:	90 01       	movw	r18, r0
    4dd4:	75 9f       	mul	r23, r21
    4dd6:	30 0d       	add	r19, r0
    4dd8:	11 24       	eor	r1, r1
    4dda:	ae 01       	movw	r20, r28
    4ddc:	4f 5f       	subi	r20, 0xFF	; 255
    4dde:	5f 4f       	sbci	r21, 0xFF	; 255
    4de0:	24 0f       	add	r18, r20
    4de2:	35 1f       	adc	r19, r21
    4de4:	82 0f       	add	r24, r18
    4de6:	93 1f       	adc	r25, r19
    4de8:	08 96       	adiw	r24, 0x08	; 8
    4dea:	fc 01       	movw	r30, r24
    4dec:	60 83       	st	Z, r22
					i++;
    4dee:	89 81       	ldd	r24, Y+1	; 0x01
    4df0:	9a 81       	ldd	r25, Y+2	; 0x02
    4df2:	01 96       	adiw	r24, 0x01	; 1
    4df4:	89 83       	std	Y+1, r24	; 0x01
    4df6:	9a 83       	std	Y+2, r25	; 0x02
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    4df8:	ce 01       	movw	r24, r28
    4dfa:	87 5a       	subi	r24, 0xA7	; 167
    4dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    4dfe:	fc 01       	movw	r30, r24
    4e00:	81 81       	ldd	r24, Z+1	; 0x01
    4e02:	28 2f       	mov	r18, r24
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	89 81       	ldd	r24, Y+1	; 0x01
    4e08:	9a 81       	ldd	r25, Y+2	; 0x02
    4e0a:	82 0f       	add	r24, r18
    4e0c:	93 1f       	adc	r25, r19
    4e0e:	44 97       	sbiw	r24, 0x14	; 20
    4e10:	6c f4       	brge	.+26     	; 0x4e2c <vDisplayUpdateTask+0x246>
    4e12:	9e 01       	movw	r18, r28
    4e14:	27 5a       	subi	r18, 0xA7	; 167
    4e16:	3f 4f       	sbci	r19, 0xFF	; 255
    4e18:	89 81       	ldd	r24, Y+1	; 0x01
    4e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e1c:	82 0f       	add	r24, r18
    4e1e:	93 1f       	adc	r25, r19
    4e20:	02 96       	adiw	r24, 0x02	; 2
    4e22:	fc 01       	movw	r30, r24
    4e24:	80 81       	ld	r24, Z
    4e26:	88 23       	and	r24, r24
    4e28:	09 f0       	breq	.+2      	; 0x4e2c <vDisplayUpdateTask+0x246>
    4e2a:	b4 cf       	rjmp	.-152    	; 0x4d94 <vDisplayUpdateTask+0x1ae>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    4e2c:	80 91 37 2d 	lds	r24, 0x2D37	; 0x802d37 <displayLineQueue>
    4e30:	90 91 38 2d 	lds	r25, 0x2D38	; 0x802d38 <displayLineQueue+0x1>
    4e34:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <uxQueueMessagesWaiting>
    4e38:	88 23       	and	r24, r24
    4e3a:	09 f0       	breq	.+2      	; 0x4e3e <vDisplayUpdateTask+0x258>
    4e3c:	99 cf       	rjmp	.-206    	; 0x4d70 <vDisplayUpdateTask+0x18a>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    4e3e:	19 82       	std	Y+1, r1	; 0x01
    4e40:	1a 82       	std	Y+2, r1	; 0x02
    4e42:	19 c0       	rjmp	.+50     	; 0x4e76 <vDisplayUpdateTask+0x290>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    4e44:	9e 01       	movw	r18, r28
    4e46:	27 5f       	subi	r18, 0xF7	; 247
    4e48:	3f 4f       	sbci	r19, 0xFF	; 255
    4e4a:	49 81       	ldd	r20, Y+1	; 0x01
    4e4c:	5a 81       	ldd	r21, Y+2	; 0x02
    4e4e:	64 e1       	ldi	r22, 0x14	; 20
    4e50:	64 9f       	mul	r22, r20
    4e52:	c0 01       	movw	r24, r0
    4e54:	65 9f       	mul	r22, r21
    4e56:	90 0d       	add	r25, r0
    4e58:	11 24       	eor	r1, r1
    4e5a:	28 0f       	add	r18, r24
    4e5c:	39 1f       	adc	r19, r25
    4e5e:	89 81       	ldd	r24, Y+1	; 0x01
    4e60:	9a 81       	ldd	r25, Y+2	; 0x02
    4e62:	a9 01       	movw	r20, r18
    4e64:	60 e0       	ldi	r22, 0x00	; 0
    4e66:	70 e0       	ldi	r23, 0x00	; 0
    4e68:	0e 94 d5 25 	call	0x4baa	; 0x4baa <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    4e6c:	89 81       	ldd	r24, Y+1	; 0x01
    4e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e70:	01 96       	adiw	r24, 0x01	; 1
    4e72:	89 83       	std	Y+1, r24	; 0x01
    4e74:	9a 83       	std	Y+2, r25	; 0x02
    4e76:	89 81       	ldd	r24, Y+1	; 0x01
    4e78:	9a 81       	ldd	r25, Y+2	; 0x02
    4e7a:	04 97       	sbiw	r24, 0x04	; 4
    4e7c:	1c f3       	brlt	.-58     	; 0x4e44 <vDisplayUpdateTask+0x25e>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
		 }
	 }
    4e7e:	2a cf       	rjmp	.-428    	; 0x4cd4 <vDisplayUpdateTask+0xee>

00004e80 <vDisplayClear>:
 }
 

void vDisplayClear() {
    4e80:	cf 93       	push	r28
    4e82:	df 93       	push	r29
    4e84:	cd b7       	in	r28, 0x3d	; 61
    4e86:	de b7       	in	r29, 0x3e	; 62
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    4e88:	80 91 39 2d 	lds	r24, 0x2D39	; 0x802d39 <egDisplayTiming>
    4e8c:	90 91 3a 2d 	lds	r25, 0x2D3A	; 0x802d3a <egDisplayTiming+0x1>
    4e90:	42 e0       	ldi	r20, 0x02	; 2
    4e92:	50 e0       	ldi	r21, 0x00	; 0
    4e94:	60 e0       	ldi	r22, 0x00	; 0
    4e96:	70 e0       	ldi	r23, 0x00	; 0
    4e98:	0e 94 00 06 	call	0xc00	; 0xc00 <xEventGroupSetBits>
}
    4e9c:	00 00       	nop
    4e9e:	df 91       	pop	r29
    4ea0:	cf 91       	pop	r28
    4ea2:	08 95       	ret

00004ea4 <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    4ea4:	cf 93       	push	r28
    4ea6:	df 93       	push	r29
    4ea8:	1f 92       	push	r1
    4eaa:	1f 92       	push	r1
    4eac:	cd b7       	in	r28, 0x3d	; 61
    4eae:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    4eb0:	ce 01       	movw	r24, r28
    4eb2:	0e 96       	adiw	r24, 0x0e	; 14
    4eb4:	89 83       	std	Y+1, r24	; 0x01
    4eb6:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    4eb8:	29 81       	ldd	r18, Y+1	; 0x01
    4eba:	3a 81       	ldd	r19, Y+2	; 0x02
    4ebc:	4c 85       	ldd	r20, Y+12	; 0x0c
    4ebe:	5d 85       	ldd	r21, Y+13	; 0x0d
    4ec0:	6a 85       	ldd	r22, Y+10	; 0x0a
    4ec2:	7b 85       	ldd	r23, Y+11	; 0x0b
    4ec4:	88 85       	ldd	r24, Y+8	; 0x08
    4ec6:	99 85       	ldd	r25, Y+9	; 0x09
    4ec8:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <display_vprintf>
	va_end(arg);	
}
    4ecc:	00 00       	nop
    4ece:	0f 90       	pop	r0
    4ed0:	0f 90       	pop	r0
    4ed2:	df 91       	pop	r29
    4ed4:	cf 91       	pop	r28
    4ed6:	08 95       	ret

00004ed8 <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    4ed8:	0f 93       	push	r16
    4eda:	cf 93       	push	r28
    4edc:	df 93       	push	r29
    4ede:	cd b7       	in	r28, 0x3d	; 61
    4ee0:	de b7       	in	r29, 0x3e	; 62
    4ee2:	ec 97       	sbiw	r28, 0x3c	; 60
    4ee4:	cd bf       	out	0x3d, r28	; 61
    4ee6:	de bf       	out	0x3e, r29	; 62
    4ee8:	8d ab       	std	Y+53, r24	; 0x35
    4eea:	9e ab       	std	Y+54, r25	; 0x36
    4eec:	6f ab       	std	Y+55, r22	; 0x37
    4eee:	78 af       	std	Y+56, r23	; 0x38
    4ef0:	49 af       	std	Y+57, r20	; 0x39
    4ef2:	5a af       	std	Y+58, r21	; 0x3a
    4ef4:	2b af       	std	Y+59, r18	; 0x3b
    4ef6:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    4ef8:	19 82       	std	Y+1, r1	; 0x01
    4efa:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    4efc:	1b 82       	std	Y+3, r1	; 0x03
    4efe:	1c 82       	std	Y+4, r1	; 0x04
    4f00:	0b c0       	rjmp	.+22     	; 0x4f18 <display_vprintf+0x40>
		buffer[i] = 0x00;
    4f02:	8b 81       	ldd	r24, Y+3	; 0x03
    4f04:	9c 81       	ldd	r25, Y+4	; 0x04
    4f06:	86 52       	subi	r24, 0x26	; 38
    4f08:	93 4d       	sbci	r25, 0xD3	; 211
    4f0a:	fc 01       	movw	r30, r24
    4f0c:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    4f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f10:	9c 81       	ldd	r25, Y+4	; 0x04
    4f12:	01 96       	adiw	r24, 0x01	; 1
    4f14:	8b 83       	std	Y+3, r24	; 0x03
    4f16:	9c 83       	std	Y+4, r25	; 0x04
    4f18:	8b 81       	ldd	r24, Y+3	; 0x03
    4f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f1c:	44 97       	sbiw	r24, 0x14	; 20
    4f1e:	8c f3       	brlt	.-30     	; 0x4f02 <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    4f20:	1d 82       	std	Y+5, r1	; 0x05
    4f22:	1e 82       	std	Y+6, r1	; 0x06
    4f24:	0b c0       	rjmp	.+22     	; 0x4f3c <display_vprintf+0x64>
		str[i] = 0x00;
    4f26:	8d 81       	ldd	r24, Y+5	; 0x05
    4f28:	9e 81       	ldd	r25, Y+6	; 0x06
    4f2a:	82 51       	subi	r24, 0x12	; 18
    4f2c:	93 4d       	sbci	r25, 0xD3	; 211
    4f2e:	fc 01       	movw	r30, r24
    4f30:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    4f32:	8d 81       	ldd	r24, Y+5	; 0x05
    4f34:	9e 81       	ldd	r25, Y+6	; 0x06
    4f36:	01 96       	adiw	r24, 0x01	; 1
    4f38:	8d 83       	std	Y+5, r24	; 0x05
    4f3a:	9e 83       	std	Y+6, r25	; 0x06
    4f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f40:	44 97       	sbiw	r24, 0x14	; 20
    4f42:	8c f3       	brlt	.-30     	; 0x4f26 <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    4f44:	be c1       	rjmp	.+892    	; 0x52c2 <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    4f46:	8d 89       	ldd	r24, Y+21	; 0x15
    4f48:	85 32       	cpi	r24, 0x25	; 37
    4f4a:	09 f0       	breq	.+2      	; 0x4f4e <display_vprintf+0x76>
    4f4c:	a0 c1       	rjmp	.+832    	; 0x528e <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    4f4e:	89 ad       	ldd	r24, Y+57	; 0x39
    4f50:	9a ad       	ldd	r25, Y+58	; 0x3a
    4f52:	9c 01       	movw	r18, r24
    4f54:	2f 5f       	subi	r18, 0xFF	; 255
    4f56:	3f 4f       	sbci	r19, 0xFF	; 255
    4f58:	29 af       	std	Y+57, r18	; 0x39
    4f5a:	3a af       	std	Y+58, r19	; 0x3a
    4f5c:	fc 01       	movw	r30, r24
    4f5e:	80 81       	ld	r24, Z
    4f60:	8d 8b       	std	Y+21, r24	; 0x15
    4f62:	8d 89       	ldd	r24, Y+21	; 0x15
    4f64:	88 2f       	mov	r24, r24
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	85 36       	cpi	r24, 0x65	; 101
    4f6a:	91 05       	cpc	r25, r1
    4f6c:	09 f4       	brne	.+2      	; 0x4f70 <display_vprintf+0x98>
    4f6e:	46 c1       	rjmp	.+652    	; 0x51fc <display_vprintf+0x324>
    4f70:	86 36       	cpi	r24, 0x66	; 102
    4f72:	91 05       	cpc	r25, r1
    4f74:	54 f4       	brge	.+20     	; 0x4f8a <display_vprintf+0xb2>
    4f76:	83 36       	cpi	r24, 0x63	; 99
    4f78:	91 05       	cpc	r25, r1
    4f7a:	01 f1       	breq	.+64     	; 0x4fbc <display_vprintf+0xe4>
    4f7c:	84 36       	cpi	r24, 0x64	; 100
    4f7e:	91 05       	cpc	r25, r1
    4f80:	0c f0       	brlt	.+2      	; 0x4f84 <display_vprintf+0xac>
    4f82:	70 c0       	rjmp	.+224    	; 0x5064 <display_vprintf+0x18c>
    4f84:	85 97       	sbiw	r24, 0x25	; 37
    4f86:	69 f0       	breq	.+26     	; 0x4fa2 <display_vprintf+0xca>
    4f88:	9c c1       	rjmp	.+824    	; 0x52c2 <display_vprintf+0x3ea>
    4f8a:	83 37       	cpi	r24, 0x73	; 115
    4f8c:	91 05       	cpc	r25, r1
    4f8e:	71 f1       	breq	.+92     	; 0x4fec <display_vprintf+0x114>
    4f90:	88 37       	cpi	r24, 0x78	; 120
    4f92:	91 05       	cpc	r25, r1
    4f94:	09 f4       	brne	.+2      	; 0x4f98 <display_vprintf+0xc0>
    4f96:	a8 c0       	rjmp	.+336    	; 0x50e8 <display_vprintf+0x210>
    4f98:	86 36       	cpi	r24, 0x66	; 102
    4f9a:	91 05       	cpc	r25, r1
    4f9c:	09 f4       	brne	.+2      	; 0x4fa0 <display_vprintf+0xc8>
    4f9e:	e6 c0       	rjmp	.+460    	; 0x516c <display_vprintf+0x294>
    4fa0:	90 c1       	rjmp	.+800    	; 0x52c2 <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    4fa2:	89 81       	ldd	r24, Y+1	; 0x01
    4fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa6:	82 51       	subi	r24, 0x12	; 18
    4fa8:	93 4d       	sbci	r25, 0xD3	; 211
    4faa:	25 e2       	ldi	r18, 0x25	; 37
    4fac:	fc 01       	movw	r30, r24
    4fae:	20 83       	st	Z, r18
				length++;
    4fb0:	89 81       	ldd	r24, Y+1	; 0x01
    4fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    4fb4:	01 96       	adiw	r24, 0x01	; 1
    4fb6:	89 83       	std	Y+1, r24	; 0x01
    4fb8:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4fba:	83 c1       	rjmp	.+774    	; 0x52c2 <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    4fbc:	8b ad       	ldd	r24, Y+59	; 0x3b
    4fbe:	9c ad       	ldd	r25, Y+60	; 0x3c
    4fc0:	9c 01       	movw	r18, r24
    4fc2:	2e 5f       	subi	r18, 0xFE	; 254
    4fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    4fc6:	2b af       	std	Y+59, r18	; 0x3b
    4fc8:	3c af       	std	Y+60, r19	; 0x3c
    4fca:	fc 01       	movw	r30, r24
    4fcc:	80 81       	ld	r24, Z
    4fce:	91 81       	ldd	r25, Z+1	; 0x01
    4fd0:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    4fd2:	89 81       	ldd	r24, Y+1	; 0x01
    4fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    4fd6:	82 51       	subi	r24, 0x12	; 18
    4fd8:	93 4d       	sbci	r25, 0xD3	; 211
    4fda:	2e 89       	ldd	r18, Y+22	; 0x16
    4fdc:	fc 01       	movw	r30, r24
    4fde:	20 83       	st	Z, r18
				length++;
    4fe0:	89 81       	ldd	r24, Y+1	; 0x01
    4fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    4fe4:	01 96       	adiw	r24, 0x01	; 1
    4fe6:	89 83       	std	Y+1, r24	; 0x01
    4fe8:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4fea:	6b c1       	rjmp	.+726    	; 0x52c2 <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    4fec:	8b ad       	ldd	r24, Y+59	; 0x3b
    4fee:	9c ad       	ldd	r25, Y+60	; 0x3c
    4ff0:	9c 01       	movw	r18, r24
    4ff2:	2e 5f       	subi	r18, 0xFE	; 254
    4ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ff6:	2b af       	std	Y+59, r18	; 0x3b
    4ff8:	3c af       	std	Y+60, r19	; 0x3c
    4ffa:	fc 01       	movw	r30, r24
    4ffc:	80 81       	ld	r24, Z
    4ffe:	91 81       	ldd	r25, Z+1	; 0x01
    5000:	8f 8b       	std	Y+23, r24	; 0x17
    5002:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    5004:	1f 82       	std	Y+7, r1	; 0x07
    5006:	18 86       	std	Y+8, r1	; 0x08
    5008:	17 c0       	rjmp	.+46     	; 0x5038 <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    500a:	29 81       	ldd	r18, Y+1	; 0x01
    500c:	3a 81       	ldd	r19, Y+2	; 0x02
    500e:	8f 81       	ldd	r24, Y+7	; 0x07
    5010:	98 85       	ldd	r25, Y+8	; 0x08
    5012:	82 0f       	add	r24, r18
    5014:	93 1f       	adc	r25, r19
    5016:	2f 81       	ldd	r18, Y+7	; 0x07
    5018:	38 85       	ldd	r19, Y+8	; 0x08
    501a:	4f 89       	ldd	r20, Y+23	; 0x17
    501c:	58 8d       	ldd	r21, Y+24	; 0x18
    501e:	24 0f       	add	r18, r20
    5020:	35 1f       	adc	r19, r21
    5022:	f9 01       	movw	r30, r18
    5024:	20 81       	ld	r18, Z
    5026:	82 51       	subi	r24, 0x12	; 18
    5028:	93 4d       	sbci	r25, 0xD3	; 211
    502a:	fc 01       	movw	r30, r24
    502c:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    502e:	8f 81       	ldd	r24, Y+7	; 0x07
    5030:	98 85       	ldd	r25, Y+8	; 0x08
    5032:	01 96       	adiw	r24, 0x01	; 1
    5034:	8f 83       	std	Y+7, r24	; 0x07
    5036:	98 87       	std	Y+8, r25	; 0x08
    5038:	8f 89       	ldd	r24, Y+23	; 0x17
    503a:	98 8d       	ldd	r25, Y+24	; 0x18
    503c:	0e 94 a4 33 	call	0x6748	; 0x6748 <strlen>
    5040:	9c 01       	movw	r18, r24
    5042:	8f 81       	ldd	r24, Y+7	; 0x07
    5044:	98 85       	ldd	r25, Y+8	; 0x08
    5046:	82 17       	cp	r24, r18
    5048:	93 07       	cpc	r25, r19
    504a:	f8 f2       	brcs	.-66     	; 0x500a <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    504c:	8f 89       	ldd	r24, Y+23	; 0x17
    504e:	98 8d       	ldd	r25, Y+24	; 0x18
    5050:	0e 94 a4 33 	call	0x6748	; 0x6748 <strlen>
    5054:	9c 01       	movw	r18, r24
    5056:	89 81       	ldd	r24, Y+1	; 0x01
    5058:	9a 81       	ldd	r25, Y+2	; 0x02
    505a:	82 0f       	add	r24, r18
    505c:	93 1f       	adc	r25, r19
    505e:	89 83       	std	Y+1, r24	; 0x01
    5060:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5062:	2f c1       	rjmp	.+606    	; 0x52c2 <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    5064:	8b ad       	ldd	r24, Y+59	; 0x3b
    5066:	9c ad       	ldd	r25, Y+60	; 0x3c
    5068:	9c 01       	movw	r18, r24
    506a:	2e 5f       	subi	r18, 0xFE	; 254
    506c:	3f 4f       	sbci	r19, 0xFF	; 255
    506e:	2b af       	std	Y+59, r18	; 0x3b
    5070:	3c af       	std	Y+60, r19	; 0x3c
    5072:	fc 01       	movw	r30, r24
    5074:	80 81       	ld	r24, Z
    5076:	91 81       	ldd	r25, Z+1	; 0x01
    5078:	89 8f       	std	Y+25, r24	; 0x19
    507a:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    507c:	89 8d       	ldd	r24, Y+25	; 0x19
    507e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5080:	4a e0       	ldi	r20, 0x0A	; 10
    5082:	50 e0       	ldi	r21, 0x00	; 0
    5084:	6a ed       	ldi	r22, 0xDA	; 218
    5086:	7c e2       	ldi	r23, 0x2C	; 44
    5088:	0e 94 b8 33 	call	0x6770	; 0x6770 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    508c:	19 86       	std	Y+9, r1	; 0x09
    508e:	1a 86       	std	Y+10, r1	; 0x0a
    5090:	15 c0       	rjmp	.+42     	; 0x50bc <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    5092:	29 81       	ldd	r18, Y+1	; 0x01
    5094:	3a 81       	ldd	r19, Y+2	; 0x02
    5096:	89 85       	ldd	r24, Y+9	; 0x09
    5098:	9a 85       	ldd	r25, Y+10	; 0x0a
    509a:	82 0f       	add	r24, r18
    509c:	93 1f       	adc	r25, r19
    509e:	29 85       	ldd	r18, Y+9	; 0x09
    50a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    50a2:	26 52       	subi	r18, 0x26	; 38
    50a4:	33 4d       	sbci	r19, 0xD3	; 211
    50a6:	f9 01       	movw	r30, r18
    50a8:	20 81       	ld	r18, Z
    50aa:	82 51       	subi	r24, 0x12	; 18
    50ac:	93 4d       	sbci	r25, 0xD3	; 211
    50ae:	fc 01       	movw	r30, r24
    50b0:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    50b2:	89 85       	ldd	r24, Y+9	; 0x09
    50b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    50b6:	01 96       	adiw	r24, 0x01	; 1
    50b8:	89 87       	std	Y+9, r24	; 0x09
    50ba:	9a 87       	std	Y+10, r25	; 0x0a
    50bc:	8a ed       	ldi	r24, 0xDA	; 218
    50be:	9c e2       	ldi	r25, 0x2C	; 44
    50c0:	0e 94 a4 33 	call	0x6748	; 0x6748 <strlen>
    50c4:	9c 01       	movw	r18, r24
    50c6:	89 85       	ldd	r24, Y+9	; 0x09
    50c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    50ca:	82 17       	cp	r24, r18
    50cc:	93 07       	cpc	r25, r19
    50ce:	08 f3       	brcs	.-62     	; 0x5092 <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    50d0:	8a ed       	ldi	r24, 0xDA	; 218
    50d2:	9c e2       	ldi	r25, 0x2C	; 44
    50d4:	0e 94 a4 33 	call	0x6748	; 0x6748 <strlen>
    50d8:	9c 01       	movw	r18, r24
    50da:	89 81       	ldd	r24, Y+1	; 0x01
    50dc:	9a 81       	ldd	r25, Y+2	; 0x02
    50de:	82 0f       	add	r24, r18
    50e0:	93 1f       	adc	r25, r19
    50e2:	89 83       	std	Y+1, r24	; 0x01
    50e4:	9a 83       	std	Y+2, r25	; 0x02
				break;
    50e6:	ed c0       	rjmp	.+474    	; 0x52c2 <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    50e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    50ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    50ec:	9c 01       	movw	r18, r24
    50ee:	2e 5f       	subi	r18, 0xFE	; 254
    50f0:	3f 4f       	sbci	r19, 0xFF	; 255
    50f2:	2b af       	std	Y+59, r18	; 0x3b
    50f4:	3c af       	std	Y+60, r19	; 0x3c
    50f6:	fc 01       	movw	r30, r24
    50f8:	80 81       	ld	r24, Z
    50fa:	91 81       	ldd	r25, Z+1	; 0x01
    50fc:	89 8f       	std	Y+25, r24	; 0x19
    50fe:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    5100:	89 8d       	ldd	r24, Y+25	; 0x19
    5102:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5104:	40 e1       	ldi	r20, 0x10	; 16
    5106:	50 e0       	ldi	r21, 0x00	; 0
    5108:	6a ed       	ldi	r22, 0xDA	; 218
    510a:	7c e2       	ldi	r23, 0x2C	; 44
    510c:	0e 94 b8 33 	call	0x6770	; 0x6770 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    5110:	1b 86       	std	Y+11, r1	; 0x0b
    5112:	1c 86       	std	Y+12, r1	; 0x0c
    5114:	15 c0       	rjmp	.+42     	; 0x5140 <display_vprintf+0x268>
					str[length+i] = buffer[i];
    5116:	29 81       	ldd	r18, Y+1	; 0x01
    5118:	3a 81       	ldd	r19, Y+2	; 0x02
    511a:	8b 85       	ldd	r24, Y+11	; 0x0b
    511c:	9c 85       	ldd	r25, Y+12	; 0x0c
    511e:	82 0f       	add	r24, r18
    5120:	93 1f       	adc	r25, r19
    5122:	2b 85       	ldd	r18, Y+11	; 0x0b
    5124:	3c 85       	ldd	r19, Y+12	; 0x0c
    5126:	26 52       	subi	r18, 0x26	; 38
    5128:	33 4d       	sbci	r19, 0xD3	; 211
    512a:	f9 01       	movw	r30, r18
    512c:	20 81       	ld	r18, Z
    512e:	82 51       	subi	r24, 0x12	; 18
    5130:	93 4d       	sbci	r25, 0xD3	; 211
    5132:	fc 01       	movw	r30, r24
    5134:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    5136:	8b 85       	ldd	r24, Y+11	; 0x0b
    5138:	9c 85       	ldd	r25, Y+12	; 0x0c
    513a:	01 96       	adiw	r24, 0x01	; 1
    513c:	8b 87       	std	Y+11, r24	; 0x0b
    513e:	9c 87       	std	Y+12, r25	; 0x0c
    5140:	8a ed       	ldi	r24, 0xDA	; 218
    5142:	9c e2       	ldi	r25, 0x2C	; 44
    5144:	0e 94 a4 33 	call	0x6748	; 0x6748 <strlen>
    5148:	9c 01       	movw	r18, r24
    514a:	8b 85       	ldd	r24, Y+11	; 0x0b
    514c:	9c 85       	ldd	r25, Y+12	; 0x0c
    514e:	82 17       	cp	r24, r18
    5150:	93 07       	cpc	r25, r19
    5152:	08 f3       	brcs	.-62     	; 0x5116 <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    5154:	8a ed       	ldi	r24, 0xDA	; 218
    5156:	9c e2       	ldi	r25, 0x2C	; 44
    5158:	0e 94 a4 33 	call	0x6748	; 0x6748 <strlen>
    515c:	9c 01       	movw	r18, r24
    515e:	89 81       	ldd	r24, Y+1	; 0x01
    5160:	9a 81       	ldd	r25, Y+2	; 0x02
    5162:	82 0f       	add	r24, r18
    5164:	93 1f       	adc	r25, r19
    5166:	89 83       	std	Y+1, r24	; 0x01
    5168:	9a 83       	std	Y+2, r25	; 0x02
				break;
    516a:	ab c0       	rjmp	.+342    	; 0x52c2 <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    516c:	8b ad       	ldd	r24, Y+59	; 0x3b
    516e:	9c ad       	ldd	r25, Y+60	; 0x3c
    5170:	9c 01       	movw	r18, r24
    5172:	2c 5f       	subi	r18, 0xFC	; 252
    5174:	3f 4f       	sbci	r19, 0xFF	; 255
    5176:	2b af       	std	Y+59, r18	; 0x3b
    5178:	3c af       	std	Y+60, r19	; 0x3c
    517a:	fc 01       	movw	r30, r24
    517c:	80 81       	ld	r24, Z
    517e:	91 81       	ldd	r25, Z+1	; 0x01
    5180:	a2 81       	ldd	r26, Z+2	; 0x02
    5182:	b3 81       	ldd	r27, Z+3	; 0x03
    5184:	8b 8f       	std	Y+27, r24	; 0x1b
    5186:	9c 8f       	std	Y+28, r25	; 0x1c
    5188:	ad 8f       	std	Y+29, r26	; 0x1d
    518a:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    518c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    518e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5190:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5192:	be 8d       	ldd	r27, Y+30	; 0x1e
    5194:	ac 01       	movw	r20, r24
    5196:	bd 01       	movw	r22, r26
    5198:	8a ed       	ldi	r24, 0xDA	; 218
    519a:	9c e2       	ldi	r25, 0x2C	; 44
    519c:	0e 94 3b 2a 	call	0x5476	; 0x5476 <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    51a0:	1d 86       	std	Y+13, r1	; 0x0d
    51a2:	1e 86       	std	Y+14, r1	; 0x0e
    51a4:	15 c0       	rjmp	.+42     	; 0x51d0 <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    51a6:	29 81       	ldd	r18, Y+1	; 0x01
    51a8:	3a 81       	ldd	r19, Y+2	; 0x02
    51aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    51ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    51ae:	82 0f       	add	r24, r18
    51b0:	93 1f       	adc	r25, r19
    51b2:	2d 85       	ldd	r18, Y+13	; 0x0d
    51b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    51b6:	26 52       	subi	r18, 0x26	; 38
    51b8:	33 4d       	sbci	r19, 0xD3	; 211
    51ba:	f9 01       	movw	r30, r18
    51bc:	20 81       	ld	r18, Z
    51be:	82 51       	subi	r24, 0x12	; 18
    51c0:	93 4d       	sbci	r25, 0xD3	; 211
    51c2:	fc 01       	movw	r30, r24
    51c4:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    51c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    51c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    51ca:	01 96       	adiw	r24, 0x01	; 1
    51cc:	8d 87       	std	Y+13, r24	; 0x0d
    51ce:	9e 87       	std	Y+14, r25	; 0x0e
    51d0:	8a ed       	ldi	r24, 0xDA	; 218
    51d2:	9c e2       	ldi	r25, 0x2C	; 44
    51d4:	0e 94 a4 33 	call	0x6748	; 0x6748 <strlen>
    51d8:	9c 01       	movw	r18, r24
    51da:	8d 85       	ldd	r24, Y+13	; 0x0d
    51dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    51de:	82 17       	cp	r24, r18
    51e0:	93 07       	cpc	r25, r19
    51e2:	08 f3       	brcs	.-62     	; 0x51a6 <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    51e4:	8a ed       	ldi	r24, 0xDA	; 218
    51e6:	9c e2       	ldi	r25, 0x2C	; 44
    51e8:	0e 94 a4 33 	call	0x6748	; 0x6748 <strlen>
    51ec:	9c 01       	movw	r18, r24
    51ee:	89 81       	ldd	r24, Y+1	; 0x01
    51f0:	9a 81       	ldd	r25, Y+2	; 0x02
    51f2:	82 0f       	add	r24, r18
    51f4:	93 1f       	adc	r25, r19
    51f6:	89 83       	std	Y+1, r24	; 0x01
    51f8:	9a 83       	std	Y+2, r25	; 0x02
				break;
    51fa:	63 c0       	rjmp	.+198    	; 0x52c2 <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    51fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    51fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    5200:	9c 01       	movw	r18, r24
    5202:	2c 5f       	subi	r18, 0xFC	; 252
    5204:	3f 4f       	sbci	r19, 0xFF	; 255
    5206:	2b af       	std	Y+59, r18	; 0x3b
    5208:	3c af       	std	Y+60, r19	; 0x3c
    520a:	fc 01       	movw	r30, r24
    520c:	80 81       	ld	r24, Z
    520e:	91 81       	ldd	r25, Z+1	; 0x01
    5210:	a2 81       	ldd	r26, Z+2	; 0x02
    5212:	b3 81       	ldd	r27, Z+3	; 0x03
    5214:	8b 8f       	std	Y+27, r24	; 0x1b
    5216:	9c 8f       	std	Y+28, r25	; 0x1c
    5218:	ad 8f       	std	Y+29, r26	; 0x1d
    521a:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    521c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    521e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5220:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5222:	be 8d       	ldd	r27, Y+30	; 0x1e
    5224:	ac 01       	movw	r20, r24
    5226:	bd 01       	movw	r22, r26
    5228:	8a ed       	ldi	r24, 0xDA	; 218
    522a:	9c e2       	ldi	r25, 0x2C	; 44
    522c:	0e 94 8a 2b 	call	0x5714	; 0x5714 <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    5230:	1f 86       	std	Y+15, r1	; 0x0f
    5232:	18 8a       	std	Y+16, r1	; 0x10
    5234:	15 c0       	rjmp	.+42     	; 0x5260 <display_vprintf+0x388>
					str[length+i] = buffer[i];
    5236:	29 81       	ldd	r18, Y+1	; 0x01
    5238:	3a 81       	ldd	r19, Y+2	; 0x02
    523a:	8f 85       	ldd	r24, Y+15	; 0x0f
    523c:	98 89       	ldd	r25, Y+16	; 0x10
    523e:	82 0f       	add	r24, r18
    5240:	93 1f       	adc	r25, r19
    5242:	2f 85       	ldd	r18, Y+15	; 0x0f
    5244:	38 89       	ldd	r19, Y+16	; 0x10
    5246:	26 52       	subi	r18, 0x26	; 38
    5248:	33 4d       	sbci	r19, 0xD3	; 211
    524a:	f9 01       	movw	r30, r18
    524c:	20 81       	ld	r18, Z
    524e:	82 51       	subi	r24, 0x12	; 18
    5250:	93 4d       	sbci	r25, 0xD3	; 211
    5252:	fc 01       	movw	r30, r24
    5254:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    5256:	8f 85       	ldd	r24, Y+15	; 0x0f
    5258:	98 89       	ldd	r25, Y+16	; 0x10
    525a:	01 96       	adiw	r24, 0x01	; 1
    525c:	8f 87       	std	Y+15, r24	; 0x0f
    525e:	98 8b       	std	Y+16, r25	; 0x10
    5260:	8a ed       	ldi	r24, 0xDA	; 218
    5262:	9c e2       	ldi	r25, 0x2C	; 44
    5264:	0e 94 a4 33 	call	0x6748	; 0x6748 <strlen>
    5268:	9c 01       	movw	r18, r24
    526a:	8f 85       	ldd	r24, Y+15	; 0x0f
    526c:	98 89       	ldd	r25, Y+16	; 0x10
    526e:	82 17       	cp	r24, r18
    5270:	93 07       	cpc	r25, r19
    5272:	08 f3       	brcs	.-62     	; 0x5236 <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    5274:	8a ed       	ldi	r24, 0xDA	; 218
    5276:	9c e2       	ldi	r25, 0x2C	; 44
    5278:	0e 94 a4 33 	call	0x6748	; 0x6748 <strlen>
    527c:	9c 01       	movw	r18, r24
    527e:	89 81       	ldd	r24, Y+1	; 0x01
    5280:	9a 81       	ldd	r25, Y+2	; 0x02
    5282:	82 0f       	add	r24, r18
    5284:	93 1f       	adc	r25, r19
    5286:	89 83       	std	Y+1, r24	; 0x01
    5288:	9a 83       	std	Y+2, r25	; 0x02
				break;
    528a:	00 00       	nop
    528c:	1a c0       	rjmp	.+52     	; 0x52c2 <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    528e:	89 81       	ldd	r24, Y+1	; 0x01
    5290:	9a 81       	ldd	r25, Y+2	; 0x02
    5292:	82 51       	subi	r24, 0x12	; 18
    5294:	93 4d       	sbci	r25, 0xD3	; 211
    5296:	2d 89       	ldd	r18, Y+21	; 0x15
    5298:	fc 01       	movw	r30, r24
    529a:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    529c:	89 81       	ldd	r24, Y+1	; 0x01
    529e:	9a 81       	ldd	r25, Y+2	; 0x02
    52a0:	82 51       	subi	r24, 0x12	; 18
    52a2:	93 4d       	sbci	r25, 0xD3	; 211
    52a4:	fc 01       	movw	r30, r24
    52a6:	80 81       	ld	r24, Z
    52a8:	8a 30       	cpi	r24, 0x0A	; 10
    52aa:	31 f4       	brne	.+12     	; 0x52b8 <display_vprintf+0x3e0>
				str[length] = '\0';				
    52ac:	89 81       	ldd	r24, Y+1	; 0x01
    52ae:	9a 81       	ldd	r25, Y+2	; 0x02
    52b0:	82 51       	subi	r24, 0x12	; 18
    52b2:	93 4d       	sbci	r25, 0xD3	; 211
    52b4:	fc 01       	movw	r30, r24
    52b6:	10 82       	st	Z, r1
			}
			length++;
    52b8:	89 81       	ldd	r24, Y+1	; 0x01
    52ba:	9a 81       	ldd	r25, Y+2	; 0x02
    52bc:	01 96       	adiw	r24, 0x01	; 1
    52be:	89 83       	std	Y+1, r24	; 0x01
    52c0:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    52c2:	89 ad       	ldd	r24, Y+57	; 0x39
    52c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    52c6:	9c 01       	movw	r18, r24
    52c8:	2f 5f       	subi	r18, 0xFF	; 255
    52ca:	3f 4f       	sbci	r19, 0xFF	; 255
    52cc:	29 af       	std	Y+57, r18	; 0x39
    52ce:	3a af       	std	Y+58, r19	; 0x3a
    52d0:	fc 01       	movw	r30, r24
    52d2:	80 81       	ld	r24, Z
    52d4:	8d 8b       	std	Y+21, r24	; 0x15
    52d6:	8d 89       	ldd	r24, Y+21	; 0x15
    52d8:	88 23       	and	r24, r24
    52da:	09 f0       	breq	.+2      	; 0x52de <display_vprintf+0x406>
    52dc:	34 ce       	rjmp	.-920    	; 0x4f46 <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    52de:	29 81       	ldd	r18, Y+1	; 0x01
    52e0:	3a 81       	ldd	r19, Y+2	; 0x02
    52e2:	8f a9       	ldd	r24, Y+55	; 0x37
    52e4:	98 ad       	ldd	r25, Y+56	; 0x38
    52e6:	82 0f       	add	r24, r18
    52e8:	93 1f       	adc	r25, r19
    52ea:	44 97       	sbiw	r24, 0x14	; 20
    52ec:	54 f0       	brlt	.+20     	; 0x5302 <display_vprintf+0x42a>
		length = 20-pos;
    52ee:	24 e1       	ldi	r18, 0x14	; 20
    52f0:	30 e0       	ldi	r19, 0x00	; 0
    52f2:	8f a9       	ldd	r24, Y+55	; 0x37
    52f4:	98 ad       	ldd	r25, Y+56	; 0x38
    52f6:	a9 01       	movw	r20, r18
    52f8:	48 1b       	sub	r20, r24
    52fa:	59 0b       	sbc	r21, r25
    52fc:	ca 01       	movw	r24, r20
    52fe:	89 83       	std	Y+1, r24	; 0x01
    5300:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    5302:	19 8a       	std	Y+17, r1	; 0x11
    5304:	1a 8a       	std	Y+18, r1	; 0x12
    5306:	0e c0       	rjmp	.+28     	; 0x5324 <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    5308:	9e 01       	movw	r18, r28
    530a:	2f 5d       	subi	r18, 0xDF	; 223
    530c:	3f 4f       	sbci	r19, 0xFF	; 255
    530e:	89 89       	ldd	r24, Y+17	; 0x11
    5310:	9a 89       	ldd	r25, Y+18	; 0x12
    5312:	82 0f       	add	r24, r18
    5314:	93 1f       	adc	r25, r19
    5316:	fc 01       	movw	r30, r24
    5318:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    531a:	89 89       	ldd	r24, Y+17	; 0x11
    531c:	9a 89       	ldd	r25, Y+18	; 0x12
    531e:	01 96       	adiw	r24, 0x01	; 1
    5320:	89 8b       	std	Y+17, r24	; 0x11
    5322:	9a 8b       	std	Y+18, r25	; 0x12
    5324:	89 89       	ldd	r24, Y+17	; 0x11
    5326:	9a 89       	ldd	r25, Y+18	; 0x12
    5328:	44 97       	sbiw	r24, 0x14	; 20
    532a:	74 f3       	brlt	.-36     	; 0x5308 <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    532c:	8d a9       	ldd	r24, Y+53	; 0x35
    532e:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    5330:	8f a9       	ldd	r24, Y+55	; 0x37
    5332:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    5334:	1b 8a       	std	Y+19, r1	; 0x13
    5336:	1c 8a       	std	Y+20, r1	; 0x14
    5338:	14 c0       	rjmp	.+40     	; 0x5362 <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    533a:	8b 89       	ldd	r24, Y+19	; 0x13
    533c:	9c 89       	ldd	r25, Y+20	; 0x14
    533e:	82 51       	subi	r24, 0x12	; 18
    5340:	93 4d       	sbci	r25, 0xD3	; 211
    5342:	fc 01       	movw	r30, r24
    5344:	40 81       	ld	r20, Z
    5346:	9e 01       	movw	r18, r28
    5348:	2f 5d       	subi	r18, 0xDF	; 223
    534a:	3f 4f       	sbci	r19, 0xFF	; 255
    534c:	8b 89       	ldd	r24, Y+19	; 0x13
    534e:	9c 89       	ldd	r25, Y+20	; 0x14
    5350:	82 0f       	add	r24, r18
    5352:	93 1f       	adc	r25, r19
    5354:	fc 01       	movw	r30, r24
    5356:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    5358:	8b 89       	ldd	r24, Y+19	; 0x13
    535a:	9c 89       	ldd	r25, Y+20	; 0x14
    535c:	01 96       	adiw	r24, 0x01	; 1
    535e:	8b 8b       	std	Y+19, r24	; 0x13
    5360:	9c 8b       	std	Y+20, r25	; 0x14
    5362:	2b 89       	ldd	r18, Y+19	; 0x13
    5364:	3c 89       	ldd	r19, Y+20	; 0x14
    5366:	89 81       	ldd	r24, Y+1	; 0x01
    5368:	9a 81       	ldd	r25, Y+2	; 0x02
    536a:	28 17       	cp	r18, r24
    536c:	39 07       	cpc	r19, r25
    536e:	2c f3       	brlt	.-54     	; 0x533a <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    5370:	80 91 37 2d 	lds	r24, 0x2D37	; 0x802d37 <displayLineQueue>
    5374:	90 91 38 2d 	lds	r25, 0x2D38	; 0x802d38 <displayLineQueue+0x1>
    5378:	be 01       	movw	r22, r28
    537a:	61 5e       	subi	r22, 0xE1	; 225
    537c:	7f 4f       	sbci	r23, 0xFF	; 255
    537e:	00 e0       	ldi	r16, 0x00	; 0
    5380:	2f ef       	ldi	r18, 0xFF	; 255
    5382:	3f ef       	ldi	r19, 0xFF	; 255
    5384:	a9 01       	movw	r20, r18
    5386:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xQueueGenericSend>
	
	
	return length;
    538a:	89 81       	ldd	r24, Y+1	; 0x01
    538c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    538e:	ec 96       	adiw	r28, 0x3c	; 60
    5390:	cd bf       	out	0x3d, r28	; 61
    5392:	de bf       	out	0x3e, r29	; 62
    5394:	df 91       	pop	r29
    5396:	cf 91       	pop	r28
    5398:	0f 91       	pop	r16
    539a:	08 95       	ret

0000539c <normalize>:

static int normalize(double *val) {
    539c:	cf 93       	push	r28
    539e:	df 93       	push	r29
    53a0:	cd b7       	in	r28, 0x3d	; 61
    53a2:	de b7       	in	r29, 0x3e	; 62
    53a4:	28 97       	sbiw	r28, 0x08	; 8
    53a6:	cd bf       	out	0x3d, r28	; 61
    53a8:	de bf       	out	0x3e, r29	; 62
    53aa:	8f 83       	std	Y+7, r24	; 0x07
    53ac:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    53ae:	19 82       	std	Y+1, r1	; 0x01
    53b0:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    53b2:	8f 81       	ldd	r24, Y+7	; 0x07
    53b4:	98 85       	ldd	r25, Y+8	; 0x08
    53b6:	fc 01       	movw	r30, r24
    53b8:	80 81       	ld	r24, Z
    53ba:	91 81       	ldd	r25, Z+1	; 0x01
    53bc:	a2 81       	ldd	r26, Z+2	; 0x02
    53be:	b3 81       	ldd	r27, Z+3	; 0x03
    53c0:	8b 83       	std	Y+3, r24	; 0x03
    53c2:	9c 83       	std	Y+4, r25	; 0x04
    53c4:	ad 83       	std	Y+5, r26	; 0x05
    53c6:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    53c8:	15 c0       	rjmp	.+42     	; 0x53f4 <normalize+0x58>
        value /= 10.0;
    53ca:	20 e0       	ldi	r18, 0x00	; 0
    53cc:	30 e0       	ldi	r19, 0x00	; 0
    53ce:	40 e2       	ldi	r20, 0x20	; 32
    53d0:	51 e4       	ldi	r21, 0x41	; 65
    53d2:	6b 81       	ldd	r22, Y+3	; 0x03
    53d4:	7c 81       	ldd	r23, Y+4	; 0x04
    53d6:	8d 81       	ldd	r24, Y+5	; 0x05
    53d8:	9e 81       	ldd	r25, Y+6	; 0x06
    53da:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <__divsf3>
    53de:	dc 01       	movw	r26, r24
    53e0:	cb 01       	movw	r24, r22
    53e2:	8b 83       	std	Y+3, r24	; 0x03
    53e4:	9c 83       	std	Y+4, r25	; 0x04
    53e6:	ad 83       	std	Y+5, r26	; 0x05
    53e8:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    53ea:	89 81       	ldd	r24, Y+1	; 0x01
    53ec:	9a 81       	ldd	r25, Y+2	; 0x02
    53ee:	01 96       	adiw	r24, 0x01	; 1
    53f0:	89 83       	std	Y+1, r24	; 0x01
    53f2:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    53f4:	20 e0       	ldi	r18, 0x00	; 0
    53f6:	30 e0       	ldi	r19, 0x00	; 0
    53f8:	40 e8       	ldi	r20, 0x80	; 128
    53fa:	5f e3       	ldi	r21, 0x3F	; 63
    53fc:	6b 81       	ldd	r22, Y+3	; 0x03
    53fe:	7c 81       	ldd	r23, Y+4	; 0x04
    5400:	8d 81       	ldd	r24, Y+5	; 0x05
    5402:	9e 81       	ldd	r25, Y+6	; 0x06
    5404:	0e 94 77 2e 	call	0x5cee	; 0x5cee <__gesf2>
    5408:	88 23       	and	r24, r24
    540a:	fc f6       	brge	.-66     	; 0x53ca <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    540c:	15 c0       	rjmp	.+42     	; 0x5438 <normalize+0x9c>
        value *= 10.0;
    540e:	20 e0       	ldi	r18, 0x00	; 0
    5410:	30 e0       	ldi	r19, 0x00	; 0
    5412:	40 e2       	ldi	r20, 0x20	; 32
    5414:	51 e4       	ldi	r21, 0x41	; 65
    5416:	6b 81       	ldd	r22, Y+3	; 0x03
    5418:	7c 81       	ldd	r23, Y+4	; 0x04
    541a:	8d 81       	ldd	r24, Y+5	; 0x05
    541c:	9e 81       	ldd	r25, Y+6	; 0x06
    541e:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__mulsf3>
    5422:	dc 01       	movw	r26, r24
    5424:	cb 01       	movw	r24, r22
    5426:	8b 83       	std	Y+3, r24	; 0x03
    5428:	9c 83       	std	Y+4, r25	; 0x04
    542a:	ad 83       	std	Y+5, r26	; 0x05
    542c:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    542e:	89 81       	ldd	r24, Y+1	; 0x01
    5430:	9a 81       	ldd	r25, Y+2	; 0x02
    5432:	01 97       	sbiw	r24, 0x01	; 1
    5434:	89 83       	std	Y+1, r24	; 0x01
    5436:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    5438:	2d ec       	ldi	r18, 0xCD	; 205
    543a:	3c ec       	ldi	r19, 0xCC	; 204
    543c:	4c ec       	ldi	r20, 0xCC	; 204
    543e:	5d e3       	ldi	r21, 0x3D	; 61
    5440:	6b 81       	ldd	r22, Y+3	; 0x03
    5442:	7c 81       	ldd	r23, Y+4	; 0x04
    5444:	8d 81       	ldd	r24, Y+5	; 0x05
    5446:	9e 81       	ldd	r25, Y+6	; 0x06
    5448:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__cmpsf2>
    544c:	88 23       	and	r24, r24
    544e:	fc f2       	brlt	.-66     	; 0x540e <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    5450:	2f 81       	ldd	r18, Y+7	; 0x07
    5452:	38 85       	ldd	r19, Y+8	; 0x08
    5454:	8b 81       	ldd	r24, Y+3	; 0x03
    5456:	9c 81       	ldd	r25, Y+4	; 0x04
    5458:	ad 81       	ldd	r26, Y+5	; 0x05
    545a:	be 81       	ldd	r27, Y+6	; 0x06
    545c:	f9 01       	movw	r30, r18
    545e:	80 83       	st	Z, r24
    5460:	91 83       	std	Z+1, r25	; 0x01
    5462:	a2 83       	std	Z+2, r26	; 0x02
    5464:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    5466:	89 81       	ldd	r24, Y+1	; 0x01
    5468:	9a 81       	ldd	r25, Y+2	; 0x02
}
    546a:	28 96       	adiw	r28, 0x08	; 8
    546c:	cd bf       	out	0x3d, r28	; 61
    546e:	de bf       	out	0x3e, r29	; 62
    5470:	df 91       	pop	r29
    5472:	cf 91       	pop	r28
    5474:	08 95       	ret

00005476 <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    5476:	cf 92       	push	r12
    5478:	df 92       	push	r13
    547a:	ef 92       	push	r14
    547c:	ff 92       	push	r15
    547e:	cf 93       	push	r28
    5480:	df 93       	push	r29
    5482:	cd b7       	in	r28, 0x3d	; 61
    5484:	de b7       	in	r29, 0x3e	; 62
    5486:	2e 97       	sbiw	r28, 0x0e	; 14
    5488:	cd bf       	out	0x3d, r28	; 61
    548a:	de bf       	out	0x3e, r29	; 62
    548c:	89 87       	std	Y+9, r24	; 0x09
    548e:	9a 87       	std	Y+10, r25	; 0x0a
    5490:	4b 87       	std	Y+11, r20	; 0x0b
    5492:	5c 87       	std	Y+12, r21	; 0x0c
    5494:	6d 87       	std	Y+13, r22	; 0x0d
    5496:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    5498:	19 82       	std	Y+1, r1	; 0x01
    549a:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    549c:	1b 82       	std	Y+3, r1	; 0x03
    549e:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    54a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    54a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    54a4:	ad 85       	ldd	r26, Y+13	; 0x0d
    54a6:	be 85       	ldd	r27, Y+14	; 0x0e
    54a8:	20 e0       	ldi	r18, 0x00	; 0
    54aa:	30 e0       	ldi	r19, 0x00	; 0
    54ac:	a9 01       	movw	r20, r18
    54ae:	bc 01       	movw	r22, r24
    54b0:	cd 01       	movw	r24, r26
    54b2:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__cmpsf2>
    54b6:	88 23       	and	r24, r24
    54b8:	59 f4       	brne	.+22     	; 0x54d0 <ftoa_fixed+0x5a>
        buffer[0] = '0';
    54ba:	89 85       	ldd	r24, Y+9	; 0x09
    54bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    54be:	20 e3       	ldi	r18, 0x30	; 48
    54c0:	fc 01       	movw	r30, r24
    54c2:	20 83       	st	Z, r18
        buffer[1] = '\0';
    54c4:	89 85       	ldd	r24, Y+9	; 0x09
    54c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    54c8:	01 96       	adiw	r24, 0x01	; 1
    54ca:	fc 01       	movw	r30, r24
    54cc:	10 82       	st	Z, r1
        return;
    54ce:	18 c1       	rjmp	.+560    	; 0x5700 <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    54d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    54d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    54d4:	ad 85       	ldd	r26, Y+13	; 0x0d
    54d6:	be 85       	ldd	r27, Y+14	; 0x0e
    54d8:	20 e0       	ldi	r18, 0x00	; 0
    54da:	30 e0       	ldi	r19, 0x00	; 0
    54dc:	a9 01       	movw	r20, r18
    54de:	bc 01       	movw	r22, r24
    54e0:	cd 01       	movw	r24, r26
    54e2:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__cmpsf2>
    54e6:	88 23       	and	r24, r24
    54e8:	9c f4       	brge	.+38     	; 0x5510 <ftoa_fixed+0x9a>
        *buffer++ = '-';
    54ea:	89 85       	ldd	r24, Y+9	; 0x09
    54ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    54ee:	9c 01       	movw	r18, r24
    54f0:	2f 5f       	subi	r18, 0xFF	; 255
    54f2:	3f 4f       	sbci	r19, 0xFF	; 255
    54f4:	29 87       	std	Y+9, r18	; 0x09
    54f6:	3a 87       	std	Y+10, r19	; 0x0a
    54f8:	2d e2       	ldi	r18, 0x2D	; 45
    54fa:	fc 01       	movw	r30, r24
    54fc:	20 83       	st	Z, r18
        value = -value;
    54fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    5500:	9c 85       	ldd	r25, Y+12	; 0x0c
    5502:	ad 85       	ldd	r26, Y+13	; 0x0d
    5504:	be 85       	ldd	r27, Y+14	; 0x0e
    5506:	b0 58       	subi	r27, 0x80	; 128
    5508:	8b 87       	std	Y+11, r24	; 0x0b
    550a:	9c 87       	std	Y+12, r25	; 0x0c
    550c:	ad 87       	std	Y+13, r26	; 0x0d
    550e:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    5510:	ce 01       	movw	r24, r28
    5512:	0b 96       	adiw	r24, 0x0b	; 11
    5514:	0e 94 ce 29 	call	0x539c	; 0x539c <normalize>
    5518:	89 83       	std	Y+1, r24	; 0x01
    551a:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    551c:	53 c0       	rjmp	.+166    	; 0x55c4 <ftoa_fixed+0x14e>
        int digit = value * 10;
    551e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5520:	9c 85       	ldd	r25, Y+12	; 0x0c
    5522:	ad 85       	ldd	r26, Y+13	; 0x0d
    5524:	be 85       	ldd	r27, Y+14	; 0x0e
    5526:	20 e0       	ldi	r18, 0x00	; 0
    5528:	30 e0       	ldi	r19, 0x00	; 0
    552a:	40 e2       	ldi	r20, 0x20	; 32
    552c:	51 e4       	ldi	r21, 0x41	; 65
    552e:	bc 01       	movw	r22, r24
    5530:	cd 01       	movw	r24, r26
    5532:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__mulsf3>
    5536:	dc 01       	movw	r26, r24
    5538:	cb 01       	movw	r24, r22
    553a:	bc 01       	movw	r22, r24
    553c:	cd 01       	movw	r24, r26
    553e:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__fixsfsi>
    5542:	dc 01       	movw	r26, r24
    5544:	cb 01       	movw	r24, r22
    5546:	8d 83       	std	Y+5, r24	; 0x05
    5548:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    554a:	89 85       	ldd	r24, Y+9	; 0x09
    554c:	9a 85       	ldd	r25, Y+10	; 0x0a
    554e:	9c 01       	movw	r18, r24
    5550:	2f 5f       	subi	r18, 0xFF	; 255
    5552:	3f 4f       	sbci	r19, 0xFF	; 255
    5554:	29 87       	std	Y+9, r18	; 0x09
    5556:	3a 87       	std	Y+10, r19	; 0x0a
    5558:	2d 81       	ldd	r18, Y+5	; 0x05
    555a:	20 5d       	subi	r18, 0xD0	; 208
    555c:	fc 01       	movw	r30, r24
    555e:	20 83       	st	Z, r18
        value = value * 10 - digit;
    5560:	8b 85       	ldd	r24, Y+11	; 0x0b
    5562:	9c 85       	ldd	r25, Y+12	; 0x0c
    5564:	ad 85       	ldd	r26, Y+13	; 0x0d
    5566:	be 85       	ldd	r27, Y+14	; 0x0e
    5568:	20 e0       	ldi	r18, 0x00	; 0
    556a:	30 e0       	ldi	r19, 0x00	; 0
    556c:	40 e2       	ldi	r20, 0x20	; 32
    556e:	51 e4       	ldi	r21, 0x41	; 65
    5570:	bc 01       	movw	r22, r24
    5572:	cd 01       	movw	r24, r26
    5574:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__mulsf3>
    5578:	dc 01       	movw	r26, r24
    557a:	cb 01       	movw	r24, r22
    557c:	6c 01       	movw	r12, r24
    557e:	7d 01       	movw	r14, r26
    5580:	8d 81       	ldd	r24, Y+5	; 0x05
    5582:	9e 81       	ldd	r25, Y+6	; 0x06
    5584:	09 2e       	mov	r0, r25
    5586:	00 0c       	add	r0, r0
    5588:	aa 0b       	sbc	r26, r26
    558a:	bb 0b       	sbc	r27, r27
    558c:	bc 01       	movw	r22, r24
    558e:	cd 01       	movw	r24, r26
    5590:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <__floatsisf>
    5594:	dc 01       	movw	r26, r24
    5596:	cb 01       	movw	r24, r22
    5598:	9c 01       	movw	r18, r24
    559a:	ad 01       	movw	r20, r26
    559c:	c7 01       	movw	r24, r14
    559e:	b6 01       	movw	r22, r12
    55a0:	0e 94 ab 2c 	call	0x5956	; 0x5956 <__subsf3>
    55a4:	dc 01       	movw	r26, r24
    55a6:	cb 01       	movw	r24, r22
    55a8:	8b 87       	std	Y+11, r24	; 0x0b
    55aa:	9c 87       	std	Y+12, r25	; 0x0c
    55ac:	ad 87       	std	Y+13, r26	; 0x0d
    55ae:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    55b0:	8b 81       	ldd	r24, Y+3	; 0x03
    55b2:	9c 81       	ldd	r25, Y+4	; 0x04
    55b4:	01 96       	adiw	r24, 0x01	; 1
    55b6:	8b 83       	std	Y+3, r24	; 0x03
    55b8:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    55ba:	89 81       	ldd	r24, Y+1	; 0x01
    55bc:	9a 81       	ldd	r25, Y+2	; 0x02
    55be:	01 97       	sbiw	r24, 0x01	; 1
    55c0:	89 83       	std	Y+1, r24	; 0x01
    55c2:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    55c4:	89 81       	ldd	r24, Y+1	; 0x01
    55c6:	9a 81       	ldd	r25, Y+2	; 0x02
    55c8:	18 16       	cp	r1, r24
    55ca:	19 06       	cpc	r1, r25
    55cc:	0c f4       	brge	.+2      	; 0x55d0 <ftoa_fixed+0x15a>
    55ce:	a7 cf       	rjmp	.-178    	; 0x551e <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    55d0:	8b 81       	ldd	r24, Y+3	; 0x03
    55d2:	9c 81       	ldd	r25, Y+4	; 0x04
    55d4:	89 2b       	or	r24, r25
    55d6:	51 f4       	brne	.+20     	; 0x55ec <ftoa_fixed+0x176>
        *buffer++ = '0';
    55d8:	89 85       	ldd	r24, Y+9	; 0x09
    55da:	9a 85       	ldd	r25, Y+10	; 0x0a
    55dc:	9c 01       	movw	r18, r24
    55de:	2f 5f       	subi	r18, 0xFF	; 255
    55e0:	3f 4f       	sbci	r19, 0xFF	; 255
    55e2:	29 87       	std	Y+9, r18	; 0x09
    55e4:	3a 87       	std	Y+10, r19	; 0x0a
    55e6:	20 e3       	ldi	r18, 0x30	; 48
    55e8:	fc 01       	movw	r30, r24
    55ea:	20 83       	st	Z, r18

    *buffer++ = '.';
    55ec:	89 85       	ldd	r24, Y+9	; 0x09
    55ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    55f0:	9c 01       	movw	r18, r24
    55f2:	2f 5f       	subi	r18, 0xFF	; 255
    55f4:	3f 4f       	sbci	r19, 0xFF	; 255
    55f6:	29 87       	std	Y+9, r18	; 0x09
    55f8:	3a 87       	std	Y+10, r19	; 0x0a
    55fa:	2e e2       	ldi	r18, 0x2E	; 46
    55fc:	fc 01       	movw	r30, r24
    55fe:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    5600:	14 c0       	rjmp	.+40     	; 0x562a <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    5602:	89 85       	ldd	r24, Y+9	; 0x09
    5604:	9a 85       	ldd	r25, Y+10	; 0x0a
    5606:	9c 01       	movw	r18, r24
    5608:	2f 5f       	subi	r18, 0xFF	; 255
    560a:	3f 4f       	sbci	r19, 0xFF	; 255
    560c:	29 87       	std	Y+9, r18	; 0x09
    560e:	3a 87       	std	Y+10, r19	; 0x0a
    5610:	20 e3       	ldi	r18, 0x30	; 48
    5612:	fc 01       	movw	r30, r24
    5614:	20 83       	st	Z, r18
        --exponent;
    5616:	89 81       	ldd	r24, Y+1	; 0x01
    5618:	9a 81       	ldd	r25, Y+2	; 0x02
    561a:	01 97       	sbiw	r24, 0x01	; 1
    561c:	89 83       	std	Y+1, r24	; 0x01
    561e:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    5620:	8b 81       	ldd	r24, Y+3	; 0x03
    5622:	9c 81       	ldd	r25, Y+4	; 0x04
    5624:	01 96       	adiw	r24, 0x01	; 1
    5626:	8b 83       	std	Y+3, r24	; 0x03
    5628:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    562a:	89 81       	ldd	r24, Y+1	; 0x01
    562c:	9a 81       	ldd	r25, Y+2	; 0x02
    562e:	99 23       	and	r25, r25
    5630:	0c f0       	brlt	.+2      	; 0x5634 <ftoa_fixed+0x1be>
    5632:	58 c0       	rjmp	.+176    	; 0x56e4 <ftoa_fixed+0x26e>
    5634:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <width.5062>
    5638:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <width.5062+0x1>
    563c:	2b 81       	ldd	r18, Y+3	; 0x03
    563e:	3c 81       	ldd	r19, Y+4	; 0x04
    5640:	28 17       	cp	r18, r24
    5642:	39 07       	cpc	r19, r25
    5644:	f4 f2       	brlt	.-68     	; 0x5602 <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    5646:	4e c0       	rjmp	.+156    	; 0x56e4 <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    5648:	8b 85       	ldd	r24, Y+11	; 0x0b
    564a:	9c 85       	ldd	r25, Y+12	; 0x0c
    564c:	ad 85       	ldd	r26, Y+13	; 0x0d
    564e:	be 85       	ldd	r27, Y+14	; 0x0e
    5650:	20 e0       	ldi	r18, 0x00	; 0
    5652:	30 e0       	ldi	r19, 0x00	; 0
    5654:	40 e2       	ldi	r20, 0x20	; 32
    5656:	51 e4       	ldi	r21, 0x41	; 65
    5658:	bc 01       	movw	r22, r24
    565a:	cd 01       	movw	r24, r26
    565c:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__mulsf3>
    5660:	dc 01       	movw	r26, r24
    5662:	cb 01       	movw	r24, r22
    5664:	bc 01       	movw	r22, r24
    5666:	cd 01       	movw	r24, r26
    5668:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__fixsfsi>
    566c:	dc 01       	movw	r26, r24
    566e:	cb 01       	movw	r24, r22
    5670:	8f 83       	std	Y+7, r24	; 0x07
    5672:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    5674:	89 85       	ldd	r24, Y+9	; 0x09
    5676:	9a 85       	ldd	r25, Y+10	; 0x0a
    5678:	9c 01       	movw	r18, r24
    567a:	2f 5f       	subi	r18, 0xFF	; 255
    567c:	3f 4f       	sbci	r19, 0xFF	; 255
    567e:	29 87       	std	Y+9, r18	; 0x09
    5680:	3a 87       	std	Y+10, r19	; 0x0a
    5682:	2f 81       	ldd	r18, Y+7	; 0x07
    5684:	20 5d       	subi	r18, 0xD0	; 208
    5686:	fc 01       	movw	r30, r24
    5688:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    568a:	8b 85       	ldd	r24, Y+11	; 0x0b
    568c:	9c 85       	ldd	r25, Y+12	; 0x0c
    568e:	ad 85       	ldd	r26, Y+13	; 0x0d
    5690:	be 85       	ldd	r27, Y+14	; 0x0e
    5692:	20 e0       	ldi	r18, 0x00	; 0
    5694:	30 e0       	ldi	r19, 0x00	; 0
    5696:	40 e2       	ldi	r20, 0x20	; 32
    5698:	51 e4       	ldi	r21, 0x41	; 65
    569a:	bc 01       	movw	r22, r24
    569c:	cd 01       	movw	r24, r26
    569e:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__mulsf3>
    56a2:	dc 01       	movw	r26, r24
    56a4:	cb 01       	movw	r24, r22
    56a6:	6c 01       	movw	r12, r24
    56a8:	7d 01       	movw	r14, r26
    56aa:	8f 81       	ldd	r24, Y+7	; 0x07
    56ac:	98 85       	ldd	r25, Y+8	; 0x08
    56ae:	09 2e       	mov	r0, r25
    56b0:	00 0c       	add	r0, r0
    56b2:	aa 0b       	sbc	r26, r26
    56b4:	bb 0b       	sbc	r27, r27
    56b6:	bc 01       	movw	r22, r24
    56b8:	cd 01       	movw	r24, r26
    56ba:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <__floatsisf>
    56be:	dc 01       	movw	r26, r24
    56c0:	cb 01       	movw	r24, r22
    56c2:	9c 01       	movw	r18, r24
    56c4:	ad 01       	movw	r20, r26
    56c6:	c7 01       	movw	r24, r14
    56c8:	b6 01       	movw	r22, r12
    56ca:	0e 94 ab 2c 	call	0x5956	; 0x5956 <__subsf3>
    56ce:	dc 01       	movw	r26, r24
    56d0:	cb 01       	movw	r24, r22
    56d2:	8b 87       	std	Y+11, r24	; 0x0b
    56d4:	9c 87       	std	Y+12, r25	; 0x0c
    56d6:	ad 87       	std	Y+13, r26	; 0x0d
    56d8:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    56da:	8b 81       	ldd	r24, Y+3	; 0x03
    56dc:	9c 81       	ldd	r25, Y+4	; 0x04
    56de:	01 96       	adiw	r24, 0x01	; 1
    56e0:	8b 83       	std	Y+3, r24	; 0x03
    56e2:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    56e4:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <width.5062>
    56e8:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <width.5062+0x1>
    56ec:	2b 81       	ldd	r18, Y+3	; 0x03
    56ee:	3c 81       	ldd	r19, Y+4	; 0x04
    56f0:	28 17       	cp	r18, r24
    56f2:	39 07       	cpc	r19, r25
    56f4:	0c f4       	brge	.+2      	; 0x56f8 <ftoa_fixed+0x282>
    56f6:	a8 cf       	rjmp	.-176    	; 0x5648 <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    56f8:	89 85       	ldd	r24, Y+9	; 0x09
    56fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    56fc:	fc 01       	movw	r30, r24
    56fe:	10 82       	st	Z, r1
}
    5700:	2e 96       	adiw	r28, 0x0e	; 14
    5702:	cd bf       	out	0x3d, r28	; 61
    5704:	de bf       	out	0x3e, r29	; 62
    5706:	df 91       	pop	r29
    5708:	cf 91       	pop	r28
    570a:	ff 90       	pop	r15
    570c:	ef 90       	pop	r14
    570e:	df 90       	pop	r13
    5710:	cf 90       	pop	r12
    5712:	08 95       	ret

00005714 <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    5714:	cf 92       	push	r12
    5716:	df 92       	push	r13
    5718:	ef 92       	push	r14
    571a:	ff 92       	push	r15
    571c:	cf 93       	push	r28
    571e:	df 93       	push	r29
    5720:	cd b7       	in	r28, 0x3d	; 61
    5722:	de b7       	in	r29, 0x3e	; 62
    5724:	2e 97       	sbiw	r28, 0x0e	; 14
    5726:	cd bf       	out	0x3d, r28	; 61
    5728:	de bf       	out	0x3e, r29	; 62
    572a:	89 87       	std	Y+9, r24	; 0x09
    572c:	9a 87       	std	Y+10, r25	; 0x0a
    572e:	4b 87       	std	Y+11, r20	; 0x0b
    5730:	5c 87       	std	Y+12, r21	; 0x0c
    5732:	6d 87       	std	Y+13, r22	; 0x0d
    5734:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    5736:	1b 82       	std	Y+3, r1	; 0x03
    5738:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    573a:	8b 85       	ldd	r24, Y+11	; 0x0b
    573c:	9c 85       	ldd	r25, Y+12	; 0x0c
    573e:	ad 85       	ldd	r26, Y+13	; 0x0d
    5740:	be 85       	ldd	r27, Y+14	; 0x0e
    5742:	20 e0       	ldi	r18, 0x00	; 0
    5744:	30 e0       	ldi	r19, 0x00	; 0
    5746:	a9 01       	movw	r20, r18
    5748:	bc 01       	movw	r22, r24
    574a:	cd 01       	movw	r24, r26
    574c:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__cmpsf2>
    5750:	88 23       	and	r24, r24
    5752:	59 f4       	brne	.+22     	; 0x576a <ftoa_sci+0x56>
        buffer[0] = '0';
    5754:	89 85       	ldd	r24, Y+9	; 0x09
    5756:	9a 85       	ldd	r25, Y+10	; 0x0a
    5758:	20 e3       	ldi	r18, 0x30	; 48
    575a:	fc 01       	movw	r30, r24
    575c:	20 83       	st	Z, r18
        buffer[1] = '\0';
    575e:	89 85       	ldd	r24, Y+9	; 0x09
    5760:	9a 85       	ldd	r25, Y+10	; 0x0a
    5762:	01 96       	adiw	r24, 0x01	; 1
    5764:	fc 01       	movw	r30, r24
    5766:	10 82       	st	Z, r1
        return;
    5768:	ec c0       	rjmp	.+472    	; 0x5942 <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    576a:	8b 85       	ldd	r24, Y+11	; 0x0b
    576c:	9c 85       	ldd	r25, Y+12	; 0x0c
    576e:	ad 85       	ldd	r26, Y+13	; 0x0d
    5770:	be 85       	ldd	r27, Y+14	; 0x0e
    5772:	20 e0       	ldi	r18, 0x00	; 0
    5774:	30 e0       	ldi	r19, 0x00	; 0
    5776:	a9 01       	movw	r20, r18
    5778:	bc 01       	movw	r22, r24
    577a:	cd 01       	movw	r24, r26
    577c:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__cmpsf2>
    5780:	88 23       	and	r24, r24
    5782:	9c f4       	brge	.+38     	; 0x57aa <ftoa_sci+0x96>
        *buffer++ = '-';
    5784:	89 85       	ldd	r24, Y+9	; 0x09
    5786:	9a 85       	ldd	r25, Y+10	; 0x0a
    5788:	9c 01       	movw	r18, r24
    578a:	2f 5f       	subi	r18, 0xFF	; 255
    578c:	3f 4f       	sbci	r19, 0xFF	; 255
    578e:	29 87       	std	Y+9, r18	; 0x09
    5790:	3a 87       	std	Y+10, r19	; 0x0a
    5792:	2d e2       	ldi	r18, 0x2D	; 45
    5794:	fc 01       	movw	r30, r24
    5796:	20 83       	st	Z, r18
        value = -value;
    5798:	8b 85       	ldd	r24, Y+11	; 0x0b
    579a:	9c 85       	ldd	r25, Y+12	; 0x0c
    579c:	ad 85       	ldd	r26, Y+13	; 0x0d
    579e:	be 85       	ldd	r27, Y+14	; 0x0e
    57a0:	b0 58       	subi	r27, 0x80	; 128
    57a2:	8b 87       	std	Y+11, r24	; 0x0b
    57a4:	9c 87       	std	Y+12, r25	; 0x0c
    57a6:	ad 87       	std	Y+13, r26	; 0x0d
    57a8:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    57aa:	ce 01       	movw	r24, r28
    57ac:	0b 96       	adiw	r24, 0x0b	; 11
    57ae:	0e 94 ce 29 	call	0x539c	; 0x539c <normalize>
    57b2:	8b 83       	std	Y+3, r24	; 0x03
    57b4:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    57b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    57b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    57ba:	ad 85       	ldd	r26, Y+13	; 0x0d
    57bc:	be 85       	ldd	r27, Y+14	; 0x0e
    57be:	20 e0       	ldi	r18, 0x00	; 0
    57c0:	30 e0       	ldi	r19, 0x00	; 0
    57c2:	40 e2       	ldi	r20, 0x20	; 32
    57c4:	51 e4       	ldi	r21, 0x41	; 65
    57c6:	bc 01       	movw	r22, r24
    57c8:	cd 01       	movw	r24, r26
    57ca:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__mulsf3>
    57ce:	dc 01       	movw	r26, r24
    57d0:	cb 01       	movw	r24, r22
    57d2:	bc 01       	movw	r22, r24
    57d4:	cd 01       	movw	r24, r26
    57d6:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__fixsfsi>
    57da:	dc 01       	movw	r26, r24
    57dc:	cb 01       	movw	r24, r22
    57de:	8d 83       	std	Y+5, r24	; 0x05
    57e0:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    57e2:	89 85       	ldd	r24, Y+9	; 0x09
    57e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    57e6:	9c 01       	movw	r18, r24
    57e8:	2f 5f       	subi	r18, 0xFF	; 255
    57ea:	3f 4f       	sbci	r19, 0xFF	; 255
    57ec:	29 87       	std	Y+9, r18	; 0x09
    57ee:	3a 87       	std	Y+10, r19	; 0x0a
    57f0:	2d 81       	ldd	r18, Y+5	; 0x05
    57f2:	20 5d       	subi	r18, 0xD0	; 208
    57f4:	fc 01       	movw	r30, r24
    57f6:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    57f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    57fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    57fc:	ad 85       	ldd	r26, Y+13	; 0x0d
    57fe:	be 85       	ldd	r27, Y+14	; 0x0e
    5800:	20 e0       	ldi	r18, 0x00	; 0
    5802:	30 e0       	ldi	r19, 0x00	; 0
    5804:	40 e2       	ldi	r20, 0x20	; 32
    5806:	51 e4       	ldi	r21, 0x41	; 65
    5808:	bc 01       	movw	r22, r24
    580a:	cd 01       	movw	r24, r26
    580c:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__mulsf3>
    5810:	dc 01       	movw	r26, r24
    5812:	cb 01       	movw	r24, r22
    5814:	6c 01       	movw	r12, r24
    5816:	7d 01       	movw	r14, r26
    5818:	8d 81       	ldd	r24, Y+5	; 0x05
    581a:	9e 81       	ldd	r25, Y+6	; 0x06
    581c:	09 2e       	mov	r0, r25
    581e:	00 0c       	add	r0, r0
    5820:	aa 0b       	sbc	r26, r26
    5822:	bb 0b       	sbc	r27, r27
    5824:	bc 01       	movw	r22, r24
    5826:	cd 01       	movw	r24, r26
    5828:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <__floatsisf>
    582c:	dc 01       	movw	r26, r24
    582e:	cb 01       	movw	r24, r22
    5830:	9c 01       	movw	r18, r24
    5832:	ad 01       	movw	r20, r26
    5834:	c7 01       	movw	r24, r14
    5836:	b6 01       	movw	r22, r12
    5838:	0e 94 ab 2c 	call	0x5956	; 0x5956 <__subsf3>
    583c:	dc 01       	movw	r26, r24
    583e:	cb 01       	movw	r24, r22
    5840:	8b 87       	std	Y+11, r24	; 0x0b
    5842:	9c 87       	std	Y+12, r25	; 0x0c
    5844:	ad 87       	std	Y+13, r26	; 0x0d
    5846:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    5848:	8b 81       	ldd	r24, Y+3	; 0x03
    584a:	9c 81       	ldd	r25, Y+4	; 0x04
    584c:	01 97       	sbiw	r24, 0x01	; 1
    584e:	8b 83       	std	Y+3, r24	; 0x03
    5850:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    5852:	89 85       	ldd	r24, Y+9	; 0x09
    5854:	9a 85       	ldd	r25, Y+10	; 0x0a
    5856:	9c 01       	movw	r18, r24
    5858:	2f 5f       	subi	r18, 0xFF	; 255
    585a:	3f 4f       	sbci	r19, 0xFF	; 255
    585c:	29 87       	std	Y+9, r18	; 0x09
    585e:	3a 87       	std	Y+10, r19	; 0x0a
    5860:	2e e2       	ldi	r18, 0x2E	; 46
    5862:	fc 01       	movw	r30, r24
    5864:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    5866:	19 82       	std	Y+1, r1	; 0x01
    5868:	1a 82       	std	Y+2, r1	; 0x02
    586a:	4e c0       	rjmp	.+156    	; 0x5908 <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    586c:	8b 85       	ldd	r24, Y+11	; 0x0b
    586e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5870:	ad 85       	ldd	r26, Y+13	; 0x0d
    5872:	be 85       	ldd	r27, Y+14	; 0x0e
    5874:	20 e0       	ldi	r18, 0x00	; 0
    5876:	30 e0       	ldi	r19, 0x00	; 0
    5878:	40 e2       	ldi	r20, 0x20	; 32
    587a:	51 e4       	ldi	r21, 0x41	; 65
    587c:	bc 01       	movw	r22, r24
    587e:	cd 01       	movw	r24, r26
    5880:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__mulsf3>
    5884:	dc 01       	movw	r26, r24
    5886:	cb 01       	movw	r24, r22
    5888:	bc 01       	movw	r22, r24
    588a:	cd 01       	movw	r24, r26
    588c:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__fixsfsi>
    5890:	dc 01       	movw	r26, r24
    5892:	cb 01       	movw	r24, r22
    5894:	8f 83       	std	Y+7, r24	; 0x07
    5896:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    5898:	89 85       	ldd	r24, Y+9	; 0x09
    589a:	9a 85       	ldd	r25, Y+10	; 0x0a
    589c:	9c 01       	movw	r18, r24
    589e:	2f 5f       	subi	r18, 0xFF	; 255
    58a0:	3f 4f       	sbci	r19, 0xFF	; 255
    58a2:	29 87       	std	Y+9, r18	; 0x09
    58a4:	3a 87       	std	Y+10, r19	; 0x0a
    58a6:	2f 81       	ldd	r18, Y+7	; 0x07
    58a8:	20 5d       	subi	r18, 0xD0	; 208
    58aa:	fc 01       	movw	r30, r24
    58ac:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    58ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    58b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    58b2:	ad 85       	ldd	r26, Y+13	; 0x0d
    58b4:	be 85       	ldd	r27, Y+14	; 0x0e
    58b6:	20 e0       	ldi	r18, 0x00	; 0
    58b8:	30 e0       	ldi	r19, 0x00	; 0
    58ba:	40 e2       	ldi	r20, 0x20	; 32
    58bc:	51 e4       	ldi	r21, 0x41	; 65
    58be:	bc 01       	movw	r22, r24
    58c0:	cd 01       	movw	r24, r26
    58c2:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__mulsf3>
    58c6:	dc 01       	movw	r26, r24
    58c8:	cb 01       	movw	r24, r22
    58ca:	6c 01       	movw	r12, r24
    58cc:	7d 01       	movw	r14, r26
    58ce:	8f 81       	ldd	r24, Y+7	; 0x07
    58d0:	98 85       	ldd	r25, Y+8	; 0x08
    58d2:	09 2e       	mov	r0, r25
    58d4:	00 0c       	add	r0, r0
    58d6:	aa 0b       	sbc	r26, r26
    58d8:	bb 0b       	sbc	r27, r27
    58da:	bc 01       	movw	r22, r24
    58dc:	cd 01       	movw	r24, r26
    58de:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <__floatsisf>
    58e2:	dc 01       	movw	r26, r24
    58e4:	cb 01       	movw	r24, r22
    58e6:	9c 01       	movw	r18, r24
    58e8:	ad 01       	movw	r20, r26
    58ea:	c7 01       	movw	r24, r14
    58ec:	b6 01       	movw	r22, r12
    58ee:	0e 94 ab 2c 	call	0x5956	; 0x5956 <__subsf3>
    58f2:	dc 01       	movw	r26, r24
    58f4:	cb 01       	movw	r24, r22
    58f6:	8b 87       	std	Y+11, r24	; 0x0b
    58f8:	9c 87       	std	Y+12, r25	; 0x0c
    58fa:	ad 87       	std	Y+13, r26	; 0x0d
    58fc:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    58fe:	89 81       	ldd	r24, Y+1	; 0x01
    5900:	9a 81       	ldd	r25, Y+2	; 0x02
    5902:	01 96       	adiw	r24, 0x01	; 1
    5904:	89 83       	std	Y+1, r24	; 0x01
    5906:	9a 83       	std	Y+2, r25	; 0x02
    5908:	80 91 80 20 	lds	r24, 0x2080	; 0x802080 <width.5079>
    590c:	90 91 81 20 	lds	r25, 0x2081	; 0x802081 <width.5079+0x1>
    5910:	29 81       	ldd	r18, Y+1	; 0x01
    5912:	3a 81       	ldd	r19, Y+2	; 0x02
    5914:	28 17       	cp	r18, r24
    5916:	39 07       	cpc	r19, r25
    5918:	0c f4       	brge	.+2      	; 0x591c <ftoa_sci+0x208>
    591a:	a8 cf       	rjmp	.-176    	; 0x586c <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    591c:	89 85       	ldd	r24, Y+9	; 0x09
    591e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5920:	9c 01       	movw	r18, r24
    5922:	2f 5f       	subi	r18, 0xFF	; 255
    5924:	3f 4f       	sbci	r19, 0xFF	; 255
    5926:	29 87       	std	Y+9, r18	; 0x09
    5928:	3a 87       	std	Y+10, r19	; 0x0a
    592a:	25 e6       	ldi	r18, 0x65	; 101
    592c:	fc 01       	movw	r30, r24
    592e:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    5930:	29 85       	ldd	r18, Y+9	; 0x09
    5932:	3a 85       	ldd	r19, Y+10	; 0x0a
    5934:	8b 81       	ldd	r24, Y+3	; 0x03
    5936:	9c 81       	ldd	r25, Y+4	; 0x04
    5938:	4a e0       	ldi	r20, 0x0A	; 10
    593a:	50 e0       	ldi	r21, 0x00	; 0
    593c:	b9 01       	movw	r22, r18
    593e:	0e 94 b8 33 	call	0x6770	; 0x6770 <itoa>
}
    5942:	2e 96       	adiw	r28, 0x0e	; 14
    5944:	cd bf       	out	0x3d, r28	; 61
    5946:	de bf       	out	0x3e, r29	; 62
    5948:	df 91       	pop	r29
    594a:	cf 91       	pop	r28
    594c:	ff 90       	pop	r15
    594e:	ef 90       	pop	r14
    5950:	df 90       	pop	r13
    5952:	cf 90       	pop	r12
    5954:	08 95       	ret

00005956 <__subsf3>:
    5956:	50 58       	subi	r21, 0x80	; 128

00005958 <__addsf3>:
    5958:	bb 27       	eor	r27, r27
    595a:	aa 27       	eor	r26, r26
    595c:	0e 94 c3 2c 	call	0x5986	; 0x5986 <__addsf3x>
    5960:	0c 94 3d 2e 	jmp	0x5c7a	; 0x5c7a <__fp_round>
    5964:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <__fp_pscA>
    5968:	38 f0       	brcs	.+14     	; 0x5978 <__addsf3+0x20>
    596a:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <__fp_pscB>
    596e:	20 f0       	brcs	.+8      	; 0x5978 <__addsf3+0x20>
    5970:	39 f4       	brne	.+14     	; 0x5980 <__addsf3+0x28>
    5972:	9f 3f       	cpi	r25, 0xFF	; 255
    5974:	19 f4       	brne	.+6      	; 0x597c <__addsf3+0x24>
    5976:	26 f4       	brtc	.+8      	; 0x5980 <__addsf3+0x28>
    5978:	0c 94 2c 2e 	jmp	0x5c58	; 0x5c58 <__fp_nan>
    597c:	0e f4       	brtc	.+2      	; 0x5980 <__addsf3+0x28>
    597e:	e0 95       	com	r30
    5980:	e7 fb       	bst	r30, 7
    5982:	0c 94 26 2e 	jmp	0x5c4c	; 0x5c4c <__fp_inf>

00005986 <__addsf3x>:
    5986:	e9 2f       	mov	r30, r25
    5988:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <__fp_split3>
    598c:	58 f3       	brcs	.-42     	; 0x5964 <__addsf3+0xc>
    598e:	ba 17       	cp	r27, r26
    5990:	62 07       	cpc	r22, r18
    5992:	73 07       	cpc	r23, r19
    5994:	84 07       	cpc	r24, r20
    5996:	95 07       	cpc	r25, r21
    5998:	20 f0       	brcs	.+8      	; 0x59a2 <__addsf3x+0x1c>
    599a:	79 f4       	brne	.+30     	; 0x59ba <__addsf3x+0x34>
    599c:	a6 f5       	brtc	.+104    	; 0x5a06 <__addsf3x+0x80>
    599e:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__fp_zero>
    59a2:	0e f4       	brtc	.+2      	; 0x59a6 <__addsf3x+0x20>
    59a4:	e0 95       	com	r30
    59a6:	0b 2e       	mov	r0, r27
    59a8:	ba 2f       	mov	r27, r26
    59aa:	a0 2d       	mov	r26, r0
    59ac:	0b 01       	movw	r0, r22
    59ae:	b9 01       	movw	r22, r18
    59b0:	90 01       	movw	r18, r0
    59b2:	0c 01       	movw	r0, r24
    59b4:	ca 01       	movw	r24, r20
    59b6:	a0 01       	movw	r20, r0
    59b8:	11 24       	eor	r1, r1
    59ba:	ff 27       	eor	r31, r31
    59bc:	59 1b       	sub	r21, r25
    59be:	99 f0       	breq	.+38     	; 0x59e6 <__addsf3x+0x60>
    59c0:	59 3f       	cpi	r21, 0xF9	; 249
    59c2:	50 f4       	brcc	.+20     	; 0x59d8 <__addsf3x+0x52>
    59c4:	50 3e       	cpi	r21, 0xE0	; 224
    59c6:	68 f1       	brcs	.+90     	; 0x5a22 <__addsf3x+0x9c>
    59c8:	1a 16       	cp	r1, r26
    59ca:	f0 40       	sbci	r31, 0x00	; 0
    59cc:	a2 2f       	mov	r26, r18
    59ce:	23 2f       	mov	r18, r19
    59d0:	34 2f       	mov	r19, r20
    59d2:	44 27       	eor	r20, r20
    59d4:	58 5f       	subi	r21, 0xF8	; 248
    59d6:	f3 cf       	rjmp	.-26     	; 0x59be <__addsf3x+0x38>
    59d8:	46 95       	lsr	r20
    59da:	37 95       	ror	r19
    59dc:	27 95       	ror	r18
    59de:	a7 95       	ror	r26
    59e0:	f0 40       	sbci	r31, 0x00	; 0
    59e2:	53 95       	inc	r21
    59e4:	c9 f7       	brne	.-14     	; 0x59d8 <__addsf3x+0x52>
    59e6:	7e f4       	brtc	.+30     	; 0x5a06 <__addsf3x+0x80>
    59e8:	1f 16       	cp	r1, r31
    59ea:	ba 0b       	sbc	r27, r26
    59ec:	62 0b       	sbc	r22, r18
    59ee:	73 0b       	sbc	r23, r19
    59f0:	84 0b       	sbc	r24, r20
    59f2:	ba f0       	brmi	.+46     	; 0x5a22 <__addsf3x+0x9c>
    59f4:	91 50       	subi	r25, 0x01	; 1
    59f6:	a1 f0       	breq	.+40     	; 0x5a20 <__addsf3x+0x9a>
    59f8:	ff 0f       	add	r31, r31
    59fa:	bb 1f       	adc	r27, r27
    59fc:	66 1f       	adc	r22, r22
    59fe:	77 1f       	adc	r23, r23
    5a00:	88 1f       	adc	r24, r24
    5a02:	c2 f7       	brpl	.-16     	; 0x59f4 <__addsf3x+0x6e>
    5a04:	0e c0       	rjmp	.+28     	; 0x5a22 <__addsf3x+0x9c>
    5a06:	ba 0f       	add	r27, r26
    5a08:	62 1f       	adc	r22, r18
    5a0a:	73 1f       	adc	r23, r19
    5a0c:	84 1f       	adc	r24, r20
    5a0e:	48 f4       	brcc	.+18     	; 0x5a22 <__addsf3x+0x9c>
    5a10:	87 95       	ror	r24
    5a12:	77 95       	ror	r23
    5a14:	67 95       	ror	r22
    5a16:	b7 95       	ror	r27
    5a18:	f7 95       	ror	r31
    5a1a:	9e 3f       	cpi	r25, 0xFE	; 254
    5a1c:	08 f0       	brcs	.+2      	; 0x5a20 <__addsf3x+0x9a>
    5a1e:	b0 cf       	rjmp	.-160    	; 0x5980 <__addsf3+0x28>
    5a20:	93 95       	inc	r25
    5a22:	88 0f       	add	r24, r24
    5a24:	08 f0       	brcs	.+2      	; 0x5a28 <__addsf3x+0xa2>
    5a26:	99 27       	eor	r25, r25
    5a28:	ee 0f       	add	r30, r30
    5a2a:	97 95       	ror	r25
    5a2c:	87 95       	ror	r24
    5a2e:	08 95       	ret

00005a30 <__cmpsf2>:
    5a30:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <__fp_cmp>
    5a34:	08 f4       	brcc	.+2      	; 0x5a38 <__cmpsf2+0x8>
    5a36:	81 e0       	ldi	r24, 0x01	; 1
    5a38:	08 95       	ret

00005a3a <__divsf3>:
    5a3a:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__divsf3x>
    5a3e:	0c 94 3d 2e 	jmp	0x5c7a	; 0x5c7a <__fp_round>
    5a42:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <__fp_pscB>
    5a46:	58 f0       	brcs	.+22     	; 0x5a5e <__divsf3+0x24>
    5a48:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <__fp_pscA>
    5a4c:	40 f0       	brcs	.+16     	; 0x5a5e <__divsf3+0x24>
    5a4e:	29 f4       	brne	.+10     	; 0x5a5a <__divsf3+0x20>
    5a50:	5f 3f       	cpi	r21, 0xFF	; 255
    5a52:	29 f0       	breq	.+10     	; 0x5a5e <__divsf3+0x24>
    5a54:	0c 94 26 2e 	jmp	0x5c4c	; 0x5c4c <__fp_inf>
    5a58:	51 11       	cpse	r21, r1
    5a5a:	0c 94 71 2e 	jmp	0x5ce2	; 0x5ce2 <__fp_szero>
    5a5e:	0c 94 2c 2e 	jmp	0x5c58	; 0x5c58 <__fp_nan>

00005a62 <__divsf3x>:
    5a62:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <__fp_split3>
    5a66:	68 f3       	brcs	.-38     	; 0x5a42 <__divsf3+0x8>

00005a68 <__divsf3_pse>:
    5a68:	99 23       	and	r25, r25
    5a6a:	b1 f3       	breq	.-20     	; 0x5a58 <__divsf3+0x1e>
    5a6c:	55 23       	and	r21, r21
    5a6e:	91 f3       	breq	.-28     	; 0x5a54 <__divsf3+0x1a>
    5a70:	95 1b       	sub	r25, r21
    5a72:	55 0b       	sbc	r21, r21
    5a74:	bb 27       	eor	r27, r27
    5a76:	aa 27       	eor	r26, r26
    5a78:	62 17       	cp	r22, r18
    5a7a:	73 07       	cpc	r23, r19
    5a7c:	84 07       	cpc	r24, r20
    5a7e:	38 f0       	brcs	.+14     	; 0x5a8e <__divsf3_pse+0x26>
    5a80:	9f 5f       	subi	r25, 0xFF	; 255
    5a82:	5f 4f       	sbci	r21, 0xFF	; 255
    5a84:	22 0f       	add	r18, r18
    5a86:	33 1f       	adc	r19, r19
    5a88:	44 1f       	adc	r20, r20
    5a8a:	aa 1f       	adc	r26, r26
    5a8c:	a9 f3       	breq	.-22     	; 0x5a78 <__divsf3_pse+0x10>
    5a8e:	35 d0       	rcall	.+106    	; 0x5afa <__divsf3_pse+0x92>
    5a90:	0e 2e       	mov	r0, r30
    5a92:	3a f0       	brmi	.+14     	; 0x5aa2 <__divsf3_pse+0x3a>
    5a94:	e0 e8       	ldi	r30, 0x80	; 128
    5a96:	32 d0       	rcall	.+100    	; 0x5afc <__divsf3_pse+0x94>
    5a98:	91 50       	subi	r25, 0x01	; 1
    5a9a:	50 40       	sbci	r21, 0x00	; 0
    5a9c:	e6 95       	lsr	r30
    5a9e:	00 1c       	adc	r0, r0
    5aa0:	ca f7       	brpl	.-14     	; 0x5a94 <__divsf3_pse+0x2c>
    5aa2:	2b d0       	rcall	.+86     	; 0x5afa <__divsf3_pse+0x92>
    5aa4:	fe 2f       	mov	r31, r30
    5aa6:	29 d0       	rcall	.+82     	; 0x5afa <__divsf3_pse+0x92>
    5aa8:	66 0f       	add	r22, r22
    5aaa:	77 1f       	adc	r23, r23
    5aac:	88 1f       	adc	r24, r24
    5aae:	bb 1f       	adc	r27, r27
    5ab0:	26 17       	cp	r18, r22
    5ab2:	37 07       	cpc	r19, r23
    5ab4:	48 07       	cpc	r20, r24
    5ab6:	ab 07       	cpc	r26, r27
    5ab8:	b0 e8       	ldi	r27, 0x80	; 128
    5aba:	09 f0       	breq	.+2      	; 0x5abe <__divsf3_pse+0x56>
    5abc:	bb 0b       	sbc	r27, r27
    5abe:	80 2d       	mov	r24, r0
    5ac0:	bf 01       	movw	r22, r30
    5ac2:	ff 27       	eor	r31, r31
    5ac4:	93 58       	subi	r25, 0x83	; 131
    5ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    5ac8:	3a f0       	brmi	.+14     	; 0x5ad8 <__divsf3_pse+0x70>
    5aca:	9e 3f       	cpi	r25, 0xFE	; 254
    5acc:	51 05       	cpc	r21, r1
    5ace:	78 f0       	brcs	.+30     	; 0x5aee <__divsf3_pse+0x86>
    5ad0:	0c 94 26 2e 	jmp	0x5c4c	; 0x5c4c <__fp_inf>
    5ad4:	0c 94 71 2e 	jmp	0x5ce2	; 0x5ce2 <__fp_szero>
    5ad8:	5f 3f       	cpi	r21, 0xFF	; 255
    5ada:	e4 f3       	brlt	.-8      	; 0x5ad4 <__divsf3_pse+0x6c>
    5adc:	98 3e       	cpi	r25, 0xE8	; 232
    5ade:	d4 f3       	brlt	.-12     	; 0x5ad4 <__divsf3_pse+0x6c>
    5ae0:	86 95       	lsr	r24
    5ae2:	77 95       	ror	r23
    5ae4:	67 95       	ror	r22
    5ae6:	b7 95       	ror	r27
    5ae8:	f7 95       	ror	r31
    5aea:	9f 5f       	subi	r25, 0xFF	; 255
    5aec:	c9 f7       	brne	.-14     	; 0x5ae0 <__divsf3_pse+0x78>
    5aee:	88 0f       	add	r24, r24
    5af0:	91 1d       	adc	r25, r1
    5af2:	96 95       	lsr	r25
    5af4:	87 95       	ror	r24
    5af6:	97 f9       	bld	r25, 7
    5af8:	08 95       	ret
    5afa:	e1 e0       	ldi	r30, 0x01	; 1
    5afc:	66 0f       	add	r22, r22
    5afe:	77 1f       	adc	r23, r23
    5b00:	88 1f       	adc	r24, r24
    5b02:	bb 1f       	adc	r27, r27
    5b04:	62 17       	cp	r22, r18
    5b06:	73 07       	cpc	r23, r19
    5b08:	84 07       	cpc	r24, r20
    5b0a:	ba 07       	cpc	r27, r26
    5b0c:	20 f0       	brcs	.+8      	; 0x5b16 <__divsf3_pse+0xae>
    5b0e:	62 1b       	sub	r22, r18
    5b10:	73 0b       	sbc	r23, r19
    5b12:	84 0b       	sbc	r24, r20
    5b14:	ba 0b       	sbc	r27, r26
    5b16:	ee 1f       	adc	r30, r30
    5b18:	88 f7       	brcc	.-30     	; 0x5afc <__divsf3_pse+0x94>
    5b1a:	e0 95       	com	r30
    5b1c:	08 95       	ret

00005b1e <__fixsfsi>:
    5b1e:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    5b22:	68 94       	set
    5b24:	b1 11       	cpse	r27, r1
    5b26:	0c 94 71 2e 	jmp	0x5ce2	; 0x5ce2 <__fp_szero>
    5b2a:	08 95       	ret

00005b2c <__fixunssfsi>:
    5b2c:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__fp_splitA>
    5b30:	88 f0       	brcs	.+34     	; 0x5b54 <__fixunssfsi+0x28>
    5b32:	9f 57       	subi	r25, 0x7F	; 127
    5b34:	98 f0       	brcs	.+38     	; 0x5b5c <__fixunssfsi+0x30>
    5b36:	b9 2f       	mov	r27, r25
    5b38:	99 27       	eor	r25, r25
    5b3a:	b7 51       	subi	r27, 0x17	; 23
    5b3c:	b0 f0       	brcs	.+44     	; 0x5b6a <__fixunssfsi+0x3e>
    5b3e:	e1 f0       	breq	.+56     	; 0x5b78 <__fixunssfsi+0x4c>
    5b40:	66 0f       	add	r22, r22
    5b42:	77 1f       	adc	r23, r23
    5b44:	88 1f       	adc	r24, r24
    5b46:	99 1f       	adc	r25, r25
    5b48:	1a f0       	brmi	.+6      	; 0x5b50 <__fixunssfsi+0x24>
    5b4a:	ba 95       	dec	r27
    5b4c:	c9 f7       	brne	.-14     	; 0x5b40 <__fixunssfsi+0x14>
    5b4e:	14 c0       	rjmp	.+40     	; 0x5b78 <__fixunssfsi+0x4c>
    5b50:	b1 30       	cpi	r27, 0x01	; 1
    5b52:	91 f0       	breq	.+36     	; 0x5b78 <__fixunssfsi+0x4c>
    5b54:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <__fp_zero>
    5b58:	b1 e0       	ldi	r27, 0x01	; 1
    5b5a:	08 95       	ret
    5b5c:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__fp_zero>
    5b60:	67 2f       	mov	r22, r23
    5b62:	78 2f       	mov	r23, r24
    5b64:	88 27       	eor	r24, r24
    5b66:	b8 5f       	subi	r27, 0xF8	; 248
    5b68:	39 f0       	breq	.+14     	; 0x5b78 <__fixunssfsi+0x4c>
    5b6a:	b9 3f       	cpi	r27, 0xF9	; 249
    5b6c:	cc f3       	brlt	.-14     	; 0x5b60 <__fixunssfsi+0x34>
    5b6e:	86 95       	lsr	r24
    5b70:	77 95       	ror	r23
    5b72:	67 95       	ror	r22
    5b74:	b3 95       	inc	r27
    5b76:	d9 f7       	brne	.-10     	; 0x5b6e <__fixunssfsi+0x42>
    5b78:	3e f4       	brtc	.+14     	; 0x5b88 <__fixunssfsi+0x5c>
    5b7a:	90 95       	com	r25
    5b7c:	80 95       	com	r24
    5b7e:	70 95       	com	r23
    5b80:	61 95       	neg	r22
    5b82:	7f 4f       	sbci	r23, 0xFF	; 255
    5b84:	8f 4f       	sbci	r24, 0xFF	; 255
    5b86:	9f 4f       	sbci	r25, 0xFF	; 255
    5b88:	08 95       	ret

00005b8a <__floatunsisf>:
    5b8a:	e8 94       	clt
    5b8c:	09 c0       	rjmp	.+18     	; 0x5ba0 <__floatsisf+0x12>

00005b8e <__floatsisf>:
    5b8e:	97 fb       	bst	r25, 7
    5b90:	3e f4       	brtc	.+14     	; 0x5ba0 <__floatsisf+0x12>
    5b92:	90 95       	com	r25
    5b94:	80 95       	com	r24
    5b96:	70 95       	com	r23
    5b98:	61 95       	neg	r22
    5b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    5b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    5b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    5ba0:	99 23       	and	r25, r25
    5ba2:	a9 f0       	breq	.+42     	; 0x5bce <__floatsisf+0x40>
    5ba4:	f9 2f       	mov	r31, r25
    5ba6:	96 e9       	ldi	r25, 0x96	; 150
    5ba8:	bb 27       	eor	r27, r27
    5baa:	93 95       	inc	r25
    5bac:	f6 95       	lsr	r31
    5bae:	87 95       	ror	r24
    5bb0:	77 95       	ror	r23
    5bb2:	67 95       	ror	r22
    5bb4:	b7 95       	ror	r27
    5bb6:	f1 11       	cpse	r31, r1
    5bb8:	f8 cf       	rjmp	.-16     	; 0x5baa <__floatsisf+0x1c>
    5bba:	fa f4       	brpl	.+62     	; 0x5bfa <__floatsisf+0x6c>
    5bbc:	bb 0f       	add	r27, r27
    5bbe:	11 f4       	brne	.+4      	; 0x5bc4 <__floatsisf+0x36>
    5bc0:	60 ff       	sbrs	r22, 0
    5bc2:	1b c0       	rjmp	.+54     	; 0x5bfa <__floatsisf+0x6c>
    5bc4:	6f 5f       	subi	r22, 0xFF	; 255
    5bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    5bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    5bca:	9f 4f       	sbci	r25, 0xFF	; 255
    5bcc:	16 c0       	rjmp	.+44     	; 0x5bfa <__floatsisf+0x6c>
    5bce:	88 23       	and	r24, r24
    5bd0:	11 f0       	breq	.+4      	; 0x5bd6 <__floatsisf+0x48>
    5bd2:	96 e9       	ldi	r25, 0x96	; 150
    5bd4:	11 c0       	rjmp	.+34     	; 0x5bf8 <__floatsisf+0x6a>
    5bd6:	77 23       	and	r23, r23
    5bd8:	21 f0       	breq	.+8      	; 0x5be2 <__floatsisf+0x54>
    5bda:	9e e8       	ldi	r25, 0x8E	; 142
    5bdc:	87 2f       	mov	r24, r23
    5bde:	76 2f       	mov	r23, r22
    5be0:	05 c0       	rjmp	.+10     	; 0x5bec <__floatsisf+0x5e>
    5be2:	66 23       	and	r22, r22
    5be4:	71 f0       	breq	.+28     	; 0x5c02 <__floatsisf+0x74>
    5be6:	96 e8       	ldi	r25, 0x86	; 134
    5be8:	86 2f       	mov	r24, r22
    5bea:	70 e0       	ldi	r23, 0x00	; 0
    5bec:	60 e0       	ldi	r22, 0x00	; 0
    5bee:	2a f0       	brmi	.+10     	; 0x5bfa <__floatsisf+0x6c>
    5bf0:	9a 95       	dec	r25
    5bf2:	66 0f       	add	r22, r22
    5bf4:	77 1f       	adc	r23, r23
    5bf6:	88 1f       	adc	r24, r24
    5bf8:	da f7       	brpl	.-10     	; 0x5bf0 <__floatsisf+0x62>
    5bfa:	88 0f       	add	r24, r24
    5bfc:	96 95       	lsr	r25
    5bfe:	87 95       	ror	r24
    5c00:	97 f9       	bld	r25, 7
    5c02:	08 95       	ret

00005c04 <__fp_cmp>:
    5c04:	99 0f       	add	r25, r25
    5c06:	00 08       	sbc	r0, r0
    5c08:	55 0f       	add	r21, r21
    5c0a:	aa 0b       	sbc	r26, r26
    5c0c:	e0 e8       	ldi	r30, 0x80	; 128
    5c0e:	fe ef       	ldi	r31, 0xFE	; 254
    5c10:	16 16       	cp	r1, r22
    5c12:	17 06       	cpc	r1, r23
    5c14:	e8 07       	cpc	r30, r24
    5c16:	f9 07       	cpc	r31, r25
    5c18:	c0 f0       	brcs	.+48     	; 0x5c4a <__fp_cmp+0x46>
    5c1a:	12 16       	cp	r1, r18
    5c1c:	13 06       	cpc	r1, r19
    5c1e:	e4 07       	cpc	r30, r20
    5c20:	f5 07       	cpc	r31, r21
    5c22:	98 f0       	brcs	.+38     	; 0x5c4a <__fp_cmp+0x46>
    5c24:	62 1b       	sub	r22, r18
    5c26:	73 0b       	sbc	r23, r19
    5c28:	84 0b       	sbc	r24, r20
    5c2a:	95 0b       	sbc	r25, r21
    5c2c:	39 f4       	brne	.+14     	; 0x5c3c <__fp_cmp+0x38>
    5c2e:	0a 26       	eor	r0, r26
    5c30:	61 f0       	breq	.+24     	; 0x5c4a <__fp_cmp+0x46>
    5c32:	23 2b       	or	r18, r19
    5c34:	24 2b       	or	r18, r20
    5c36:	25 2b       	or	r18, r21
    5c38:	21 f4       	brne	.+8      	; 0x5c42 <__fp_cmp+0x3e>
    5c3a:	08 95       	ret
    5c3c:	0a 26       	eor	r0, r26
    5c3e:	09 f4       	brne	.+2      	; 0x5c42 <__fp_cmp+0x3e>
    5c40:	a1 40       	sbci	r26, 0x01	; 1
    5c42:	a6 95       	lsr	r26
    5c44:	8f ef       	ldi	r24, 0xFF	; 255
    5c46:	81 1d       	adc	r24, r1
    5c48:	81 1d       	adc	r24, r1
    5c4a:	08 95       	ret

00005c4c <__fp_inf>:
    5c4c:	97 f9       	bld	r25, 7
    5c4e:	9f 67       	ori	r25, 0x7F	; 127
    5c50:	80 e8       	ldi	r24, 0x80	; 128
    5c52:	70 e0       	ldi	r23, 0x00	; 0
    5c54:	60 e0       	ldi	r22, 0x00	; 0
    5c56:	08 95       	ret

00005c58 <__fp_nan>:
    5c58:	9f ef       	ldi	r25, 0xFF	; 255
    5c5a:	80 ec       	ldi	r24, 0xC0	; 192
    5c5c:	08 95       	ret

00005c5e <__fp_pscA>:
    5c5e:	00 24       	eor	r0, r0
    5c60:	0a 94       	dec	r0
    5c62:	16 16       	cp	r1, r22
    5c64:	17 06       	cpc	r1, r23
    5c66:	18 06       	cpc	r1, r24
    5c68:	09 06       	cpc	r0, r25
    5c6a:	08 95       	ret

00005c6c <__fp_pscB>:
    5c6c:	00 24       	eor	r0, r0
    5c6e:	0a 94       	dec	r0
    5c70:	12 16       	cp	r1, r18
    5c72:	13 06       	cpc	r1, r19
    5c74:	14 06       	cpc	r1, r20
    5c76:	05 06       	cpc	r0, r21
    5c78:	08 95       	ret

00005c7a <__fp_round>:
    5c7a:	09 2e       	mov	r0, r25
    5c7c:	03 94       	inc	r0
    5c7e:	00 0c       	add	r0, r0
    5c80:	11 f4       	brne	.+4      	; 0x5c86 <__fp_round+0xc>
    5c82:	88 23       	and	r24, r24
    5c84:	52 f0       	brmi	.+20     	; 0x5c9a <__fp_round+0x20>
    5c86:	bb 0f       	add	r27, r27
    5c88:	40 f4       	brcc	.+16     	; 0x5c9a <__fp_round+0x20>
    5c8a:	bf 2b       	or	r27, r31
    5c8c:	11 f4       	brne	.+4      	; 0x5c92 <__fp_round+0x18>
    5c8e:	60 ff       	sbrs	r22, 0
    5c90:	04 c0       	rjmp	.+8      	; 0x5c9a <__fp_round+0x20>
    5c92:	6f 5f       	subi	r22, 0xFF	; 255
    5c94:	7f 4f       	sbci	r23, 0xFF	; 255
    5c96:	8f 4f       	sbci	r24, 0xFF	; 255
    5c98:	9f 4f       	sbci	r25, 0xFF	; 255
    5c9a:	08 95       	ret

00005c9c <__fp_split3>:
    5c9c:	57 fd       	sbrc	r21, 7
    5c9e:	90 58       	subi	r25, 0x80	; 128
    5ca0:	44 0f       	add	r20, r20
    5ca2:	55 1f       	adc	r21, r21
    5ca4:	59 f0       	breq	.+22     	; 0x5cbc <__fp_splitA+0x10>
    5ca6:	5f 3f       	cpi	r21, 0xFF	; 255
    5ca8:	71 f0       	breq	.+28     	; 0x5cc6 <__fp_splitA+0x1a>
    5caa:	47 95       	ror	r20

00005cac <__fp_splitA>:
    5cac:	88 0f       	add	r24, r24
    5cae:	97 fb       	bst	r25, 7
    5cb0:	99 1f       	adc	r25, r25
    5cb2:	61 f0       	breq	.+24     	; 0x5ccc <__fp_splitA+0x20>
    5cb4:	9f 3f       	cpi	r25, 0xFF	; 255
    5cb6:	79 f0       	breq	.+30     	; 0x5cd6 <__fp_splitA+0x2a>
    5cb8:	87 95       	ror	r24
    5cba:	08 95       	ret
    5cbc:	12 16       	cp	r1, r18
    5cbe:	13 06       	cpc	r1, r19
    5cc0:	14 06       	cpc	r1, r20
    5cc2:	55 1f       	adc	r21, r21
    5cc4:	f2 cf       	rjmp	.-28     	; 0x5caa <__fp_split3+0xe>
    5cc6:	46 95       	lsr	r20
    5cc8:	f1 df       	rcall	.-30     	; 0x5cac <__fp_splitA>
    5cca:	08 c0       	rjmp	.+16     	; 0x5cdc <__fp_splitA+0x30>
    5ccc:	16 16       	cp	r1, r22
    5cce:	17 06       	cpc	r1, r23
    5cd0:	18 06       	cpc	r1, r24
    5cd2:	99 1f       	adc	r25, r25
    5cd4:	f1 cf       	rjmp	.-30     	; 0x5cb8 <__fp_splitA+0xc>
    5cd6:	86 95       	lsr	r24
    5cd8:	71 05       	cpc	r23, r1
    5cda:	61 05       	cpc	r22, r1
    5cdc:	08 94       	sec
    5cde:	08 95       	ret

00005ce0 <__fp_zero>:
    5ce0:	e8 94       	clt

00005ce2 <__fp_szero>:
    5ce2:	bb 27       	eor	r27, r27
    5ce4:	66 27       	eor	r22, r22
    5ce6:	77 27       	eor	r23, r23
    5ce8:	cb 01       	movw	r24, r22
    5cea:	97 f9       	bld	r25, 7
    5cec:	08 95       	ret

00005cee <__gesf2>:
    5cee:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <__fp_cmp>
    5cf2:	08 f4       	brcc	.+2      	; 0x5cf6 <__gesf2+0x8>
    5cf4:	8f ef       	ldi	r24, 0xFF	; 255
    5cf6:	08 95       	ret

00005cf8 <__mulsf3>:
    5cf8:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <__mulsf3x>
    5cfc:	0c 94 3d 2e 	jmp	0x5c7a	; 0x5c7a <__fp_round>
    5d00:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <__fp_pscA>
    5d04:	38 f0       	brcs	.+14     	; 0x5d14 <__mulsf3+0x1c>
    5d06:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <__fp_pscB>
    5d0a:	20 f0       	brcs	.+8      	; 0x5d14 <__mulsf3+0x1c>
    5d0c:	95 23       	and	r25, r21
    5d0e:	11 f0       	breq	.+4      	; 0x5d14 <__mulsf3+0x1c>
    5d10:	0c 94 26 2e 	jmp	0x5c4c	; 0x5c4c <__fp_inf>
    5d14:	0c 94 2c 2e 	jmp	0x5c58	; 0x5c58 <__fp_nan>
    5d18:	11 24       	eor	r1, r1
    5d1a:	0c 94 71 2e 	jmp	0x5ce2	; 0x5ce2 <__fp_szero>

00005d1e <__mulsf3x>:
    5d1e:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <__fp_split3>
    5d22:	70 f3       	brcs	.-36     	; 0x5d00 <__mulsf3+0x8>

00005d24 <__mulsf3_pse>:
    5d24:	95 9f       	mul	r25, r21
    5d26:	c1 f3       	breq	.-16     	; 0x5d18 <__mulsf3+0x20>
    5d28:	95 0f       	add	r25, r21
    5d2a:	50 e0       	ldi	r21, 0x00	; 0
    5d2c:	55 1f       	adc	r21, r21
    5d2e:	62 9f       	mul	r22, r18
    5d30:	f0 01       	movw	r30, r0
    5d32:	72 9f       	mul	r23, r18
    5d34:	bb 27       	eor	r27, r27
    5d36:	f0 0d       	add	r31, r0
    5d38:	b1 1d       	adc	r27, r1
    5d3a:	63 9f       	mul	r22, r19
    5d3c:	aa 27       	eor	r26, r26
    5d3e:	f0 0d       	add	r31, r0
    5d40:	b1 1d       	adc	r27, r1
    5d42:	aa 1f       	adc	r26, r26
    5d44:	64 9f       	mul	r22, r20
    5d46:	66 27       	eor	r22, r22
    5d48:	b0 0d       	add	r27, r0
    5d4a:	a1 1d       	adc	r26, r1
    5d4c:	66 1f       	adc	r22, r22
    5d4e:	82 9f       	mul	r24, r18
    5d50:	22 27       	eor	r18, r18
    5d52:	b0 0d       	add	r27, r0
    5d54:	a1 1d       	adc	r26, r1
    5d56:	62 1f       	adc	r22, r18
    5d58:	73 9f       	mul	r23, r19
    5d5a:	b0 0d       	add	r27, r0
    5d5c:	a1 1d       	adc	r26, r1
    5d5e:	62 1f       	adc	r22, r18
    5d60:	83 9f       	mul	r24, r19
    5d62:	a0 0d       	add	r26, r0
    5d64:	61 1d       	adc	r22, r1
    5d66:	22 1f       	adc	r18, r18
    5d68:	74 9f       	mul	r23, r20
    5d6a:	33 27       	eor	r19, r19
    5d6c:	a0 0d       	add	r26, r0
    5d6e:	61 1d       	adc	r22, r1
    5d70:	23 1f       	adc	r18, r19
    5d72:	84 9f       	mul	r24, r20
    5d74:	60 0d       	add	r22, r0
    5d76:	21 1d       	adc	r18, r1
    5d78:	82 2f       	mov	r24, r18
    5d7a:	76 2f       	mov	r23, r22
    5d7c:	6a 2f       	mov	r22, r26
    5d7e:	11 24       	eor	r1, r1
    5d80:	9f 57       	subi	r25, 0x7F	; 127
    5d82:	50 40       	sbci	r21, 0x00	; 0
    5d84:	9a f0       	brmi	.+38     	; 0x5dac <__mulsf3_pse+0x88>
    5d86:	f1 f0       	breq	.+60     	; 0x5dc4 <__mulsf3_pse+0xa0>
    5d88:	88 23       	and	r24, r24
    5d8a:	4a f0       	brmi	.+18     	; 0x5d9e <__mulsf3_pse+0x7a>
    5d8c:	ee 0f       	add	r30, r30
    5d8e:	ff 1f       	adc	r31, r31
    5d90:	bb 1f       	adc	r27, r27
    5d92:	66 1f       	adc	r22, r22
    5d94:	77 1f       	adc	r23, r23
    5d96:	88 1f       	adc	r24, r24
    5d98:	91 50       	subi	r25, 0x01	; 1
    5d9a:	50 40       	sbci	r21, 0x00	; 0
    5d9c:	a9 f7       	brne	.-22     	; 0x5d88 <__mulsf3_pse+0x64>
    5d9e:	9e 3f       	cpi	r25, 0xFE	; 254
    5da0:	51 05       	cpc	r21, r1
    5da2:	80 f0       	brcs	.+32     	; 0x5dc4 <__mulsf3_pse+0xa0>
    5da4:	0c 94 26 2e 	jmp	0x5c4c	; 0x5c4c <__fp_inf>
    5da8:	0c 94 71 2e 	jmp	0x5ce2	; 0x5ce2 <__fp_szero>
    5dac:	5f 3f       	cpi	r21, 0xFF	; 255
    5dae:	e4 f3       	brlt	.-8      	; 0x5da8 <__mulsf3_pse+0x84>
    5db0:	98 3e       	cpi	r25, 0xE8	; 232
    5db2:	d4 f3       	brlt	.-12     	; 0x5da8 <__mulsf3_pse+0x84>
    5db4:	86 95       	lsr	r24
    5db6:	77 95       	ror	r23
    5db8:	67 95       	ror	r22
    5dba:	b7 95       	ror	r27
    5dbc:	f7 95       	ror	r31
    5dbe:	e7 95       	ror	r30
    5dc0:	9f 5f       	subi	r25, 0xFF	; 255
    5dc2:	c1 f7       	brne	.-16     	; 0x5db4 <__mulsf3_pse+0x90>
    5dc4:	fe 2b       	or	r31, r30
    5dc6:	88 0f       	add	r24, r24
    5dc8:	91 1d       	adc	r25, r1
    5dca:	96 95       	lsr	r25
    5dcc:	87 95       	ror	r24
    5dce:	97 f9       	bld	r25, 7
    5dd0:	08 95       	ret

00005dd2 <vfprintf>:
    5dd2:	2f 92       	push	r2
    5dd4:	3f 92       	push	r3
    5dd6:	4f 92       	push	r4
    5dd8:	5f 92       	push	r5
    5dda:	6f 92       	push	r6
    5ddc:	7f 92       	push	r7
    5dde:	8f 92       	push	r8
    5de0:	9f 92       	push	r9
    5de2:	af 92       	push	r10
    5de4:	bf 92       	push	r11
    5de6:	cf 92       	push	r12
    5de8:	df 92       	push	r13
    5dea:	ef 92       	push	r14
    5dec:	ff 92       	push	r15
    5dee:	0f 93       	push	r16
    5df0:	1f 93       	push	r17
    5df2:	cf 93       	push	r28
    5df4:	df 93       	push	r29
    5df6:	cd b7       	in	r28, 0x3d	; 61
    5df8:	de b7       	in	r29, 0x3e	; 62
    5dfa:	60 97       	sbiw	r28, 0x10	; 16
    5dfc:	cd bf       	out	0x3d, r28	; 61
    5dfe:	de bf       	out	0x3e, r29	; 62
    5e00:	7c 01       	movw	r14, r24
    5e02:	1b 01       	movw	r2, r22
    5e04:	6a 01       	movw	r12, r20
    5e06:	fc 01       	movw	r30, r24
    5e08:	16 82       	std	Z+6, r1	; 0x06
    5e0a:	17 82       	std	Z+7, r1	; 0x07
    5e0c:	83 81       	ldd	r24, Z+3	; 0x03
    5e0e:	81 ff       	sbrs	r24, 1
    5e10:	44 c3       	rjmp	.+1672   	; 0x649a <vfprintf+0x6c8>
    5e12:	9e 01       	movw	r18, r28
    5e14:	2f 5f       	subi	r18, 0xFF	; 255
    5e16:	3f 4f       	sbci	r19, 0xFF	; 255
    5e18:	39 01       	movw	r6, r18
    5e1a:	f7 01       	movw	r30, r14
    5e1c:	93 81       	ldd	r25, Z+3	; 0x03
    5e1e:	f1 01       	movw	r30, r2
    5e20:	93 fd       	sbrc	r25, 3
    5e22:	85 91       	lpm	r24, Z+
    5e24:	93 ff       	sbrs	r25, 3
    5e26:	81 91       	ld	r24, Z+
    5e28:	1f 01       	movw	r2, r30
    5e2a:	88 23       	and	r24, r24
    5e2c:	09 f4       	brne	.+2      	; 0x5e30 <vfprintf+0x5e>
    5e2e:	31 c3       	rjmp	.+1634   	; 0x6492 <vfprintf+0x6c0>
    5e30:	85 32       	cpi	r24, 0x25	; 37
    5e32:	39 f4       	brne	.+14     	; 0x5e42 <vfprintf+0x70>
    5e34:	93 fd       	sbrc	r25, 3
    5e36:	85 91       	lpm	r24, Z+
    5e38:	93 ff       	sbrs	r25, 3
    5e3a:	81 91       	ld	r24, Z+
    5e3c:	1f 01       	movw	r2, r30
    5e3e:	85 32       	cpi	r24, 0x25	; 37
    5e40:	39 f4       	brne	.+14     	; 0x5e50 <vfprintf+0x7e>
    5e42:	b7 01       	movw	r22, r14
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    5e4a:	56 01       	movw	r10, r12
    5e4c:	65 01       	movw	r12, r10
    5e4e:	e5 cf       	rjmp	.-54     	; 0x5e1a <vfprintf+0x48>
    5e50:	10 e0       	ldi	r17, 0x00	; 0
    5e52:	51 2c       	mov	r5, r1
    5e54:	91 2c       	mov	r9, r1
    5e56:	ff e1       	ldi	r31, 0x1F	; 31
    5e58:	f9 15       	cp	r31, r9
    5e5a:	d8 f0       	brcs	.+54     	; 0x5e92 <vfprintf+0xc0>
    5e5c:	8b 32       	cpi	r24, 0x2B	; 43
    5e5e:	79 f0       	breq	.+30     	; 0x5e7e <vfprintf+0xac>
    5e60:	38 f4       	brcc	.+14     	; 0x5e70 <vfprintf+0x9e>
    5e62:	80 32       	cpi	r24, 0x20	; 32
    5e64:	79 f0       	breq	.+30     	; 0x5e84 <vfprintf+0xb2>
    5e66:	83 32       	cpi	r24, 0x23	; 35
    5e68:	a1 f4       	brne	.+40     	; 0x5e92 <vfprintf+0xc0>
    5e6a:	f9 2d       	mov	r31, r9
    5e6c:	f0 61       	ori	r31, 0x10	; 16
    5e6e:	2e c0       	rjmp	.+92     	; 0x5ecc <vfprintf+0xfa>
    5e70:	8d 32       	cpi	r24, 0x2D	; 45
    5e72:	61 f0       	breq	.+24     	; 0x5e8c <vfprintf+0xba>
    5e74:	80 33       	cpi	r24, 0x30	; 48
    5e76:	69 f4       	brne	.+26     	; 0x5e92 <vfprintf+0xc0>
    5e78:	29 2d       	mov	r18, r9
    5e7a:	21 60       	ori	r18, 0x01	; 1
    5e7c:	2d c0       	rjmp	.+90     	; 0x5ed8 <vfprintf+0x106>
    5e7e:	39 2d       	mov	r19, r9
    5e80:	32 60       	ori	r19, 0x02	; 2
    5e82:	93 2e       	mov	r9, r19
    5e84:	89 2d       	mov	r24, r9
    5e86:	84 60       	ori	r24, 0x04	; 4
    5e88:	98 2e       	mov	r9, r24
    5e8a:	2a c0       	rjmp	.+84     	; 0x5ee0 <vfprintf+0x10e>
    5e8c:	e9 2d       	mov	r30, r9
    5e8e:	e8 60       	ori	r30, 0x08	; 8
    5e90:	15 c0       	rjmp	.+42     	; 0x5ebc <vfprintf+0xea>
    5e92:	97 fc       	sbrc	r9, 7
    5e94:	2d c0       	rjmp	.+90     	; 0x5ef0 <vfprintf+0x11e>
    5e96:	20 ed       	ldi	r18, 0xD0	; 208
    5e98:	28 0f       	add	r18, r24
    5e9a:	2a 30       	cpi	r18, 0x0A	; 10
    5e9c:	88 f4       	brcc	.+34     	; 0x5ec0 <vfprintf+0xee>
    5e9e:	96 fe       	sbrs	r9, 6
    5ea0:	06 c0       	rjmp	.+12     	; 0x5eae <vfprintf+0xdc>
    5ea2:	3a e0       	ldi	r19, 0x0A	; 10
    5ea4:	13 9f       	mul	r17, r19
    5ea6:	20 0d       	add	r18, r0
    5ea8:	11 24       	eor	r1, r1
    5eaa:	12 2f       	mov	r17, r18
    5eac:	19 c0       	rjmp	.+50     	; 0x5ee0 <vfprintf+0x10e>
    5eae:	8a e0       	ldi	r24, 0x0A	; 10
    5eb0:	58 9e       	mul	r5, r24
    5eb2:	20 0d       	add	r18, r0
    5eb4:	11 24       	eor	r1, r1
    5eb6:	52 2e       	mov	r5, r18
    5eb8:	e9 2d       	mov	r30, r9
    5eba:	e0 62       	ori	r30, 0x20	; 32
    5ebc:	9e 2e       	mov	r9, r30
    5ebe:	10 c0       	rjmp	.+32     	; 0x5ee0 <vfprintf+0x10e>
    5ec0:	8e 32       	cpi	r24, 0x2E	; 46
    5ec2:	31 f4       	brne	.+12     	; 0x5ed0 <vfprintf+0xfe>
    5ec4:	96 fc       	sbrc	r9, 6
    5ec6:	e5 c2       	rjmp	.+1482   	; 0x6492 <vfprintf+0x6c0>
    5ec8:	f9 2d       	mov	r31, r9
    5eca:	f0 64       	ori	r31, 0x40	; 64
    5ecc:	9f 2e       	mov	r9, r31
    5ece:	08 c0       	rjmp	.+16     	; 0x5ee0 <vfprintf+0x10e>
    5ed0:	8c 36       	cpi	r24, 0x6C	; 108
    5ed2:	21 f4       	brne	.+8      	; 0x5edc <vfprintf+0x10a>
    5ed4:	29 2d       	mov	r18, r9
    5ed6:	20 68       	ori	r18, 0x80	; 128
    5ed8:	92 2e       	mov	r9, r18
    5eda:	02 c0       	rjmp	.+4      	; 0x5ee0 <vfprintf+0x10e>
    5edc:	88 36       	cpi	r24, 0x68	; 104
    5ede:	41 f4       	brne	.+16     	; 0x5ef0 <vfprintf+0x11e>
    5ee0:	f1 01       	movw	r30, r2
    5ee2:	93 fd       	sbrc	r25, 3
    5ee4:	85 91       	lpm	r24, Z+
    5ee6:	93 ff       	sbrs	r25, 3
    5ee8:	81 91       	ld	r24, Z+
    5eea:	1f 01       	movw	r2, r30
    5eec:	81 11       	cpse	r24, r1
    5eee:	b3 cf       	rjmp	.-154    	; 0x5e56 <vfprintf+0x84>
    5ef0:	9b eb       	ldi	r25, 0xBB	; 187
    5ef2:	98 0f       	add	r25, r24
    5ef4:	93 30       	cpi	r25, 0x03	; 3
    5ef6:	20 f4       	brcc	.+8      	; 0x5f00 <vfprintf+0x12e>
    5ef8:	99 2d       	mov	r25, r9
    5efa:	90 61       	ori	r25, 0x10	; 16
    5efc:	80 5e       	subi	r24, 0xE0	; 224
    5efe:	07 c0       	rjmp	.+14     	; 0x5f0e <vfprintf+0x13c>
    5f00:	9b e9       	ldi	r25, 0x9B	; 155
    5f02:	98 0f       	add	r25, r24
    5f04:	93 30       	cpi	r25, 0x03	; 3
    5f06:	08 f0       	brcs	.+2      	; 0x5f0a <vfprintf+0x138>
    5f08:	66 c1       	rjmp	.+716    	; 0x61d6 <vfprintf+0x404>
    5f0a:	99 2d       	mov	r25, r9
    5f0c:	9f 7e       	andi	r25, 0xEF	; 239
    5f0e:	96 ff       	sbrs	r25, 6
    5f10:	16 e0       	ldi	r17, 0x06	; 6
    5f12:	9f 73       	andi	r25, 0x3F	; 63
    5f14:	99 2e       	mov	r9, r25
    5f16:	85 36       	cpi	r24, 0x65	; 101
    5f18:	19 f4       	brne	.+6      	; 0x5f20 <vfprintf+0x14e>
    5f1a:	90 64       	ori	r25, 0x40	; 64
    5f1c:	99 2e       	mov	r9, r25
    5f1e:	08 c0       	rjmp	.+16     	; 0x5f30 <vfprintf+0x15e>
    5f20:	86 36       	cpi	r24, 0x66	; 102
    5f22:	21 f4       	brne	.+8      	; 0x5f2c <vfprintf+0x15a>
    5f24:	39 2f       	mov	r19, r25
    5f26:	30 68       	ori	r19, 0x80	; 128
    5f28:	93 2e       	mov	r9, r19
    5f2a:	02 c0       	rjmp	.+4      	; 0x5f30 <vfprintf+0x15e>
    5f2c:	11 11       	cpse	r17, r1
    5f2e:	11 50       	subi	r17, 0x01	; 1
    5f30:	97 fe       	sbrs	r9, 7
    5f32:	07 c0       	rjmp	.+14     	; 0x5f42 <vfprintf+0x170>
    5f34:	1c 33       	cpi	r17, 0x3C	; 60
    5f36:	50 f4       	brcc	.+20     	; 0x5f4c <vfprintf+0x17a>
    5f38:	44 24       	eor	r4, r4
    5f3a:	43 94       	inc	r4
    5f3c:	41 0e       	add	r4, r17
    5f3e:	27 e0       	ldi	r18, 0x07	; 7
    5f40:	0b c0       	rjmp	.+22     	; 0x5f58 <vfprintf+0x186>
    5f42:	18 30       	cpi	r17, 0x08	; 8
    5f44:	38 f0       	brcs	.+14     	; 0x5f54 <vfprintf+0x182>
    5f46:	27 e0       	ldi	r18, 0x07	; 7
    5f48:	17 e0       	ldi	r17, 0x07	; 7
    5f4a:	05 c0       	rjmp	.+10     	; 0x5f56 <vfprintf+0x184>
    5f4c:	27 e0       	ldi	r18, 0x07	; 7
    5f4e:	9c e3       	ldi	r25, 0x3C	; 60
    5f50:	49 2e       	mov	r4, r25
    5f52:	02 c0       	rjmp	.+4      	; 0x5f58 <vfprintf+0x186>
    5f54:	21 2f       	mov	r18, r17
    5f56:	41 2c       	mov	r4, r1
    5f58:	56 01       	movw	r10, r12
    5f5a:	84 e0       	ldi	r24, 0x04	; 4
    5f5c:	a8 0e       	add	r10, r24
    5f5e:	b1 1c       	adc	r11, r1
    5f60:	f6 01       	movw	r30, r12
    5f62:	60 81       	ld	r22, Z
    5f64:	71 81       	ldd	r23, Z+1	; 0x01
    5f66:	82 81       	ldd	r24, Z+2	; 0x02
    5f68:	93 81       	ldd	r25, Z+3	; 0x03
    5f6a:	04 2d       	mov	r16, r4
    5f6c:	a3 01       	movw	r20, r6
    5f6e:	0e 94 b1 32 	call	0x6562	; 0x6562 <__ftoa_engine>
    5f72:	6c 01       	movw	r12, r24
    5f74:	f9 81       	ldd	r31, Y+1	; 0x01
    5f76:	fc 87       	std	Y+12, r31	; 0x0c
    5f78:	f0 ff       	sbrs	r31, 0
    5f7a:	02 c0       	rjmp	.+4      	; 0x5f80 <vfprintf+0x1ae>
    5f7c:	f3 ff       	sbrs	r31, 3
    5f7e:	06 c0       	rjmp	.+12     	; 0x5f8c <vfprintf+0x1ba>
    5f80:	91 fc       	sbrc	r9, 1
    5f82:	06 c0       	rjmp	.+12     	; 0x5f90 <vfprintf+0x1be>
    5f84:	92 fe       	sbrs	r9, 2
    5f86:	06 c0       	rjmp	.+12     	; 0x5f94 <vfprintf+0x1c2>
    5f88:	00 e2       	ldi	r16, 0x20	; 32
    5f8a:	05 c0       	rjmp	.+10     	; 0x5f96 <vfprintf+0x1c4>
    5f8c:	0d e2       	ldi	r16, 0x2D	; 45
    5f8e:	03 c0       	rjmp	.+6      	; 0x5f96 <vfprintf+0x1c4>
    5f90:	0b e2       	ldi	r16, 0x2B	; 43
    5f92:	01 c0       	rjmp	.+2      	; 0x5f96 <vfprintf+0x1c4>
    5f94:	00 e0       	ldi	r16, 0x00	; 0
    5f96:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f98:	8c 70       	andi	r24, 0x0C	; 12
    5f9a:	19 f0       	breq	.+6      	; 0x5fa2 <vfprintf+0x1d0>
    5f9c:	01 11       	cpse	r16, r1
    5f9e:	5a c2       	rjmp	.+1204   	; 0x6454 <vfprintf+0x682>
    5fa0:	9b c2       	rjmp	.+1334   	; 0x64d8 <vfprintf+0x706>
    5fa2:	97 fe       	sbrs	r9, 7
    5fa4:	10 c0       	rjmp	.+32     	; 0x5fc6 <vfprintf+0x1f4>
    5fa6:	4c 0c       	add	r4, r12
    5fa8:	fc 85       	ldd	r31, Y+12	; 0x0c
    5faa:	f4 ff       	sbrs	r31, 4
    5fac:	04 c0       	rjmp	.+8      	; 0x5fb6 <vfprintf+0x1e4>
    5fae:	8a 81       	ldd	r24, Y+2	; 0x02
    5fb0:	81 33       	cpi	r24, 0x31	; 49
    5fb2:	09 f4       	brne	.+2      	; 0x5fb6 <vfprintf+0x1e4>
    5fb4:	4a 94       	dec	r4
    5fb6:	14 14       	cp	r1, r4
    5fb8:	74 f5       	brge	.+92     	; 0x6016 <vfprintf+0x244>
    5fba:	28 e0       	ldi	r18, 0x08	; 8
    5fbc:	24 15       	cp	r18, r4
    5fbe:	78 f5       	brcc	.+94     	; 0x601e <vfprintf+0x24c>
    5fc0:	88 e0       	ldi	r24, 0x08	; 8
    5fc2:	48 2e       	mov	r4, r24
    5fc4:	2c c0       	rjmp	.+88     	; 0x601e <vfprintf+0x24c>
    5fc6:	96 fc       	sbrc	r9, 6
    5fc8:	2a c0       	rjmp	.+84     	; 0x601e <vfprintf+0x24c>
    5fca:	81 2f       	mov	r24, r17
    5fcc:	90 e0       	ldi	r25, 0x00	; 0
    5fce:	8c 15       	cp	r24, r12
    5fd0:	9d 05       	cpc	r25, r13
    5fd2:	9c f0       	brlt	.+38     	; 0x5ffa <vfprintf+0x228>
    5fd4:	3c ef       	ldi	r19, 0xFC	; 252
    5fd6:	c3 16       	cp	r12, r19
    5fd8:	3f ef       	ldi	r19, 0xFF	; 255
    5fda:	d3 06       	cpc	r13, r19
    5fdc:	74 f0       	brlt	.+28     	; 0x5ffa <vfprintf+0x228>
    5fde:	89 2d       	mov	r24, r9
    5fe0:	80 68       	ori	r24, 0x80	; 128
    5fe2:	98 2e       	mov	r9, r24
    5fe4:	0a c0       	rjmp	.+20     	; 0x5ffa <vfprintf+0x228>
    5fe6:	e2 e0       	ldi	r30, 0x02	; 2
    5fe8:	f0 e0       	ldi	r31, 0x00	; 0
    5fea:	ec 0f       	add	r30, r28
    5fec:	fd 1f       	adc	r31, r29
    5fee:	e1 0f       	add	r30, r17
    5ff0:	f1 1d       	adc	r31, r1
    5ff2:	80 81       	ld	r24, Z
    5ff4:	80 33       	cpi	r24, 0x30	; 48
    5ff6:	19 f4       	brne	.+6      	; 0x5ffe <vfprintf+0x22c>
    5ff8:	11 50       	subi	r17, 0x01	; 1
    5ffa:	11 11       	cpse	r17, r1
    5ffc:	f4 cf       	rjmp	.-24     	; 0x5fe6 <vfprintf+0x214>
    5ffe:	97 fe       	sbrs	r9, 7
    6000:	0e c0       	rjmp	.+28     	; 0x601e <vfprintf+0x24c>
    6002:	44 24       	eor	r4, r4
    6004:	43 94       	inc	r4
    6006:	41 0e       	add	r4, r17
    6008:	81 2f       	mov	r24, r17
    600a:	90 e0       	ldi	r25, 0x00	; 0
    600c:	c8 16       	cp	r12, r24
    600e:	d9 06       	cpc	r13, r25
    6010:	2c f4       	brge	.+10     	; 0x601c <vfprintf+0x24a>
    6012:	1c 19       	sub	r17, r12
    6014:	04 c0       	rjmp	.+8      	; 0x601e <vfprintf+0x24c>
    6016:	44 24       	eor	r4, r4
    6018:	43 94       	inc	r4
    601a:	01 c0       	rjmp	.+2      	; 0x601e <vfprintf+0x24c>
    601c:	10 e0       	ldi	r17, 0x00	; 0
    601e:	97 fe       	sbrs	r9, 7
    6020:	06 c0       	rjmp	.+12     	; 0x602e <vfprintf+0x25c>
    6022:	1c 14       	cp	r1, r12
    6024:	1d 04       	cpc	r1, r13
    6026:	34 f4       	brge	.+12     	; 0x6034 <vfprintf+0x262>
    6028:	c6 01       	movw	r24, r12
    602a:	01 96       	adiw	r24, 0x01	; 1
    602c:	05 c0       	rjmp	.+10     	; 0x6038 <vfprintf+0x266>
    602e:	85 e0       	ldi	r24, 0x05	; 5
    6030:	90 e0       	ldi	r25, 0x00	; 0
    6032:	02 c0       	rjmp	.+4      	; 0x6038 <vfprintf+0x266>
    6034:	81 e0       	ldi	r24, 0x01	; 1
    6036:	90 e0       	ldi	r25, 0x00	; 0
    6038:	01 11       	cpse	r16, r1
    603a:	01 96       	adiw	r24, 0x01	; 1
    603c:	11 23       	and	r17, r17
    603e:	31 f0       	breq	.+12     	; 0x604c <vfprintf+0x27a>
    6040:	21 2f       	mov	r18, r17
    6042:	30 e0       	ldi	r19, 0x00	; 0
    6044:	2f 5f       	subi	r18, 0xFF	; 255
    6046:	3f 4f       	sbci	r19, 0xFF	; 255
    6048:	82 0f       	add	r24, r18
    604a:	93 1f       	adc	r25, r19
    604c:	25 2d       	mov	r18, r5
    604e:	30 e0       	ldi	r19, 0x00	; 0
    6050:	82 17       	cp	r24, r18
    6052:	93 07       	cpc	r25, r19
    6054:	14 f4       	brge	.+4      	; 0x605a <vfprintf+0x288>
    6056:	58 1a       	sub	r5, r24
    6058:	01 c0       	rjmp	.+2      	; 0x605c <vfprintf+0x28a>
    605a:	51 2c       	mov	r5, r1
    605c:	89 2d       	mov	r24, r9
    605e:	89 70       	andi	r24, 0x09	; 9
    6060:	49 f4       	brne	.+18     	; 0x6074 <vfprintf+0x2a2>
    6062:	55 20       	and	r5, r5
    6064:	39 f0       	breq	.+14     	; 0x6074 <vfprintf+0x2a2>
    6066:	b7 01       	movw	r22, r14
    6068:	80 e2       	ldi	r24, 0x20	; 32
    606a:	90 e0       	ldi	r25, 0x00	; 0
    606c:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    6070:	5a 94       	dec	r5
    6072:	f7 cf       	rjmp	.-18     	; 0x6062 <vfprintf+0x290>
    6074:	00 23       	and	r16, r16
    6076:	29 f0       	breq	.+10     	; 0x6082 <vfprintf+0x2b0>
    6078:	b7 01       	movw	r22, r14
    607a:	80 2f       	mov	r24, r16
    607c:	90 e0       	ldi	r25, 0x00	; 0
    607e:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    6082:	93 fc       	sbrc	r9, 3
    6084:	09 c0       	rjmp	.+18     	; 0x6098 <vfprintf+0x2c6>
    6086:	55 20       	and	r5, r5
    6088:	39 f0       	breq	.+14     	; 0x6098 <vfprintf+0x2c6>
    608a:	b7 01       	movw	r22, r14
    608c:	80 e3       	ldi	r24, 0x30	; 48
    608e:	90 e0       	ldi	r25, 0x00	; 0
    6090:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    6094:	5a 94       	dec	r5
    6096:	f7 cf       	rjmp	.-18     	; 0x6086 <vfprintf+0x2b4>
    6098:	97 fe       	sbrs	r9, 7
    609a:	4c c0       	rjmp	.+152    	; 0x6134 <vfprintf+0x362>
    609c:	46 01       	movw	r8, r12
    609e:	d7 fe       	sbrs	r13, 7
    60a0:	02 c0       	rjmp	.+4      	; 0x60a6 <vfprintf+0x2d4>
    60a2:	81 2c       	mov	r8, r1
    60a4:	91 2c       	mov	r9, r1
    60a6:	c6 01       	movw	r24, r12
    60a8:	88 19       	sub	r24, r8
    60aa:	99 09       	sbc	r25, r9
    60ac:	f3 01       	movw	r30, r6
    60ae:	e8 0f       	add	r30, r24
    60b0:	f9 1f       	adc	r31, r25
    60b2:	ed 87       	std	Y+13, r30	; 0x0d
    60b4:	fe 87       	std	Y+14, r31	; 0x0e
    60b6:	96 01       	movw	r18, r12
    60b8:	24 19       	sub	r18, r4
    60ba:	31 09       	sbc	r19, r1
    60bc:	2f 87       	std	Y+15, r18	; 0x0f
    60be:	38 8b       	std	Y+16, r19	; 0x10
    60c0:	01 2f       	mov	r16, r17
    60c2:	10 e0       	ldi	r17, 0x00	; 0
    60c4:	11 95       	neg	r17
    60c6:	01 95       	neg	r16
    60c8:	11 09       	sbc	r17, r1
    60ca:	3f ef       	ldi	r19, 0xFF	; 255
    60cc:	83 16       	cp	r8, r19
    60ce:	93 06       	cpc	r9, r19
    60d0:	29 f4       	brne	.+10     	; 0x60dc <vfprintf+0x30a>
    60d2:	b7 01       	movw	r22, r14
    60d4:	8e e2       	ldi	r24, 0x2E	; 46
    60d6:	90 e0       	ldi	r25, 0x00	; 0
    60d8:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    60dc:	c8 14       	cp	r12, r8
    60de:	d9 04       	cpc	r13, r9
    60e0:	4c f0       	brlt	.+18     	; 0x60f4 <vfprintf+0x322>
    60e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    60e4:	98 89       	ldd	r25, Y+16	; 0x10
    60e6:	88 15       	cp	r24, r8
    60e8:	99 05       	cpc	r25, r9
    60ea:	24 f4       	brge	.+8      	; 0x60f4 <vfprintf+0x322>
    60ec:	ed 85       	ldd	r30, Y+13	; 0x0d
    60ee:	fe 85       	ldd	r31, Y+14	; 0x0e
    60f0:	81 81       	ldd	r24, Z+1	; 0x01
    60f2:	01 c0       	rjmp	.+2      	; 0x60f6 <vfprintf+0x324>
    60f4:	80 e3       	ldi	r24, 0x30	; 48
    60f6:	f1 e0       	ldi	r31, 0x01	; 1
    60f8:	8f 1a       	sub	r8, r31
    60fa:	91 08       	sbc	r9, r1
    60fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    60fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    6100:	2f 5f       	subi	r18, 0xFF	; 255
    6102:	3f 4f       	sbci	r19, 0xFF	; 255
    6104:	2d 87       	std	Y+13, r18	; 0x0d
    6106:	3e 87       	std	Y+14, r19	; 0x0e
    6108:	80 16       	cp	r8, r16
    610a:	91 06       	cpc	r9, r17
    610c:	2c f0       	brlt	.+10     	; 0x6118 <vfprintf+0x346>
    610e:	b7 01       	movw	r22, r14
    6110:	90 e0       	ldi	r25, 0x00	; 0
    6112:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    6116:	d9 cf       	rjmp	.-78     	; 0x60ca <vfprintf+0x2f8>
    6118:	c8 14       	cp	r12, r8
    611a:	d9 04       	cpc	r13, r9
    611c:	41 f4       	brne	.+16     	; 0x612e <vfprintf+0x35c>
    611e:	9a 81       	ldd	r25, Y+2	; 0x02
    6120:	96 33       	cpi	r25, 0x36	; 54
    6122:	20 f4       	brcc	.+8      	; 0x612c <vfprintf+0x35a>
    6124:	95 33       	cpi	r25, 0x35	; 53
    6126:	19 f4       	brne	.+6      	; 0x612e <vfprintf+0x35c>
    6128:	3c 85       	ldd	r19, Y+12	; 0x0c
    612a:	34 ff       	sbrs	r19, 4
    612c:	81 e3       	ldi	r24, 0x31	; 49
    612e:	b7 01       	movw	r22, r14
    6130:	90 e0       	ldi	r25, 0x00	; 0
    6132:	4e c0       	rjmp	.+156    	; 0x61d0 <vfprintf+0x3fe>
    6134:	8a 81       	ldd	r24, Y+2	; 0x02
    6136:	81 33       	cpi	r24, 0x31	; 49
    6138:	19 f0       	breq	.+6      	; 0x6140 <vfprintf+0x36e>
    613a:	9c 85       	ldd	r25, Y+12	; 0x0c
    613c:	9f 7e       	andi	r25, 0xEF	; 239
    613e:	9c 87       	std	Y+12, r25	; 0x0c
    6140:	b7 01       	movw	r22, r14
    6142:	90 e0       	ldi	r25, 0x00	; 0
    6144:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    6148:	11 11       	cpse	r17, r1
    614a:	05 c0       	rjmp	.+10     	; 0x6156 <vfprintf+0x384>
    614c:	94 fc       	sbrc	r9, 4
    614e:	18 c0       	rjmp	.+48     	; 0x6180 <vfprintf+0x3ae>
    6150:	85 e6       	ldi	r24, 0x65	; 101
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	17 c0       	rjmp	.+46     	; 0x6184 <vfprintf+0x3b2>
    6156:	b7 01       	movw	r22, r14
    6158:	8e e2       	ldi	r24, 0x2E	; 46
    615a:	90 e0       	ldi	r25, 0x00	; 0
    615c:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    6160:	1e 5f       	subi	r17, 0xFE	; 254
    6162:	82 e0       	ldi	r24, 0x02	; 2
    6164:	01 e0       	ldi	r16, 0x01	; 1
    6166:	08 0f       	add	r16, r24
    6168:	f3 01       	movw	r30, r6
    616a:	e8 0f       	add	r30, r24
    616c:	f1 1d       	adc	r31, r1
    616e:	80 81       	ld	r24, Z
    6170:	b7 01       	movw	r22, r14
    6172:	90 e0       	ldi	r25, 0x00	; 0
    6174:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    6178:	80 2f       	mov	r24, r16
    617a:	01 13       	cpse	r16, r17
    617c:	f3 cf       	rjmp	.-26     	; 0x6164 <vfprintf+0x392>
    617e:	e6 cf       	rjmp	.-52     	; 0x614c <vfprintf+0x37a>
    6180:	85 e4       	ldi	r24, 0x45	; 69
    6182:	90 e0       	ldi	r25, 0x00	; 0
    6184:	b7 01       	movw	r22, r14
    6186:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    618a:	d7 fc       	sbrc	r13, 7
    618c:	06 c0       	rjmp	.+12     	; 0x619a <vfprintf+0x3c8>
    618e:	c1 14       	cp	r12, r1
    6190:	d1 04       	cpc	r13, r1
    6192:	41 f4       	brne	.+16     	; 0x61a4 <vfprintf+0x3d2>
    6194:	ec 85       	ldd	r30, Y+12	; 0x0c
    6196:	e4 ff       	sbrs	r30, 4
    6198:	05 c0       	rjmp	.+10     	; 0x61a4 <vfprintf+0x3d2>
    619a:	d1 94       	neg	r13
    619c:	c1 94       	neg	r12
    619e:	d1 08       	sbc	r13, r1
    61a0:	8d e2       	ldi	r24, 0x2D	; 45
    61a2:	01 c0       	rjmp	.+2      	; 0x61a6 <vfprintf+0x3d4>
    61a4:	8b e2       	ldi	r24, 0x2B	; 43
    61a6:	b7 01       	movw	r22, r14
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    61ae:	80 e3       	ldi	r24, 0x30	; 48
    61b0:	2a e0       	ldi	r18, 0x0A	; 10
    61b2:	c2 16       	cp	r12, r18
    61b4:	d1 04       	cpc	r13, r1
    61b6:	2c f0       	brlt	.+10     	; 0x61c2 <vfprintf+0x3f0>
    61b8:	8f 5f       	subi	r24, 0xFF	; 255
    61ba:	fa e0       	ldi	r31, 0x0A	; 10
    61bc:	cf 1a       	sub	r12, r31
    61be:	d1 08       	sbc	r13, r1
    61c0:	f7 cf       	rjmp	.-18     	; 0x61b0 <vfprintf+0x3de>
    61c2:	b7 01       	movw	r22, r14
    61c4:	90 e0       	ldi	r25, 0x00	; 0
    61c6:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    61ca:	b7 01       	movw	r22, r14
    61cc:	c6 01       	movw	r24, r12
    61ce:	c0 96       	adiw	r24, 0x30	; 48
    61d0:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    61d4:	54 c1       	rjmp	.+680    	; 0x647e <vfprintf+0x6ac>
    61d6:	83 36       	cpi	r24, 0x63	; 99
    61d8:	31 f0       	breq	.+12     	; 0x61e6 <vfprintf+0x414>
    61da:	83 37       	cpi	r24, 0x73	; 115
    61dc:	79 f0       	breq	.+30     	; 0x61fc <vfprintf+0x42a>
    61de:	83 35       	cpi	r24, 0x53	; 83
    61e0:	09 f0       	breq	.+2      	; 0x61e4 <vfprintf+0x412>
    61e2:	56 c0       	rjmp	.+172    	; 0x6290 <vfprintf+0x4be>
    61e4:	20 c0       	rjmp	.+64     	; 0x6226 <vfprintf+0x454>
    61e6:	56 01       	movw	r10, r12
    61e8:	32 e0       	ldi	r19, 0x02	; 2
    61ea:	a3 0e       	add	r10, r19
    61ec:	b1 1c       	adc	r11, r1
    61ee:	f6 01       	movw	r30, r12
    61f0:	80 81       	ld	r24, Z
    61f2:	89 83       	std	Y+1, r24	; 0x01
    61f4:	01 e0       	ldi	r16, 0x01	; 1
    61f6:	10 e0       	ldi	r17, 0x00	; 0
    61f8:	63 01       	movw	r12, r6
    61fa:	12 c0       	rjmp	.+36     	; 0x6220 <vfprintf+0x44e>
    61fc:	56 01       	movw	r10, r12
    61fe:	f2 e0       	ldi	r31, 0x02	; 2
    6200:	af 0e       	add	r10, r31
    6202:	b1 1c       	adc	r11, r1
    6204:	f6 01       	movw	r30, r12
    6206:	c0 80       	ld	r12, Z
    6208:	d1 80       	ldd	r13, Z+1	; 0x01
    620a:	96 fe       	sbrs	r9, 6
    620c:	03 c0       	rjmp	.+6      	; 0x6214 <vfprintf+0x442>
    620e:	61 2f       	mov	r22, r17
    6210:	70 e0       	ldi	r23, 0x00	; 0
    6212:	02 c0       	rjmp	.+4      	; 0x6218 <vfprintf+0x446>
    6214:	6f ef       	ldi	r22, 0xFF	; 255
    6216:	7f ef       	ldi	r23, 0xFF	; 255
    6218:	c6 01       	movw	r24, r12
    621a:	0e 94 ad 33 	call	0x675a	; 0x675a <strnlen>
    621e:	8c 01       	movw	r16, r24
    6220:	f9 2d       	mov	r31, r9
    6222:	ff 77       	andi	r31, 0x7F	; 127
    6224:	14 c0       	rjmp	.+40     	; 0x624e <vfprintf+0x47c>
    6226:	56 01       	movw	r10, r12
    6228:	22 e0       	ldi	r18, 0x02	; 2
    622a:	a2 0e       	add	r10, r18
    622c:	b1 1c       	adc	r11, r1
    622e:	f6 01       	movw	r30, r12
    6230:	c0 80       	ld	r12, Z
    6232:	d1 80       	ldd	r13, Z+1	; 0x01
    6234:	96 fe       	sbrs	r9, 6
    6236:	03 c0       	rjmp	.+6      	; 0x623e <vfprintf+0x46c>
    6238:	61 2f       	mov	r22, r17
    623a:	70 e0       	ldi	r23, 0x00	; 0
    623c:	02 c0       	rjmp	.+4      	; 0x6242 <vfprintf+0x470>
    623e:	6f ef       	ldi	r22, 0xFF	; 255
    6240:	7f ef       	ldi	r23, 0xFF	; 255
    6242:	c6 01       	movw	r24, r12
    6244:	0e 94 89 33 	call	0x6712	; 0x6712 <strnlen_P>
    6248:	8c 01       	movw	r16, r24
    624a:	f9 2d       	mov	r31, r9
    624c:	f0 68       	ori	r31, 0x80	; 128
    624e:	9f 2e       	mov	r9, r31
    6250:	f3 fd       	sbrc	r31, 3
    6252:	1a c0       	rjmp	.+52     	; 0x6288 <vfprintf+0x4b6>
    6254:	85 2d       	mov	r24, r5
    6256:	90 e0       	ldi	r25, 0x00	; 0
    6258:	08 17       	cp	r16, r24
    625a:	19 07       	cpc	r17, r25
    625c:	a8 f4       	brcc	.+42     	; 0x6288 <vfprintf+0x4b6>
    625e:	b7 01       	movw	r22, r14
    6260:	80 e2       	ldi	r24, 0x20	; 32
    6262:	90 e0       	ldi	r25, 0x00	; 0
    6264:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    6268:	5a 94       	dec	r5
    626a:	f4 cf       	rjmp	.-24     	; 0x6254 <vfprintf+0x482>
    626c:	f6 01       	movw	r30, r12
    626e:	97 fc       	sbrc	r9, 7
    6270:	85 91       	lpm	r24, Z+
    6272:	97 fe       	sbrs	r9, 7
    6274:	81 91       	ld	r24, Z+
    6276:	6f 01       	movw	r12, r30
    6278:	b7 01       	movw	r22, r14
    627a:	90 e0       	ldi	r25, 0x00	; 0
    627c:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    6280:	51 10       	cpse	r5, r1
    6282:	5a 94       	dec	r5
    6284:	01 50       	subi	r16, 0x01	; 1
    6286:	11 09       	sbc	r17, r1
    6288:	01 15       	cp	r16, r1
    628a:	11 05       	cpc	r17, r1
    628c:	79 f7       	brne	.-34     	; 0x626c <vfprintf+0x49a>
    628e:	f7 c0       	rjmp	.+494    	; 0x647e <vfprintf+0x6ac>
    6290:	84 36       	cpi	r24, 0x64	; 100
    6292:	11 f0       	breq	.+4      	; 0x6298 <vfprintf+0x4c6>
    6294:	89 36       	cpi	r24, 0x69	; 105
    6296:	61 f5       	brne	.+88     	; 0x62f0 <vfprintf+0x51e>
    6298:	56 01       	movw	r10, r12
    629a:	97 fe       	sbrs	r9, 7
    629c:	09 c0       	rjmp	.+18     	; 0x62b0 <vfprintf+0x4de>
    629e:	24 e0       	ldi	r18, 0x04	; 4
    62a0:	a2 0e       	add	r10, r18
    62a2:	b1 1c       	adc	r11, r1
    62a4:	f6 01       	movw	r30, r12
    62a6:	60 81       	ld	r22, Z
    62a8:	71 81       	ldd	r23, Z+1	; 0x01
    62aa:	82 81       	ldd	r24, Z+2	; 0x02
    62ac:	93 81       	ldd	r25, Z+3	; 0x03
    62ae:	0a c0       	rjmp	.+20     	; 0x62c4 <vfprintf+0x4f2>
    62b0:	f2 e0       	ldi	r31, 0x02	; 2
    62b2:	af 0e       	add	r10, r31
    62b4:	b1 1c       	adc	r11, r1
    62b6:	f6 01       	movw	r30, r12
    62b8:	60 81       	ld	r22, Z
    62ba:	71 81       	ldd	r23, Z+1	; 0x01
    62bc:	07 2e       	mov	r0, r23
    62be:	00 0c       	add	r0, r0
    62c0:	88 0b       	sbc	r24, r24
    62c2:	99 0b       	sbc	r25, r25
    62c4:	f9 2d       	mov	r31, r9
    62c6:	ff 76       	andi	r31, 0x6F	; 111
    62c8:	9f 2e       	mov	r9, r31
    62ca:	97 ff       	sbrs	r25, 7
    62cc:	09 c0       	rjmp	.+18     	; 0x62e0 <vfprintf+0x50e>
    62ce:	90 95       	com	r25
    62d0:	80 95       	com	r24
    62d2:	70 95       	com	r23
    62d4:	61 95       	neg	r22
    62d6:	7f 4f       	sbci	r23, 0xFF	; 255
    62d8:	8f 4f       	sbci	r24, 0xFF	; 255
    62da:	9f 4f       	sbci	r25, 0xFF	; 255
    62dc:	f0 68       	ori	r31, 0x80	; 128
    62de:	9f 2e       	mov	r9, r31
    62e0:	2a e0       	ldi	r18, 0x0A	; 10
    62e2:	30 e0       	ldi	r19, 0x00	; 0
    62e4:	a3 01       	movw	r20, r6
    62e6:	0e 94 24 34 	call	0x6848	; 0x6848 <__ultoa_invert>
    62ea:	c8 2e       	mov	r12, r24
    62ec:	c6 18       	sub	r12, r6
    62ee:	3f c0       	rjmp	.+126    	; 0x636e <vfprintf+0x59c>
    62f0:	09 2d       	mov	r16, r9
    62f2:	85 37       	cpi	r24, 0x75	; 117
    62f4:	21 f4       	brne	.+8      	; 0x62fe <vfprintf+0x52c>
    62f6:	0f 7e       	andi	r16, 0xEF	; 239
    62f8:	2a e0       	ldi	r18, 0x0A	; 10
    62fa:	30 e0       	ldi	r19, 0x00	; 0
    62fc:	1d c0       	rjmp	.+58     	; 0x6338 <vfprintf+0x566>
    62fe:	09 7f       	andi	r16, 0xF9	; 249
    6300:	8f 36       	cpi	r24, 0x6F	; 111
    6302:	91 f0       	breq	.+36     	; 0x6328 <vfprintf+0x556>
    6304:	18 f4       	brcc	.+6      	; 0x630c <vfprintf+0x53a>
    6306:	88 35       	cpi	r24, 0x58	; 88
    6308:	59 f0       	breq	.+22     	; 0x6320 <vfprintf+0x54e>
    630a:	c3 c0       	rjmp	.+390    	; 0x6492 <vfprintf+0x6c0>
    630c:	80 37       	cpi	r24, 0x70	; 112
    630e:	19 f0       	breq	.+6      	; 0x6316 <vfprintf+0x544>
    6310:	88 37       	cpi	r24, 0x78	; 120
    6312:	11 f0       	breq	.+4      	; 0x6318 <vfprintf+0x546>
    6314:	be c0       	rjmp	.+380    	; 0x6492 <vfprintf+0x6c0>
    6316:	00 61       	ori	r16, 0x10	; 16
    6318:	04 ff       	sbrs	r16, 4
    631a:	09 c0       	rjmp	.+18     	; 0x632e <vfprintf+0x55c>
    631c:	04 60       	ori	r16, 0x04	; 4
    631e:	07 c0       	rjmp	.+14     	; 0x632e <vfprintf+0x55c>
    6320:	94 fe       	sbrs	r9, 4
    6322:	08 c0       	rjmp	.+16     	; 0x6334 <vfprintf+0x562>
    6324:	06 60       	ori	r16, 0x06	; 6
    6326:	06 c0       	rjmp	.+12     	; 0x6334 <vfprintf+0x562>
    6328:	28 e0       	ldi	r18, 0x08	; 8
    632a:	30 e0       	ldi	r19, 0x00	; 0
    632c:	05 c0       	rjmp	.+10     	; 0x6338 <vfprintf+0x566>
    632e:	20 e1       	ldi	r18, 0x10	; 16
    6330:	30 e0       	ldi	r19, 0x00	; 0
    6332:	02 c0       	rjmp	.+4      	; 0x6338 <vfprintf+0x566>
    6334:	20 e1       	ldi	r18, 0x10	; 16
    6336:	32 e0       	ldi	r19, 0x02	; 2
    6338:	56 01       	movw	r10, r12
    633a:	07 ff       	sbrs	r16, 7
    633c:	09 c0       	rjmp	.+18     	; 0x6350 <vfprintf+0x57e>
    633e:	84 e0       	ldi	r24, 0x04	; 4
    6340:	a8 0e       	add	r10, r24
    6342:	b1 1c       	adc	r11, r1
    6344:	f6 01       	movw	r30, r12
    6346:	60 81       	ld	r22, Z
    6348:	71 81       	ldd	r23, Z+1	; 0x01
    634a:	82 81       	ldd	r24, Z+2	; 0x02
    634c:	93 81       	ldd	r25, Z+3	; 0x03
    634e:	08 c0       	rjmp	.+16     	; 0x6360 <vfprintf+0x58e>
    6350:	f2 e0       	ldi	r31, 0x02	; 2
    6352:	af 0e       	add	r10, r31
    6354:	b1 1c       	adc	r11, r1
    6356:	f6 01       	movw	r30, r12
    6358:	60 81       	ld	r22, Z
    635a:	71 81       	ldd	r23, Z+1	; 0x01
    635c:	80 e0       	ldi	r24, 0x00	; 0
    635e:	90 e0       	ldi	r25, 0x00	; 0
    6360:	a3 01       	movw	r20, r6
    6362:	0e 94 24 34 	call	0x6848	; 0x6848 <__ultoa_invert>
    6366:	c8 2e       	mov	r12, r24
    6368:	c6 18       	sub	r12, r6
    636a:	0f 77       	andi	r16, 0x7F	; 127
    636c:	90 2e       	mov	r9, r16
    636e:	96 fe       	sbrs	r9, 6
    6370:	0b c0       	rjmp	.+22     	; 0x6388 <vfprintf+0x5b6>
    6372:	09 2d       	mov	r16, r9
    6374:	0e 7f       	andi	r16, 0xFE	; 254
    6376:	c1 16       	cp	r12, r17
    6378:	50 f4       	brcc	.+20     	; 0x638e <vfprintf+0x5bc>
    637a:	94 fe       	sbrs	r9, 4
    637c:	0a c0       	rjmp	.+20     	; 0x6392 <vfprintf+0x5c0>
    637e:	92 fc       	sbrc	r9, 2
    6380:	08 c0       	rjmp	.+16     	; 0x6392 <vfprintf+0x5c0>
    6382:	09 2d       	mov	r16, r9
    6384:	0e 7e       	andi	r16, 0xEE	; 238
    6386:	05 c0       	rjmp	.+10     	; 0x6392 <vfprintf+0x5c0>
    6388:	dc 2c       	mov	r13, r12
    638a:	09 2d       	mov	r16, r9
    638c:	03 c0       	rjmp	.+6      	; 0x6394 <vfprintf+0x5c2>
    638e:	dc 2c       	mov	r13, r12
    6390:	01 c0       	rjmp	.+2      	; 0x6394 <vfprintf+0x5c2>
    6392:	d1 2e       	mov	r13, r17
    6394:	04 ff       	sbrs	r16, 4
    6396:	0d c0       	rjmp	.+26     	; 0x63b2 <vfprintf+0x5e0>
    6398:	fe 01       	movw	r30, r28
    639a:	ec 0d       	add	r30, r12
    639c:	f1 1d       	adc	r31, r1
    639e:	80 81       	ld	r24, Z
    63a0:	80 33       	cpi	r24, 0x30	; 48
    63a2:	11 f4       	brne	.+4      	; 0x63a8 <vfprintf+0x5d6>
    63a4:	09 7e       	andi	r16, 0xE9	; 233
    63a6:	09 c0       	rjmp	.+18     	; 0x63ba <vfprintf+0x5e8>
    63a8:	02 ff       	sbrs	r16, 2
    63aa:	06 c0       	rjmp	.+12     	; 0x63b8 <vfprintf+0x5e6>
    63ac:	d3 94       	inc	r13
    63ae:	d3 94       	inc	r13
    63b0:	04 c0       	rjmp	.+8      	; 0x63ba <vfprintf+0x5e8>
    63b2:	80 2f       	mov	r24, r16
    63b4:	86 78       	andi	r24, 0x86	; 134
    63b6:	09 f0       	breq	.+2      	; 0x63ba <vfprintf+0x5e8>
    63b8:	d3 94       	inc	r13
    63ba:	03 fd       	sbrc	r16, 3
    63bc:	11 c0       	rjmp	.+34     	; 0x63e0 <vfprintf+0x60e>
    63be:	00 ff       	sbrs	r16, 0
    63c0:	06 c0       	rjmp	.+12     	; 0x63ce <vfprintf+0x5fc>
    63c2:	1c 2d       	mov	r17, r12
    63c4:	d5 14       	cp	r13, r5
    63c6:	80 f4       	brcc	.+32     	; 0x63e8 <vfprintf+0x616>
    63c8:	15 0d       	add	r17, r5
    63ca:	1d 19       	sub	r17, r13
    63cc:	0d c0       	rjmp	.+26     	; 0x63e8 <vfprintf+0x616>
    63ce:	d5 14       	cp	r13, r5
    63d0:	58 f4       	brcc	.+22     	; 0x63e8 <vfprintf+0x616>
    63d2:	b7 01       	movw	r22, r14
    63d4:	80 e2       	ldi	r24, 0x20	; 32
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    63dc:	d3 94       	inc	r13
    63de:	f7 cf       	rjmp	.-18     	; 0x63ce <vfprintf+0x5fc>
    63e0:	d5 14       	cp	r13, r5
    63e2:	10 f4       	brcc	.+4      	; 0x63e8 <vfprintf+0x616>
    63e4:	5d 18       	sub	r5, r13
    63e6:	01 c0       	rjmp	.+2      	; 0x63ea <vfprintf+0x618>
    63e8:	51 2c       	mov	r5, r1
    63ea:	04 ff       	sbrs	r16, 4
    63ec:	10 c0       	rjmp	.+32     	; 0x640e <vfprintf+0x63c>
    63ee:	b7 01       	movw	r22, r14
    63f0:	80 e3       	ldi	r24, 0x30	; 48
    63f2:	90 e0       	ldi	r25, 0x00	; 0
    63f4:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    63f8:	02 ff       	sbrs	r16, 2
    63fa:	17 c0       	rjmp	.+46     	; 0x642a <vfprintf+0x658>
    63fc:	01 fd       	sbrc	r16, 1
    63fe:	03 c0       	rjmp	.+6      	; 0x6406 <vfprintf+0x634>
    6400:	88 e7       	ldi	r24, 0x78	; 120
    6402:	90 e0       	ldi	r25, 0x00	; 0
    6404:	02 c0       	rjmp	.+4      	; 0x640a <vfprintf+0x638>
    6406:	88 e5       	ldi	r24, 0x58	; 88
    6408:	90 e0       	ldi	r25, 0x00	; 0
    640a:	b7 01       	movw	r22, r14
    640c:	0c c0       	rjmp	.+24     	; 0x6426 <vfprintf+0x654>
    640e:	80 2f       	mov	r24, r16
    6410:	86 78       	andi	r24, 0x86	; 134
    6412:	59 f0       	breq	.+22     	; 0x642a <vfprintf+0x658>
    6414:	01 ff       	sbrs	r16, 1
    6416:	02 c0       	rjmp	.+4      	; 0x641c <vfprintf+0x64a>
    6418:	8b e2       	ldi	r24, 0x2B	; 43
    641a:	01 c0       	rjmp	.+2      	; 0x641e <vfprintf+0x64c>
    641c:	80 e2       	ldi	r24, 0x20	; 32
    641e:	07 fd       	sbrc	r16, 7
    6420:	8d e2       	ldi	r24, 0x2D	; 45
    6422:	b7 01       	movw	r22, r14
    6424:	90 e0       	ldi	r25, 0x00	; 0
    6426:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    642a:	c1 16       	cp	r12, r17
    642c:	38 f4       	brcc	.+14     	; 0x643c <vfprintf+0x66a>
    642e:	b7 01       	movw	r22, r14
    6430:	80 e3       	ldi	r24, 0x30	; 48
    6432:	90 e0       	ldi	r25, 0x00	; 0
    6434:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    6438:	11 50       	subi	r17, 0x01	; 1
    643a:	f7 cf       	rjmp	.-18     	; 0x642a <vfprintf+0x658>
    643c:	ca 94       	dec	r12
    643e:	f3 01       	movw	r30, r6
    6440:	ec 0d       	add	r30, r12
    6442:	f1 1d       	adc	r31, r1
    6444:	80 81       	ld	r24, Z
    6446:	b7 01       	movw	r22, r14
    6448:	90 e0       	ldi	r25, 0x00	; 0
    644a:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    644e:	c1 10       	cpse	r12, r1
    6450:	f5 cf       	rjmp	.-22     	; 0x643c <vfprintf+0x66a>
    6452:	15 c0       	rjmp	.+42     	; 0x647e <vfprintf+0x6ac>
    6454:	f4 e0       	ldi	r31, 0x04	; 4
    6456:	f5 15       	cp	r31, r5
    6458:	60 f5       	brcc	.+88     	; 0x64b2 <vfprintf+0x6e0>
    645a:	84 e0       	ldi	r24, 0x04	; 4
    645c:	58 1a       	sub	r5, r24
    645e:	93 fe       	sbrs	r9, 3
    6460:	1f c0       	rjmp	.+62     	; 0x64a0 <vfprintf+0x6ce>
    6462:	01 11       	cpse	r16, r1
    6464:	27 c0       	rjmp	.+78     	; 0x64b4 <vfprintf+0x6e2>
    6466:	2c 85       	ldd	r18, Y+12	; 0x0c
    6468:	23 ff       	sbrs	r18, 3
    646a:	2a c0       	rjmp	.+84     	; 0x64c0 <vfprintf+0x6ee>
    646c:	0c e3       	ldi	r16, 0x3C	; 60
    646e:	12 e0       	ldi	r17, 0x02	; 2
    6470:	39 2d       	mov	r19, r9
    6472:	30 71       	andi	r19, 0x10	; 16
    6474:	93 2e       	mov	r9, r19
    6476:	f8 01       	movw	r30, r16
    6478:	84 91       	lpm	r24, Z
    647a:	81 11       	cpse	r24, r1
    647c:	24 c0       	rjmp	.+72     	; 0x64c6 <vfprintf+0x6f4>
    647e:	55 20       	and	r5, r5
    6480:	09 f4       	brne	.+2      	; 0x6484 <vfprintf+0x6b2>
    6482:	e4 cc       	rjmp	.-1592   	; 0x5e4c <vfprintf+0x7a>
    6484:	b7 01       	movw	r22, r14
    6486:	80 e2       	ldi	r24, 0x20	; 32
    6488:	90 e0       	ldi	r25, 0x00	; 0
    648a:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    648e:	5a 94       	dec	r5
    6490:	f6 cf       	rjmp	.-20     	; 0x647e <vfprintf+0x6ac>
    6492:	f7 01       	movw	r30, r14
    6494:	86 81       	ldd	r24, Z+6	; 0x06
    6496:	97 81       	ldd	r25, Z+7	; 0x07
    6498:	26 c0       	rjmp	.+76     	; 0x64e6 <vfprintf+0x714>
    649a:	8f ef       	ldi	r24, 0xFF	; 255
    649c:	9f ef       	ldi	r25, 0xFF	; 255
    649e:	23 c0       	rjmp	.+70     	; 0x64e6 <vfprintf+0x714>
    64a0:	b7 01       	movw	r22, r14
    64a2:	80 e2       	ldi	r24, 0x20	; 32
    64a4:	90 e0       	ldi	r25, 0x00	; 0
    64a6:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    64aa:	5a 94       	dec	r5
    64ac:	51 10       	cpse	r5, r1
    64ae:	f8 cf       	rjmp	.-16     	; 0x64a0 <vfprintf+0x6ce>
    64b0:	d8 cf       	rjmp	.-80     	; 0x6462 <vfprintf+0x690>
    64b2:	51 2c       	mov	r5, r1
    64b4:	b7 01       	movw	r22, r14
    64b6:	80 2f       	mov	r24, r16
    64b8:	90 e0       	ldi	r25, 0x00	; 0
    64ba:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    64be:	d3 cf       	rjmp	.-90     	; 0x6466 <vfprintf+0x694>
    64c0:	00 e4       	ldi	r16, 0x40	; 64
    64c2:	12 e0       	ldi	r17, 0x02	; 2
    64c4:	d5 cf       	rjmp	.-86     	; 0x6470 <vfprintf+0x69e>
    64c6:	91 10       	cpse	r9, r1
    64c8:	80 52       	subi	r24, 0x20	; 32
    64ca:	b7 01       	movw	r22, r14
    64cc:	90 e0       	ldi	r25, 0x00	; 0
    64ce:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <fputc>
    64d2:	0f 5f       	subi	r16, 0xFF	; 255
    64d4:	1f 4f       	sbci	r17, 0xFF	; 255
    64d6:	cf cf       	rjmp	.-98     	; 0x6476 <vfprintf+0x6a4>
    64d8:	23 e0       	ldi	r18, 0x03	; 3
    64da:	25 15       	cp	r18, r5
    64dc:	10 f4       	brcc	.+4      	; 0x64e2 <vfprintf+0x710>
    64de:	83 e0       	ldi	r24, 0x03	; 3
    64e0:	bd cf       	rjmp	.-134    	; 0x645c <vfprintf+0x68a>
    64e2:	51 2c       	mov	r5, r1
    64e4:	c0 cf       	rjmp	.-128    	; 0x6466 <vfprintf+0x694>
    64e6:	60 96       	adiw	r28, 0x10	; 16
    64e8:	cd bf       	out	0x3d, r28	; 61
    64ea:	de bf       	out	0x3e, r29	; 62
    64ec:	df 91       	pop	r29
    64ee:	cf 91       	pop	r28
    64f0:	1f 91       	pop	r17
    64f2:	0f 91       	pop	r16
    64f4:	ff 90       	pop	r15
    64f6:	ef 90       	pop	r14
    64f8:	df 90       	pop	r13
    64fa:	cf 90       	pop	r12
    64fc:	bf 90       	pop	r11
    64fe:	af 90       	pop	r10
    6500:	9f 90       	pop	r9
    6502:	8f 90       	pop	r8
    6504:	7f 90       	pop	r7
    6506:	6f 90       	pop	r6
    6508:	5f 90       	pop	r5
    650a:	4f 90       	pop	r4
    650c:	3f 90       	pop	r3
    650e:	2f 90       	pop	r2
    6510:	08 95       	ret

00006512 <__tablejump2__>:
    6512:	ee 0f       	add	r30, r30
    6514:	ff 1f       	adc	r31, r31
    6516:	88 1f       	adc	r24, r24
    6518:	8b bf       	out	0x3b, r24	; 59
    651a:	07 90       	elpm	r0, Z+
    651c:	f6 91       	elpm	r31, Z
    651e:	e0 2d       	mov	r30, r0
    6520:	19 94       	eijmp

00006522 <dtostrf>:
    6522:	ef 92       	push	r14
    6524:	0f 93       	push	r16
    6526:	1f 93       	push	r17
    6528:	cf 93       	push	r28
    652a:	df 93       	push	r29
    652c:	e8 01       	movw	r28, r16
    652e:	47 fd       	sbrc	r20, 7
    6530:	02 c0       	rjmp	.+4      	; 0x6536 <dtostrf+0x14>
    6532:	34 e0       	ldi	r19, 0x04	; 4
    6534:	01 c0       	rjmp	.+2      	; 0x6538 <dtostrf+0x16>
    6536:	34 e1       	ldi	r19, 0x14	; 20
    6538:	04 2e       	mov	r0, r20
    653a:	00 0c       	add	r0, r0
    653c:	55 0b       	sbc	r21, r21
    653e:	57 ff       	sbrs	r21, 7
    6540:	03 c0       	rjmp	.+6      	; 0x6548 <dtostrf+0x26>
    6542:	51 95       	neg	r21
    6544:	41 95       	neg	r20
    6546:	51 09       	sbc	r21, r1
    6548:	e3 2e       	mov	r14, r19
    654a:	02 2f       	mov	r16, r18
    654c:	24 2f       	mov	r18, r20
    654e:	ae 01       	movw	r20, r28
    6550:	0e 94 82 34 	call	0x6904	; 0x6904 <dtoa_prf>
    6554:	ce 01       	movw	r24, r28
    6556:	df 91       	pop	r29
    6558:	cf 91       	pop	r28
    655a:	1f 91       	pop	r17
    655c:	0f 91       	pop	r16
    655e:	ef 90       	pop	r14
    6560:	08 95       	ret

00006562 <__ftoa_engine>:
    6562:	28 30       	cpi	r18, 0x08	; 8
    6564:	08 f0       	brcs	.+2      	; 0x6568 <__ftoa_engine+0x6>
    6566:	27 e0       	ldi	r18, 0x07	; 7
    6568:	33 27       	eor	r19, r19
    656a:	da 01       	movw	r26, r20
    656c:	99 0f       	add	r25, r25
    656e:	31 1d       	adc	r19, r1
    6570:	87 fd       	sbrc	r24, 7
    6572:	91 60       	ori	r25, 0x01	; 1
    6574:	00 96       	adiw	r24, 0x00	; 0
    6576:	61 05       	cpc	r22, r1
    6578:	71 05       	cpc	r23, r1
    657a:	39 f4       	brne	.+14     	; 0x658a <__ftoa_engine+0x28>
    657c:	32 60       	ori	r19, 0x02	; 2
    657e:	2e 5f       	subi	r18, 0xFE	; 254
    6580:	3d 93       	st	X+, r19
    6582:	30 e3       	ldi	r19, 0x30	; 48
    6584:	2a 95       	dec	r18
    6586:	e1 f7       	brne	.-8      	; 0x6580 <__ftoa_engine+0x1e>
    6588:	08 95       	ret
    658a:	9f 3f       	cpi	r25, 0xFF	; 255
    658c:	30 f0       	brcs	.+12     	; 0x659a <__ftoa_engine+0x38>
    658e:	80 38       	cpi	r24, 0x80	; 128
    6590:	71 05       	cpc	r23, r1
    6592:	61 05       	cpc	r22, r1
    6594:	09 f0       	breq	.+2      	; 0x6598 <__ftoa_engine+0x36>
    6596:	3c 5f       	subi	r19, 0xFC	; 252
    6598:	3c 5f       	subi	r19, 0xFC	; 252
    659a:	3d 93       	st	X+, r19
    659c:	91 30       	cpi	r25, 0x01	; 1
    659e:	08 f0       	brcs	.+2      	; 0x65a2 <__ftoa_engine+0x40>
    65a0:	80 68       	ori	r24, 0x80	; 128
    65a2:	91 1d       	adc	r25, r1
    65a4:	df 93       	push	r29
    65a6:	cf 93       	push	r28
    65a8:	1f 93       	push	r17
    65aa:	0f 93       	push	r16
    65ac:	ff 92       	push	r15
    65ae:	ef 92       	push	r14
    65b0:	19 2f       	mov	r17, r25
    65b2:	98 7f       	andi	r25, 0xF8	; 248
    65b4:	96 95       	lsr	r25
    65b6:	e9 2f       	mov	r30, r25
    65b8:	96 95       	lsr	r25
    65ba:	96 95       	lsr	r25
    65bc:	e9 0f       	add	r30, r25
    65be:	ff 27       	eor	r31, r31
    65c0:	e2 56       	subi	r30, 0x62	; 98
    65c2:	fd 4f       	sbci	r31, 0xFD	; 253
    65c4:	99 27       	eor	r25, r25
    65c6:	33 27       	eor	r19, r19
    65c8:	ee 24       	eor	r14, r14
    65ca:	ff 24       	eor	r15, r15
    65cc:	a7 01       	movw	r20, r14
    65ce:	e7 01       	movw	r28, r14
    65d0:	05 90       	lpm	r0, Z+
    65d2:	08 94       	sec
    65d4:	07 94       	ror	r0
    65d6:	28 f4       	brcc	.+10     	; 0x65e2 <__ftoa_engine+0x80>
    65d8:	36 0f       	add	r19, r22
    65da:	e7 1e       	adc	r14, r23
    65dc:	f8 1e       	adc	r15, r24
    65de:	49 1f       	adc	r20, r25
    65e0:	51 1d       	adc	r21, r1
    65e2:	66 0f       	add	r22, r22
    65e4:	77 1f       	adc	r23, r23
    65e6:	88 1f       	adc	r24, r24
    65e8:	99 1f       	adc	r25, r25
    65ea:	06 94       	lsr	r0
    65ec:	a1 f7       	brne	.-24     	; 0x65d6 <__ftoa_engine+0x74>
    65ee:	05 90       	lpm	r0, Z+
    65f0:	07 94       	ror	r0
    65f2:	28 f4       	brcc	.+10     	; 0x65fe <__ftoa_engine+0x9c>
    65f4:	e7 0e       	add	r14, r23
    65f6:	f8 1e       	adc	r15, r24
    65f8:	49 1f       	adc	r20, r25
    65fa:	56 1f       	adc	r21, r22
    65fc:	c1 1d       	adc	r28, r1
    65fe:	77 0f       	add	r23, r23
    6600:	88 1f       	adc	r24, r24
    6602:	99 1f       	adc	r25, r25
    6604:	66 1f       	adc	r22, r22
    6606:	06 94       	lsr	r0
    6608:	a1 f7       	brne	.-24     	; 0x65f2 <__ftoa_engine+0x90>
    660a:	05 90       	lpm	r0, Z+
    660c:	07 94       	ror	r0
    660e:	28 f4       	brcc	.+10     	; 0x661a <__ftoa_engine+0xb8>
    6610:	f8 0e       	add	r15, r24
    6612:	49 1f       	adc	r20, r25
    6614:	56 1f       	adc	r21, r22
    6616:	c7 1f       	adc	r28, r23
    6618:	d1 1d       	adc	r29, r1
    661a:	88 0f       	add	r24, r24
    661c:	99 1f       	adc	r25, r25
    661e:	66 1f       	adc	r22, r22
    6620:	77 1f       	adc	r23, r23
    6622:	06 94       	lsr	r0
    6624:	a1 f7       	brne	.-24     	; 0x660e <__ftoa_engine+0xac>
    6626:	05 90       	lpm	r0, Z+
    6628:	07 94       	ror	r0
    662a:	20 f4       	brcc	.+8      	; 0x6634 <__ftoa_engine+0xd2>
    662c:	49 0f       	add	r20, r25
    662e:	56 1f       	adc	r21, r22
    6630:	c7 1f       	adc	r28, r23
    6632:	d8 1f       	adc	r29, r24
    6634:	99 0f       	add	r25, r25
    6636:	66 1f       	adc	r22, r22
    6638:	77 1f       	adc	r23, r23
    663a:	88 1f       	adc	r24, r24
    663c:	06 94       	lsr	r0
    663e:	a9 f7       	brne	.-22     	; 0x662a <__ftoa_engine+0xc8>
    6640:	84 91       	lpm	r24, Z
    6642:	10 95       	com	r17
    6644:	17 70       	andi	r17, 0x07	; 7
    6646:	41 f0       	breq	.+16     	; 0x6658 <__ftoa_engine+0xf6>
    6648:	d6 95       	lsr	r29
    664a:	c7 95       	ror	r28
    664c:	57 95       	ror	r21
    664e:	47 95       	ror	r20
    6650:	f7 94       	ror	r15
    6652:	e7 94       	ror	r14
    6654:	1a 95       	dec	r17
    6656:	c1 f7       	brne	.-16     	; 0x6648 <__ftoa_engine+0xe6>
    6658:	e4 e4       	ldi	r30, 0x44	; 68
    665a:	f2 e0       	ldi	r31, 0x02	; 2
    665c:	68 94       	set
    665e:	15 90       	lpm	r1, Z+
    6660:	15 91       	lpm	r17, Z+
    6662:	35 91       	lpm	r19, Z+
    6664:	65 91       	lpm	r22, Z+
    6666:	95 91       	lpm	r25, Z+
    6668:	05 90       	lpm	r0, Z+
    666a:	7f e2       	ldi	r23, 0x2F	; 47
    666c:	73 95       	inc	r23
    666e:	e1 18       	sub	r14, r1
    6670:	f1 0a       	sbc	r15, r17
    6672:	43 0b       	sbc	r20, r19
    6674:	56 0b       	sbc	r21, r22
    6676:	c9 0b       	sbc	r28, r25
    6678:	d0 09       	sbc	r29, r0
    667a:	c0 f7       	brcc	.-16     	; 0x666c <__ftoa_engine+0x10a>
    667c:	e1 0c       	add	r14, r1
    667e:	f1 1e       	adc	r15, r17
    6680:	43 1f       	adc	r20, r19
    6682:	56 1f       	adc	r21, r22
    6684:	c9 1f       	adc	r28, r25
    6686:	d0 1d       	adc	r29, r0
    6688:	7e f4       	brtc	.+30     	; 0x66a8 <__ftoa_engine+0x146>
    668a:	70 33       	cpi	r23, 0x30	; 48
    668c:	11 f4       	brne	.+4      	; 0x6692 <__ftoa_engine+0x130>
    668e:	8a 95       	dec	r24
    6690:	e6 cf       	rjmp	.-52     	; 0x665e <__ftoa_engine+0xfc>
    6692:	e8 94       	clt
    6694:	01 50       	subi	r16, 0x01	; 1
    6696:	30 f0       	brcs	.+12     	; 0x66a4 <__ftoa_engine+0x142>
    6698:	08 0f       	add	r16, r24
    669a:	0a f4       	brpl	.+2      	; 0x669e <__ftoa_engine+0x13c>
    669c:	00 27       	eor	r16, r16
    669e:	02 17       	cp	r16, r18
    66a0:	08 f4       	brcc	.+2      	; 0x66a4 <__ftoa_engine+0x142>
    66a2:	20 2f       	mov	r18, r16
    66a4:	23 95       	inc	r18
    66a6:	02 2f       	mov	r16, r18
    66a8:	7a 33       	cpi	r23, 0x3A	; 58
    66aa:	28 f0       	brcs	.+10     	; 0x66b6 <__ftoa_engine+0x154>
    66ac:	79 e3       	ldi	r23, 0x39	; 57
    66ae:	7d 93       	st	X+, r23
    66b0:	2a 95       	dec	r18
    66b2:	e9 f7       	brne	.-6      	; 0x66ae <__ftoa_engine+0x14c>
    66b4:	10 c0       	rjmp	.+32     	; 0x66d6 <__ftoa_engine+0x174>
    66b6:	7d 93       	st	X+, r23
    66b8:	2a 95       	dec	r18
    66ba:	89 f6       	brne	.-94     	; 0x665e <__ftoa_engine+0xfc>
    66bc:	06 94       	lsr	r0
    66be:	97 95       	ror	r25
    66c0:	67 95       	ror	r22
    66c2:	37 95       	ror	r19
    66c4:	17 95       	ror	r17
    66c6:	17 94       	ror	r1
    66c8:	e1 18       	sub	r14, r1
    66ca:	f1 0a       	sbc	r15, r17
    66cc:	43 0b       	sbc	r20, r19
    66ce:	56 0b       	sbc	r21, r22
    66d0:	c9 0b       	sbc	r28, r25
    66d2:	d0 09       	sbc	r29, r0
    66d4:	98 f0       	brcs	.+38     	; 0x66fc <__ftoa_engine+0x19a>
    66d6:	23 95       	inc	r18
    66d8:	7e 91       	ld	r23, -X
    66da:	73 95       	inc	r23
    66dc:	7a 33       	cpi	r23, 0x3A	; 58
    66de:	08 f0       	brcs	.+2      	; 0x66e2 <__ftoa_engine+0x180>
    66e0:	70 e3       	ldi	r23, 0x30	; 48
    66e2:	7c 93       	st	X, r23
    66e4:	20 13       	cpse	r18, r16
    66e6:	b8 f7       	brcc	.-18     	; 0x66d6 <__ftoa_engine+0x174>
    66e8:	7e 91       	ld	r23, -X
    66ea:	70 61       	ori	r23, 0x10	; 16
    66ec:	7d 93       	st	X+, r23
    66ee:	30 f0       	brcs	.+12     	; 0x66fc <__ftoa_engine+0x19a>
    66f0:	83 95       	inc	r24
    66f2:	71 e3       	ldi	r23, 0x31	; 49
    66f4:	7d 93       	st	X+, r23
    66f6:	70 e3       	ldi	r23, 0x30	; 48
    66f8:	2a 95       	dec	r18
    66fa:	e1 f7       	brne	.-8      	; 0x66f4 <__ftoa_engine+0x192>
    66fc:	11 24       	eor	r1, r1
    66fe:	ef 90       	pop	r14
    6700:	ff 90       	pop	r15
    6702:	0f 91       	pop	r16
    6704:	1f 91       	pop	r17
    6706:	cf 91       	pop	r28
    6708:	df 91       	pop	r29
    670a:	99 27       	eor	r25, r25
    670c:	87 fd       	sbrc	r24, 7
    670e:	90 95       	com	r25
    6710:	08 95       	ret

00006712 <strnlen_P>:
    6712:	fc 01       	movw	r30, r24
    6714:	05 90       	lpm	r0, Z+
    6716:	61 50       	subi	r22, 0x01	; 1
    6718:	70 40       	sbci	r23, 0x00	; 0
    671a:	01 10       	cpse	r0, r1
    671c:	d8 f7       	brcc	.-10     	; 0x6714 <strnlen_P+0x2>
    671e:	80 95       	com	r24
    6720:	90 95       	com	r25
    6722:	8e 0f       	add	r24, r30
    6724:	9f 1f       	adc	r25, r31
    6726:	08 95       	ret

00006728 <memcpy>:
    6728:	fb 01       	movw	r30, r22
    672a:	dc 01       	movw	r26, r24
    672c:	02 c0       	rjmp	.+4      	; 0x6732 <memcpy+0xa>
    672e:	01 90       	ld	r0, Z+
    6730:	0d 92       	st	X+, r0
    6732:	41 50       	subi	r20, 0x01	; 1
    6734:	50 40       	sbci	r21, 0x00	; 0
    6736:	d8 f7       	brcc	.-10     	; 0x672e <memcpy+0x6>
    6738:	08 95       	ret

0000673a <memset>:
    673a:	dc 01       	movw	r26, r24
    673c:	01 c0       	rjmp	.+2      	; 0x6740 <memset+0x6>
    673e:	6d 93       	st	X+, r22
    6740:	41 50       	subi	r20, 0x01	; 1
    6742:	50 40       	sbci	r21, 0x00	; 0
    6744:	e0 f7       	brcc	.-8      	; 0x673e <memset+0x4>
    6746:	08 95       	ret

00006748 <strlen>:
    6748:	fc 01       	movw	r30, r24
    674a:	01 90       	ld	r0, Z+
    674c:	00 20       	and	r0, r0
    674e:	e9 f7       	brne	.-6      	; 0x674a <strlen+0x2>
    6750:	80 95       	com	r24
    6752:	90 95       	com	r25
    6754:	8e 0f       	add	r24, r30
    6756:	9f 1f       	adc	r25, r31
    6758:	08 95       	ret

0000675a <strnlen>:
    675a:	fc 01       	movw	r30, r24
    675c:	61 50       	subi	r22, 0x01	; 1
    675e:	70 40       	sbci	r23, 0x00	; 0
    6760:	01 90       	ld	r0, Z+
    6762:	01 10       	cpse	r0, r1
    6764:	d8 f7       	brcc	.-10     	; 0x675c <strnlen+0x2>
    6766:	80 95       	com	r24
    6768:	90 95       	com	r25
    676a:	8e 0f       	add	r24, r30
    676c:	9f 1f       	adc	r25, r31
    676e:	08 95       	ret

00006770 <itoa>:
    6770:	45 32       	cpi	r20, 0x25	; 37
    6772:	51 05       	cpc	r21, r1
    6774:	20 f4       	brcc	.+8      	; 0x677e <itoa+0xe>
    6776:	42 30       	cpi	r20, 0x02	; 2
    6778:	10 f0       	brcs	.+4      	; 0x677e <itoa+0xe>
    677a:	0c 94 c3 33 	jmp	0x6786	; 0x6786 <__itoa_ncheck>
    677e:	fb 01       	movw	r30, r22
    6780:	10 82       	st	Z, r1
    6782:	cb 01       	movw	r24, r22
    6784:	08 95       	ret

00006786 <__itoa_ncheck>:
    6786:	bb 27       	eor	r27, r27
    6788:	4a 30       	cpi	r20, 0x0A	; 10
    678a:	31 f4       	brne	.+12     	; 0x6798 <__itoa_ncheck+0x12>
    678c:	99 23       	and	r25, r25
    678e:	22 f4       	brpl	.+8      	; 0x6798 <__itoa_ncheck+0x12>
    6790:	bd e2       	ldi	r27, 0x2D	; 45
    6792:	90 95       	com	r25
    6794:	81 95       	neg	r24
    6796:	9f 4f       	sbci	r25, 0xFF	; 255
    6798:	0c 94 cf 33 	jmp	0x679e	; 0x679e <__utoa_common>

0000679c <__utoa_ncheck>:
    679c:	bb 27       	eor	r27, r27

0000679e <__utoa_common>:
    679e:	fb 01       	movw	r30, r22
    67a0:	55 27       	eor	r21, r21
    67a2:	aa 27       	eor	r26, r26
    67a4:	88 0f       	add	r24, r24
    67a6:	99 1f       	adc	r25, r25
    67a8:	aa 1f       	adc	r26, r26
    67aa:	a4 17       	cp	r26, r20
    67ac:	10 f0       	brcs	.+4      	; 0x67b2 <__utoa_common+0x14>
    67ae:	a4 1b       	sub	r26, r20
    67b0:	83 95       	inc	r24
    67b2:	50 51       	subi	r21, 0x10	; 16
    67b4:	b9 f7       	brne	.-18     	; 0x67a4 <__utoa_common+0x6>
    67b6:	a0 5d       	subi	r26, 0xD0	; 208
    67b8:	aa 33       	cpi	r26, 0x3A	; 58
    67ba:	08 f0       	brcs	.+2      	; 0x67be <__utoa_common+0x20>
    67bc:	a9 5d       	subi	r26, 0xD9	; 217
    67be:	a1 93       	st	Z+, r26
    67c0:	00 97       	sbiw	r24, 0x00	; 0
    67c2:	79 f7       	brne	.-34     	; 0x67a2 <__utoa_common+0x4>
    67c4:	b1 11       	cpse	r27, r1
    67c6:	b1 93       	st	Z+, r27
    67c8:	11 92       	st	Z+, r1
    67ca:	cb 01       	movw	r24, r22
    67cc:	0c 94 f3 35 	jmp	0x6be6	; 0x6be6 <strrev>

000067d0 <fputc>:
    67d0:	0f 93       	push	r16
    67d2:	1f 93       	push	r17
    67d4:	cf 93       	push	r28
    67d6:	df 93       	push	r29
    67d8:	fb 01       	movw	r30, r22
    67da:	23 81       	ldd	r18, Z+3	; 0x03
    67dc:	21 fd       	sbrc	r18, 1
    67de:	03 c0       	rjmp	.+6      	; 0x67e6 <fputc+0x16>
    67e0:	8f ef       	ldi	r24, 0xFF	; 255
    67e2:	9f ef       	ldi	r25, 0xFF	; 255
    67e4:	2c c0       	rjmp	.+88     	; 0x683e <fputc+0x6e>
    67e6:	22 ff       	sbrs	r18, 2
    67e8:	16 c0       	rjmp	.+44     	; 0x6816 <fputc+0x46>
    67ea:	46 81       	ldd	r20, Z+6	; 0x06
    67ec:	57 81       	ldd	r21, Z+7	; 0x07
    67ee:	24 81       	ldd	r18, Z+4	; 0x04
    67f0:	35 81       	ldd	r19, Z+5	; 0x05
    67f2:	42 17       	cp	r20, r18
    67f4:	53 07       	cpc	r21, r19
    67f6:	44 f4       	brge	.+16     	; 0x6808 <fputc+0x38>
    67f8:	a0 81       	ld	r26, Z
    67fa:	b1 81       	ldd	r27, Z+1	; 0x01
    67fc:	9d 01       	movw	r18, r26
    67fe:	2f 5f       	subi	r18, 0xFF	; 255
    6800:	3f 4f       	sbci	r19, 0xFF	; 255
    6802:	20 83       	st	Z, r18
    6804:	31 83       	std	Z+1, r19	; 0x01
    6806:	8c 93       	st	X, r24
    6808:	26 81       	ldd	r18, Z+6	; 0x06
    680a:	37 81       	ldd	r19, Z+7	; 0x07
    680c:	2f 5f       	subi	r18, 0xFF	; 255
    680e:	3f 4f       	sbci	r19, 0xFF	; 255
    6810:	26 83       	std	Z+6, r18	; 0x06
    6812:	37 83       	std	Z+7, r19	; 0x07
    6814:	14 c0       	rjmp	.+40     	; 0x683e <fputc+0x6e>
    6816:	8b 01       	movw	r16, r22
    6818:	ec 01       	movw	r28, r24
    681a:	fb 01       	movw	r30, r22
    681c:	00 84       	ldd	r0, Z+8	; 0x08
    681e:	f1 85       	ldd	r31, Z+9	; 0x09
    6820:	e0 2d       	mov	r30, r0
    6822:	19 95       	eicall
    6824:	89 2b       	or	r24, r25
    6826:	e1 f6       	brne	.-72     	; 0x67e0 <fputc+0x10>
    6828:	d8 01       	movw	r26, r16
    682a:	16 96       	adiw	r26, 0x06	; 6
    682c:	8d 91       	ld	r24, X+
    682e:	9c 91       	ld	r25, X
    6830:	17 97       	sbiw	r26, 0x07	; 7
    6832:	01 96       	adiw	r24, 0x01	; 1
    6834:	16 96       	adiw	r26, 0x06	; 6
    6836:	8d 93       	st	X+, r24
    6838:	9c 93       	st	X, r25
    683a:	17 97       	sbiw	r26, 0x07	; 7
    683c:	ce 01       	movw	r24, r28
    683e:	df 91       	pop	r29
    6840:	cf 91       	pop	r28
    6842:	1f 91       	pop	r17
    6844:	0f 91       	pop	r16
    6846:	08 95       	ret

00006848 <__ultoa_invert>:
    6848:	fa 01       	movw	r30, r20
    684a:	aa 27       	eor	r26, r26
    684c:	28 30       	cpi	r18, 0x08	; 8
    684e:	51 f1       	breq	.+84     	; 0x68a4 <__ultoa_invert+0x5c>
    6850:	20 31       	cpi	r18, 0x10	; 16
    6852:	81 f1       	breq	.+96     	; 0x68b4 <__ultoa_invert+0x6c>
    6854:	e8 94       	clt
    6856:	6f 93       	push	r22
    6858:	6e 7f       	andi	r22, 0xFE	; 254
    685a:	6e 5f       	subi	r22, 0xFE	; 254
    685c:	7f 4f       	sbci	r23, 0xFF	; 255
    685e:	8f 4f       	sbci	r24, 0xFF	; 255
    6860:	9f 4f       	sbci	r25, 0xFF	; 255
    6862:	af 4f       	sbci	r26, 0xFF	; 255
    6864:	b1 e0       	ldi	r27, 0x01	; 1
    6866:	3e d0       	rcall	.+124    	; 0x68e4 <__ultoa_invert+0x9c>
    6868:	b4 e0       	ldi	r27, 0x04	; 4
    686a:	3c d0       	rcall	.+120    	; 0x68e4 <__ultoa_invert+0x9c>
    686c:	67 0f       	add	r22, r23
    686e:	78 1f       	adc	r23, r24
    6870:	89 1f       	adc	r24, r25
    6872:	9a 1f       	adc	r25, r26
    6874:	a1 1d       	adc	r26, r1
    6876:	68 0f       	add	r22, r24
    6878:	79 1f       	adc	r23, r25
    687a:	8a 1f       	adc	r24, r26
    687c:	91 1d       	adc	r25, r1
    687e:	a1 1d       	adc	r26, r1
    6880:	6a 0f       	add	r22, r26
    6882:	71 1d       	adc	r23, r1
    6884:	81 1d       	adc	r24, r1
    6886:	91 1d       	adc	r25, r1
    6888:	a1 1d       	adc	r26, r1
    688a:	20 d0       	rcall	.+64     	; 0x68cc <__ultoa_invert+0x84>
    688c:	09 f4       	brne	.+2      	; 0x6890 <__ultoa_invert+0x48>
    688e:	68 94       	set
    6890:	3f 91       	pop	r19
    6892:	2a e0       	ldi	r18, 0x0A	; 10
    6894:	26 9f       	mul	r18, r22
    6896:	11 24       	eor	r1, r1
    6898:	30 19       	sub	r19, r0
    689a:	30 5d       	subi	r19, 0xD0	; 208
    689c:	31 93       	st	Z+, r19
    689e:	de f6       	brtc	.-74     	; 0x6856 <__ultoa_invert+0xe>
    68a0:	cf 01       	movw	r24, r30
    68a2:	08 95       	ret
    68a4:	46 2f       	mov	r20, r22
    68a6:	47 70       	andi	r20, 0x07	; 7
    68a8:	40 5d       	subi	r20, 0xD0	; 208
    68aa:	41 93       	st	Z+, r20
    68ac:	b3 e0       	ldi	r27, 0x03	; 3
    68ae:	0f d0       	rcall	.+30     	; 0x68ce <__ultoa_invert+0x86>
    68b0:	c9 f7       	brne	.-14     	; 0x68a4 <__ultoa_invert+0x5c>
    68b2:	f6 cf       	rjmp	.-20     	; 0x68a0 <__ultoa_invert+0x58>
    68b4:	46 2f       	mov	r20, r22
    68b6:	4f 70       	andi	r20, 0x0F	; 15
    68b8:	40 5d       	subi	r20, 0xD0	; 208
    68ba:	4a 33       	cpi	r20, 0x3A	; 58
    68bc:	18 f0       	brcs	.+6      	; 0x68c4 <__ultoa_invert+0x7c>
    68be:	49 5d       	subi	r20, 0xD9	; 217
    68c0:	31 fd       	sbrc	r19, 1
    68c2:	40 52       	subi	r20, 0x20	; 32
    68c4:	41 93       	st	Z+, r20
    68c6:	02 d0       	rcall	.+4      	; 0x68cc <__ultoa_invert+0x84>
    68c8:	a9 f7       	brne	.-22     	; 0x68b4 <__ultoa_invert+0x6c>
    68ca:	ea cf       	rjmp	.-44     	; 0x68a0 <__ultoa_invert+0x58>
    68cc:	b4 e0       	ldi	r27, 0x04	; 4
    68ce:	a6 95       	lsr	r26
    68d0:	97 95       	ror	r25
    68d2:	87 95       	ror	r24
    68d4:	77 95       	ror	r23
    68d6:	67 95       	ror	r22
    68d8:	ba 95       	dec	r27
    68da:	c9 f7       	brne	.-14     	; 0x68ce <__ultoa_invert+0x86>
    68dc:	00 97       	sbiw	r24, 0x00	; 0
    68de:	61 05       	cpc	r22, r1
    68e0:	71 05       	cpc	r23, r1
    68e2:	08 95       	ret
    68e4:	9b 01       	movw	r18, r22
    68e6:	ac 01       	movw	r20, r24
    68e8:	0a 2e       	mov	r0, r26
    68ea:	06 94       	lsr	r0
    68ec:	57 95       	ror	r21
    68ee:	47 95       	ror	r20
    68f0:	37 95       	ror	r19
    68f2:	27 95       	ror	r18
    68f4:	ba 95       	dec	r27
    68f6:	c9 f7       	brne	.-14     	; 0x68ea <__ultoa_invert+0xa2>
    68f8:	62 0f       	add	r22, r18
    68fa:	73 1f       	adc	r23, r19
    68fc:	84 1f       	adc	r24, r20
    68fe:	95 1f       	adc	r25, r21
    6900:	a0 1d       	adc	r26, r0
    6902:	08 95       	ret

00006904 <dtoa_prf>:
    6904:	8f 92       	push	r8
    6906:	9f 92       	push	r9
    6908:	af 92       	push	r10
    690a:	bf 92       	push	r11
    690c:	cf 92       	push	r12
    690e:	df 92       	push	r13
    6910:	ef 92       	push	r14
    6912:	ff 92       	push	r15
    6914:	0f 93       	push	r16
    6916:	1f 93       	push	r17
    6918:	cf 93       	push	r28
    691a:	df 93       	push	r29
    691c:	cd b7       	in	r28, 0x3d	; 61
    691e:	de b7       	in	r29, 0x3e	; 62
    6920:	29 97       	sbiw	r28, 0x09	; 9
    6922:	cd bf       	out	0x3d, r28	; 61
    6924:	de bf       	out	0x3e, r29	; 62
    6926:	6a 01       	movw	r12, r20
    6928:	12 2f       	mov	r17, r18
    692a:	b0 2e       	mov	r11, r16
    692c:	2b e3       	ldi	r18, 0x3B	; 59
    692e:	20 17       	cp	r18, r16
    6930:	20 f0       	brcs	.+8      	; 0x693a <dtoa_prf+0x36>
    6932:	ff 24       	eor	r15, r15
    6934:	f3 94       	inc	r15
    6936:	f0 0e       	add	r15, r16
    6938:	02 c0       	rjmp	.+4      	; 0x693e <dtoa_prf+0x3a>
    693a:	2c e3       	ldi	r18, 0x3C	; 60
    693c:	f2 2e       	mov	r15, r18
    693e:	0f 2d       	mov	r16, r15
    6940:	27 e0       	ldi	r18, 0x07	; 7
    6942:	ae 01       	movw	r20, r28
    6944:	4f 5f       	subi	r20, 0xFF	; 255
    6946:	5f 4f       	sbci	r21, 0xFF	; 255
    6948:	0e 94 b1 32 	call	0x6562	; 0x6562 <__ftoa_engine>
    694c:	bc 01       	movw	r22, r24
    694e:	49 81       	ldd	r20, Y+1	; 0x01
    6950:	84 2f       	mov	r24, r20
    6952:	89 70       	andi	r24, 0x09	; 9
    6954:	81 30       	cpi	r24, 0x01	; 1
    6956:	31 f0       	breq	.+12     	; 0x6964 <dtoa_prf+0x60>
    6958:	e1 fc       	sbrc	r14, 1
    695a:	06 c0       	rjmp	.+12     	; 0x6968 <dtoa_prf+0x64>
    695c:	e0 fe       	sbrs	r14, 0
    695e:	06 c0       	rjmp	.+12     	; 0x696c <dtoa_prf+0x68>
    6960:	90 e2       	ldi	r25, 0x20	; 32
    6962:	05 c0       	rjmp	.+10     	; 0x696e <dtoa_prf+0x6a>
    6964:	9d e2       	ldi	r25, 0x2D	; 45
    6966:	03 c0       	rjmp	.+6      	; 0x696e <dtoa_prf+0x6a>
    6968:	9b e2       	ldi	r25, 0x2B	; 43
    696a:	01 c0       	rjmp	.+2      	; 0x696e <dtoa_prf+0x6a>
    696c:	90 e0       	ldi	r25, 0x00	; 0
    696e:	5e 2d       	mov	r21, r14
    6970:	50 71       	andi	r21, 0x10	; 16
    6972:	43 ff       	sbrs	r20, 3
    6974:	3c c0       	rjmp	.+120    	; 0x69ee <dtoa_prf+0xea>
    6976:	91 11       	cpse	r25, r1
    6978:	02 c0       	rjmp	.+4      	; 0x697e <dtoa_prf+0x7a>
    697a:	83 e0       	ldi	r24, 0x03	; 3
    697c:	01 c0       	rjmp	.+2      	; 0x6980 <dtoa_prf+0x7c>
    697e:	84 e0       	ldi	r24, 0x04	; 4
    6980:	81 17       	cp	r24, r17
    6982:	18 f4       	brcc	.+6      	; 0x698a <dtoa_prf+0x86>
    6984:	21 2f       	mov	r18, r17
    6986:	28 1b       	sub	r18, r24
    6988:	01 c0       	rjmp	.+2      	; 0x698c <dtoa_prf+0x88>
    698a:	20 e0       	ldi	r18, 0x00	; 0
    698c:	51 11       	cpse	r21, r1
    698e:	0b c0       	rjmp	.+22     	; 0x69a6 <dtoa_prf+0xa2>
    6990:	f6 01       	movw	r30, r12
    6992:	82 2f       	mov	r24, r18
    6994:	30 e2       	ldi	r19, 0x20	; 32
    6996:	88 23       	and	r24, r24
    6998:	19 f0       	breq	.+6      	; 0x69a0 <dtoa_prf+0x9c>
    699a:	31 93       	st	Z+, r19
    699c:	81 50       	subi	r24, 0x01	; 1
    699e:	fb cf       	rjmp	.-10     	; 0x6996 <dtoa_prf+0x92>
    69a0:	c2 0e       	add	r12, r18
    69a2:	d1 1c       	adc	r13, r1
    69a4:	20 e0       	ldi	r18, 0x00	; 0
    69a6:	99 23       	and	r25, r25
    69a8:	29 f0       	breq	.+10     	; 0x69b4 <dtoa_prf+0xb0>
    69aa:	d6 01       	movw	r26, r12
    69ac:	9c 93       	st	X, r25
    69ae:	f6 01       	movw	r30, r12
    69b0:	31 96       	adiw	r30, 0x01	; 1
    69b2:	6f 01       	movw	r12, r30
    69b4:	c6 01       	movw	r24, r12
    69b6:	03 96       	adiw	r24, 0x03	; 3
    69b8:	e2 fe       	sbrs	r14, 2
    69ba:	0a c0       	rjmp	.+20     	; 0x69d0 <dtoa_prf+0xcc>
    69bc:	3e e4       	ldi	r19, 0x4E	; 78
    69be:	d6 01       	movw	r26, r12
    69c0:	3c 93       	st	X, r19
    69c2:	41 e4       	ldi	r20, 0x41	; 65
    69c4:	11 96       	adiw	r26, 0x01	; 1
    69c6:	4c 93       	st	X, r20
    69c8:	11 97       	sbiw	r26, 0x01	; 1
    69ca:	12 96       	adiw	r26, 0x02	; 2
    69cc:	3c 93       	st	X, r19
    69ce:	06 c0       	rjmp	.+12     	; 0x69dc <dtoa_prf+0xd8>
    69d0:	3e e6       	ldi	r19, 0x6E	; 110
    69d2:	f6 01       	movw	r30, r12
    69d4:	30 83       	st	Z, r19
    69d6:	41 e6       	ldi	r20, 0x61	; 97
    69d8:	41 83       	std	Z+1, r20	; 0x01
    69da:	32 83       	std	Z+2, r19	; 0x02
    69dc:	fc 01       	movw	r30, r24
    69de:	32 2f       	mov	r19, r18
    69e0:	40 e2       	ldi	r20, 0x20	; 32
    69e2:	33 23       	and	r19, r19
    69e4:	09 f4       	brne	.+2      	; 0x69e8 <dtoa_prf+0xe4>
    69e6:	42 c0       	rjmp	.+132    	; 0x6a6c <dtoa_prf+0x168>
    69e8:	41 93       	st	Z+, r20
    69ea:	31 50       	subi	r19, 0x01	; 1
    69ec:	fa cf       	rjmp	.-12     	; 0x69e2 <dtoa_prf+0xde>
    69ee:	42 ff       	sbrs	r20, 2
    69f0:	44 c0       	rjmp	.+136    	; 0x6a7a <dtoa_prf+0x176>
    69f2:	91 11       	cpse	r25, r1
    69f4:	02 c0       	rjmp	.+4      	; 0x69fa <dtoa_prf+0xf6>
    69f6:	83 e0       	ldi	r24, 0x03	; 3
    69f8:	01 c0       	rjmp	.+2      	; 0x69fc <dtoa_prf+0xf8>
    69fa:	84 e0       	ldi	r24, 0x04	; 4
    69fc:	81 17       	cp	r24, r17
    69fe:	18 f4       	brcc	.+6      	; 0x6a06 <dtoa_prf+0x102>
    6a00:	21 2f       	mov	r18, r17
    6a02:	28 1b       	sub	r18, r24
    6a04:	01 c0       	rjmp	.+2      	; 0x6a08 <dtoa_prf+0x104>
    6a06:	20 e0       	ldi	r18, 0x00	; 0
    6a08:	51 11       	cpse	r21, r1
    6a0a:	0b c0       	rjmp	.+22     	; 0x6a22 <dtoa_prf+0x11e>
    6a0c:	f6 01       	movw	r30, r12
    6a0e:	82 2f       	mov	r24, r18
    6a10:	30 e2       	ldi	r19, 0x20	; 32
    6a12:	88 23       	and	r24, r24
    6a14:	19 f0       	breq	.+6      	; 0x6a1c <dtoa_prf+0x118>
    6a16:	31 93       	st	Z+, r19
    6a18:	81 50       	subi	r24, 0x01	; 1
    6a1a:	fb cf       	rjmp	.-10     	; 0x6a12 <dtoa_prf+0x10e>
    6a1c:	c2 0e       	add	r12, r18
    6a1e:	d1 1c       	adc	r13, r1
    6a20:	20 e0       	ldi	r18, 0x00	; 0
    6a22:	99 23       	and	r25, r25
    6a24:	29 f0       	breq	.+10     	; 0x6a30 <dtoa_prf+0x12c>
    6a26:	d6 01       	movw	r26, r12
    6a28:	9c 93       	st	X, r25
    6a2a:	f6 01       	movw	r30, r12
    6a2c:	31 96       	adiw	r30, 0x01	; 1
    6a2e:	6f 01       	movw	r12, r30
    6a30:	c6 01       	movw	r24, r12
    6a32:	03 96       	adiw	r24, 0x03	; 3
    6a34:	e2 fe       	sbrs	r14, 2
    6a36:	0b c0       	rjmp	.+22     	; 0x6a4e <dtoa_prf+0x14a>
    6a38:	39 e4       	ldi	r19, 0x49	; 73
    6a3a:	d6 01       	movw	r26, r12
    6a3c:	3c 93       	st	X, r19
    6a3e:	3e e4       	ldi	r19, 0x4E	; 78
    6a40:	11 96       	adiw	r26, 0x01	; 1
    6a42:	3c 93       	st	X, r19
    6a44:	11 97       	sbiw	r26, 0x01	; 1
    6a46:	36 e4       	ldi	r19, 0x46	; 70
    6a48:	12 96       	adiw	r26, 0x02	; 2
    6a4a:	3c 93       	st	X, r19
    6a4c:	07 c0       	rjmp	.+14     	; 0x6a5c <dtoa_prf+0x158>
    6a4e:	39 e6       	ldi	r19, 0x69	; 105
    6a50:	f6 01       	movw	r30, r12
    6a52:	30 83       	st	Z, r19
    6a54:	3e e6       	ldi	r19, 0x6E	; 110
    6a56:	31 83       	std	Z+1, r19	; 0x01
    6a58:	36 e6       	ldi	r19, 0x66	; 102
    6a5a:	32 83       	std	Z+2, r19	; 0x02
    6a5c:	fc 01       	movw	r30, r24
    6a5e:	32 2f       	mov	r19, r18
    6a60:	40 e2       	ldi	r20, 0x20	; 32
    6a62:	33 23       	and	r19, r19
    6a64:	19 f0       	breq	.+6      	; 0x6a6c <dtoa_prf+0x168>
    6a66:	41 93       	st	Z+, r20
    6a68:	31 50       	subi	r19, 0x01	; 1
    6a6a:	fb cf       	rjmp	.-10     	; 0x6a62 <dtoa_prf+0x15e>
    6a6c:	fc 01       	movw	r30, r24
    6a6e:	e2 0f       	add	r30, r18
    6a70:	f1 1d       	adc	r31, r1
    6a72:	10 82       	st	Z, r1
    6a74:	8e ef       	ldi	r24, 0xFE	; 254
    6a76:	9f ef       	ldi	r25, 0xFF	; 255
    6a78:	a6 c0       	rjmp	.+332    	; 0x6bc6 <dtoa_prf+0x2c2>
    6a7a:	21 e0       	ldi	r18, 0x01	; 1
    6a7c:	30 e0       	ldi	r19, 0x00	; 0
    6a7e:	91 11       	cpse	r25, r1
    6a80:	02 c0       	rjmp	.+4      	; 0x6a86 <dtoa_prf+0x182>
    6a82:	20 e0       	ldi	r18, 0x00	; 0
    6a84:	30 e0       	ldi	r19, 0x00	; 0
    6a86:	16 16       	cp	r1, r22
    6a88:	17 06       	cpc	r1, r23
    6a8a:	1c f4       	brge	.+6      	; 0x6a92 <dtoa_prf+0x18e>
    6a8c:	fb 01       	movw	r30, r22
    6a8e:	31 96       	adiw	r30, 0x01	; 1
    6a90:	02 c0       	rjmp	.+4      	; 0x6a96 <dtoa_prf+0x192>
    6a92:	e1 e0       	ldi	r30, 0x01	; 1
    6a94:	f0 e0       	ldi	r31, 0x00	; 0
    6a96:	2e 0f       	add	r18, r30
    6a98:	3f 1f       	adc	r19, r31
    6a9a:	bb 20       	and	r11, r11
    6a9c:	21 f0       	breq	.+8      	; 0x6aa6 <dtoa_prf+0x1a2>
    6a9e:	eb 2d       	mov	r30, r11
    6aa0:	f0 e0       	ldi	r31, 0x00	; 0
    6aa2:	31 96       	adiw	r30, 0x01	; 1
    6aa4:	02 c0       	rjmp	.+4      	; 0x6aaa <dtoa_prf+0x1a6>
    6aa6:	e0 e0       	ldi	r30, 0x00	; 0
    6aa8:	f0 e0       	ldi	r31, 0x00	; 0
    6aaa:	2e 0f       	add	r18, r30
    6aac:	3f 1f       	adc	r19, r31
    6aae:	e1 2f       	mov	r30, r17
    6ab0:	f0 e0       	ldi	r31, 0x00	; 0
    6ab2:	2e 17       	cp	r18, r30
    6ab4:	3f 07       	cpc	r19, r31
    6ab6:	1c f4       	brge	.+6      	; 0x6abe <dtoa_prf+0x1ba>
    6ab8:	12 1b       	sub	r17, r18
    6aba:	21 2f       	mov	r18, r17
    6abc:	01 c0       	rjmp	.+2      	; 0x6ac0 <dtoa_prf+0x1bc>
    6abe:	20 e0       	ldi	r18, 0x00	; 0
    6ac0:	8e 2d       	mov	r24, r14
    6ac2:	88 71       	andi	r24, 0x18	; 24
    6ac4:	59 f4       	brne	.+22     	; 0x6adc <dtoa_prf+0x1d8>
    6ac6:	f6 01       	movw	r30, r12
    6ac8:	82 2f       	mov	r24, r18
    6aca:	30 e2       	ldi	r19, 0x20	; 32
    6acc:	88 23       	and	r24, r24
    6ace:	19 f0       	breq	.+6      	; 0x6ad6 <dtoa_prf+0x1d2>
    6ad0:	31 93       	st	Z+, r19
    6ad2:	81 50       	subi	r24, 0x01	; 1
    6ad4:	fb cf       	rjmp	.-10     	; 0x6acc <dtoa_prf+0x1c8>
    6ad6:	c2 0e       	add	r12, r18
    6ad8:	d1 1c       	adc	r13, r1
    6ada:	20 e0       	ldi	r18, 0x00	; 0
    6adc:	99 23       	and	r25, r25
    6ade:	29 f0       	breq	.+10     	; 0x6aea <dtoa_prf+0x1e6>
    6ae0:	d6 01       	movw	r26, r12
    6ae2:	9c 93       	st	X, r25
    6ae4:	f6 01       	movw	r30, r12
    6ae6:	31 96       	adiw	r30, 0x01	; 1
    6ae8:	6f 01       	movw	r12, r30
    6aea:	51 11       	cpse	r21, r1
    6aec:	0b c0       	rjmp	.+22     	; 0x6b04 <dtoa_prf+0x200>
    6aee:	f6 01       	movw	r30, r12
    6af0:	82 2f       	mov	r24, r18
    6af2:	90 e3       	ldi	r25, 0x30	; 48
    6af4:	88 23       	and	r24, r24
    6af6:	19 f0       	breq	.+6      	; 0x6afe <dtoa_prf+0x1fa>
    6af8:	91 93       	st	Z+, r25
    6afa:	81 50       	subi	r24, 0x01	; 1
    6afc:	fb cf       	rjmp	.-10     	; 0x6af4 <dtoa_prf+0x1f0>
    6afe:	c2 0e       	add	r12, r18
    6b00:	d1 1c       	adc	r13, r1
    6b02:	20 e0       	ldi	r18, 0x00	; 0
    6b04:	0f 2d       	mov	r16, r15
    6b06:	06 0f       	add	r16, r22
    6b08:	9a 81       	ldd	r25, Y+2	; 0x02
    6b0a:	34 2f       	mov	r19, r20
    6b0c:	30 71       	andi	r19, 0x10	; 16
    6b0e:	44 ff       	sbrs	r20, 4
    6b10:	03 c0       	rjmp	.+6      	; 0x6b18 <dtoa_prf+0x214>
    6b12:	91 33       	cpi	r25, 0x31	; 49
    6b14:	09 f4       	brne	.+2      	; 0x6b18 <dtoa_prf+0x214>
    6b16:	01 50       	subi	r16, 0x01	; 1
    6b18:	10 16       	cp	r1, r16
    6b1a:	24 f4       	brge	.+8      	; 0x6b24 <dtoa_prf+0x220>
    6b1c:	09 30       	cpi	r16, 0x09	; 9
    6b1e:	18 f0       	brcs	.+6      	; 0x6b26 <dtoa_prf+0x222>
    6b20:	08 e0       	ldi	r16, 0x08	; 8
    6b22:	01 c0       	rjmp	.+2      	; 0x6b26 <dtoa_prf+0x222>
    6b24:	01 e0       	ldi	r16, 0x01	; 1
    6b26:	ab 01       	movw	r20, r22
    6b28:	77 ff       	sbrs	r23, 7
    6b2a:	02 c0       	rjmp	.+4      	; 0x6b30 <dtoa_prf+0x22c>
    6b2c:	40 e0       	ldi	r20, 0x00	; 0
    6b2e:	50 e0       	ldi	r21, 0x00	; 0
    6b30:	fb 01       	movw	r30, r22
    6b32:	e4 1b       	sub	r30, r20
    6b34:	f5 0b       	sbc	r31, r21
    6b36:	a1 e0       	ldi	r26, 0x01	; 1
    6b38:	b0 e0       	ldi	r27, 0x00	; 0
    6b3a:	ac 0f       	add	r26, r28
    6b3c:	bd 1f       	adc	r27, r29
    6b3e:	ea 0f       	add	r30, r26
    6b40:	fb 1f       	adc	r31, r27
    6b42:	8e e2       	ldi	r24, 0x2E	; 46
    6b44:	a8 2e       	mov	r10, r24
    6b46:	4b 01       	movw	r8, r22
    6b48:	80 1a       	sub	r8, r16
    6b4a:	91 08       	sbc	r9, r1
    6b4c:	0b 2d       	mov	r16, r11
    6b4e:	10 e0       	ldi	r17, 0x00	; 0
    6b50:	11 95       	neg	r17
    6b52:	01 95       	neg	r16
    6b54:	11 09       	sbc	r17, r1
    6b56:	4f 3f       	cpi	r20, 0xFF	; 255
    6b58:	bf ef       	ldi	r27, 0xFF	; 255
    6b5a:	5b 07       	cpc	r21, r27
    6b5c:	21 f4       	brne	.+8      	; 0x6b66 <dtoa_prf+0x262>
    6b5e:	d6 01       	movw	r26, r12
    6b60:	ac 92       	st	X, r10
    6b62:	11 96       	adiw	r26, 0x01	; 1
    6b64:	6d 01       	movw	r12, r26
    6b66:	64 17       	cp	r22, r20
    6b68:	75 07       	cpc	r23, r21
    6b6a:	2c f0       	brlt	.+10     	; 0x6b76 <dtoa_prf+0x272>
    6b6c:	84 16       	cp	r8, r20
    6b6e:	95 06       	cpc	r9, r21
    6b70:	14 f4       	brge	.+4      	; 0x6b76 <dtoa_prf+0x272>
    6b72:	81 81       	ldd	r24, Z+1	; 0x01
    6b74:	01 c0       	rjmp	.+2      	; 0x6b78 <dtoa_prf+0x274>
    6b76:	80 e3       	ldi	r24, 0x30	; 48
    6b78:	41 50       	subi	r20, 0x01	; 1
    6b7a:	51 09       	sbc	r21, r1
    6b7c:	31 96       	adiw	r30, 0x01	; 1
    6b7e:	d6 01       	movw	r26, r12
    6b80:	11 96       	adiw	r26, 0x01	; 1
    6b82:	7d 01       	movw	r14, r26
    6b84:	40 17       	cp	r20, r16
    6b86:	51 07       	cpc	r21, r17
    6b88:	24 f0       	brlt	.+8      	; 0x6b92 <dtoa_prf+0x28e>
    6b8a:	d6 01       	movw	r26, r12
    6b8c:	8c 93       	st	X, r24
    6b8e:	67 01       	movw	r12, r14
    6b90:	e2 cf       	rjmp	.-60     	; 0x6b56 <dtoa_prf+0x252>
    6b92:	64 17       	cp	r22, r20
    6b94:	75 07       	cpc	r23, r21
    6b96:	39 f4       	brne	.+14     	; 0x6ba6 <dtoa_prf+0x2a2>
    6b98:	96 33       	cpi	r25, 0x36	; 54
    6b9a:	20 f4       	brcc	.+8      	; 0x6ba4 <dtoa_prf+0x2a0>
    6b9c:	95 33       	cpi	r25, 0x35	; 53
    6b9e:	19 f4       	brne	.+6      	; 0x6ba6 <dtoa_prf+0x2a2>
    6ba0:	31 11       	cpse	r19, r1
    6ba2:	01 c0       	rjmp	.+2      	; 0x6ba6 <dtoa_prf+0x2a2>
    6ba4:	81 e3       	ldi	r24, 0x31	; 49
    6ba6:	f6 01       	movw	r30, r12
    6ba8:	80 83       	st	Z, r24
    6baa:	f7 01       	movw	r30, r14
    6bac:	82 2f       	mov	r24, r18
    6bae:	90 e2       	ldi	r25, 0x20	; 32
    6bb0:	88 23       	and	r24, r24
    6bb2:	19 f0       	breq	.+6      	; 0x6bba <dtoa_prf+0x2b6>
    6bb4:	91 93       	st	Z+, r25
    6bb6:	81 50       	subi	r24, 0x01	; 1
    6bb8:	fb cf       	rjmp	.-10     	; 0x6bb0 <dtoa_prf+0x2ac>
    6bba:	f7 01       	movw	r30, r14
    6bbc:	e2 0f       	add	r30, r18
    6bbe:	f1 1d       	adc	r31, r1
    6bc0:	10 82       	st	Z, r1
    6bc2:	80 e0       	ldi	r24, 0x00	; 0
    6bc4:	90 e0       	ldi	r25, 0x00	; 0
    6bc6:	29 96       	adiw	r28, 0x09	; 9
    6bc8:	cd bf       	out	0x3d, r28	; 61
    6bca:	de bf       	out	0x3e, r29	; 62
    6bcc:	df 91       	pop	r29
    6bce:	cf 91       	pop	r28
    6bd0:	1f 91       	pop	r17
    6bd2:	0f 91       	pop	r16
    6bd4:	ff 90       	pop	r15
    6bd6:	ef 90       	pop	r14
    6bd8:	df 90       	pop	r13
    6bda:	cf 90       	pop	r12
    6bdc:	bf 90       	pop	r11
    6bde:	af 90       	pop	r10
    6be0:	9f 90       	pop	r9
    6be2:	8f 90       	pop	r8
    6be4:	08 95       	ret

00006be6 <strrev>:
    6be6:	dc 01       	movw	r26, r24
    6be8:	fc 01       	movw	r30, r24
    6bea:	67 2f       	mov	r22, r23
    6bec:	71 91       	ld	r23, Z+
    6bee:	77 23       	and	r23, r23
    6bf0:	e1 f7       	brne	.-8      	; 0x6bea <strrev+0x4>
    6bf2:	32 97       	sbiw	r30, 0x02	; 2
    6bf4:	04 c0       	rjmp	.+8      	; 0x6bfe <strrev+0x18>
    6bf6:	7c 91       	ld	r23, X
    6bf8:	6d 93       	st	X+, r22
    6bfa:	70 83       	st	Z, r23
    6bfc:	62 91       	ld	r22, -Z
    6bfe:	ae 17       	cp	r26, r30
    6c00:	bf 07       	cpc	r27, r31
    6c02:	c8 f3       	brcs	.-14     	; 0x6bf6 <strrev+0x10>
    6c04:	08 95       	ret

00006c06 <_exit>:
    6c06:	f8 94       	cli

00006c08 <__stop_program>:
    6c08:	ff cf       	rjmp	.-2      	; 0x6c08 <__stop_program>
